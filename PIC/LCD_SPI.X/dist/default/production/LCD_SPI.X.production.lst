

Microchip Technology PIC18 LITE Macro Assembler V1.38 build -256452561 
                                                                                               Sat Dec 02 20:20:16 2017

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	18F67J94
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1
    15                           	psect	text7,global,reloc=2,class=CODE,delta=1
    16                           	psect	text8,global,reloc=2,class=CODE,delta=1
    17                           	psect	text9,global,reloc=2,class=CODE,delta=1
    18                           	psect	text10,global,reloc=2,class=CODE,delta=1
    19                           	psect	text11,global,reloc=2,class=CODE,delta=1
    20                           	psect	text12,global,reloc=2,class=CODE,delta=1
    21                           	psect	text13,global,reloc=2,class=CODE,delta=1
    22                           	psect	text14,global,reloc=2,class=CODE,delta=1
    23                           	psect	text15,global,reloc=2,class=CODE,delta=1
    24                           	psect	text16,global,reloc=2,class=CODE,delta=1
    25                           	psect	text17,global,reloc=2,class=CODE,delta=1
    26                           	psect	text18,global,reloc=2,class=CODE,delta=1
    27                           	psect	text19,global,reloc=2,class=CODE,delta=1
    28                           	psect	text20,global,reloc=2,class=CODE,delta=1
    29                           	psect	text21,global,reloc=2,class=CODE,delta=1
    30                           	psect	text22,global,reloc=2,class=CODE,delta=1
    31                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    32                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    33  0000                     
    34                           	psect	smallconst
    35  000E00                     __psmallconst:
    36                           	opt stack 0
    37  000E00  00                 	db	0
    38  000E01                     _dpowers:
    39                           	opt stack 0
    40  000E01  0001               	dw	1
    41  000E03  000A               	dw	10
    42  000E05  0064               	dw	100
    43  000E07  03E8               	dw	1000
    44  000E09  2710               	dw	10000
    45  000E0B                     __end_of_dpowers:
    46                           	opt stack 0
    47  0000                     _RPINR12_13	set	3632
    48  0000                     _RPOR22_23	set	3613
    49  0000                     _RPOR24_25	set	3614
    50  0000                     _SSP2BUF	set	3843
    51  0000                     _SSP2CON1	set	3865
    52  0000                     _SSP2CON3	set	3897
    53  0000                     _SSP2STAT	set	3866
    54  0000                     _SSP2STATbits	set	3866
    55  0000                     _LATDbits	set	3980
    56  0000                     _OSCCON	set	4051
    57  0000                     _TRISCbits	set	3988
    58  0000                     _TRISDbits	set	3989
    59  000E0B                     STR_7:
    60                           
    61                           ; BSR set to: 15
    62  000E0B  45                 	db	69	;'E'
    63  000E0C  20                 	db	32
    64  000E0D  20                 	db	32
    65  000E0E  4E                 	db	78	;'N'
    66  000E0F  20                 	db	32
    67  000E10  20                 	db	32
    68  000E11  44                 	db	68	;'D'
    69  000E12  20                 	db	32
    70  000E13  20                 	db	32
    71  000E14  20                 	db	32
    72  000E15  47                 	db	71	;'G'
    73  000E16  20                 	db	32
    74  000E17  20                 	db	32
    75  000E18  41                 	db	65	;'A'
    76  000E19  20                 	db	32
    77  000E1A  20                 	db	32
    78  000E1B  4D                 	db	77	;'M'
    79  000E1C  20                 	db	32
    80  000E1D  20                 	db	32
    81  000E1E  45                 	db	69	;'E'
    82  000E1F  20                 	db	32
    83  000E20  00                 	db	0
    84  000E21                     STR_3:
    85                           
    86                           ; BSR set to: 15
    87  000E21  50                 	db	80	;'P'
    88  000E22  4F                 	db	79	;'O'
    89  000E23  49                 	db	73	;'I'
    90  000E24  4E                 	db	78	;'N'
    91  000E25  54                 	db	84	;'T'
    92  000E26  53                 	db	83	;'S'
    93  000E27  20                 	db	32
    94  000E28  42                 	db	66	;'B'
    95  000E29  55                 	db	85	;'U'
    96  000E2A  4C                 	db	76	;'L'
    97  000E2B  4C                 	db	76	;'L'
    98  000E2C  45                 	db	69	;'E'
    99  000E2D  54                 	db	84	;'T'
   100  000E2E  53                 	db	83	;'S'
   101  000E2F  20                 	db	32
   102  000E30  54                 	db	84	;'T'
   103  000E31  49                 	db	73	;'I'
   104  000E32  4D                 	db	77	;'M'
   105  000E33  45                 	db	69	;'E'
   106  000E34  00                 	db	0
   107  000E35                     STR_1:
   108                           
   109                           ; BSR set to: 15
   110  000E35  20                 	db	32
   111  000E36  20                 	db	32
   112  000E37  45                 	db	69	;'E'
   113  000E38  4D                 	db	77	;'M'
   114  000E39  42                 	db	66	;'B'
   115  000E3A  45                 	db	69	;'E'
   116  000E3B  44                 	db	68	;'D'
   117  000E3C  44                 	db	68	;'D'
   118  000E3D  45                 	db	69	;'E'
   119  000E3E  44                 	db	68	;'D'
   120  000E3F  20                 	db	32
   121  000E40  55                 	db	85	;'U'
   122  000E41  4E                 	db	78	;'N'
   123  000E42  49                 	db	73	;'I'
   124  000E43  56                 	db	86	;'V'
   125  000E44  45                 	db	69	;'E'
   126  000E45  52                 	db	82	;'R'
   127  000E46  53                 	db	83	;'S'
   128  000E47  45                 	db	69	;'E'
   129  000E48  00                 	db	0
   130  000E49                     STR_2:
   131                           
   132                           ; BSR set to: 15
   133  000E49  53                 	db	83	;'S'
   134  000E4A  20                 	db	32
   135  000E4B  20                 	db	32
   136  000E4C  54                 	db	84	;'T'
   137  000E4D  20                 	db	32
   138  000E4E  20                 	db	32
   139  000E4F  41                 	db	65	;'A'
   140  000E50  20                 	db	32
   141  000E51  20                 	db	32
   142  000E52  52                 	db	82	;'R'
   143  000E53  20                 	db	32
   144  000E54  20                 	db	32
   145  000E55  54                 	db	84	;'T'
   146  000E56  20                 	db	32
   147  000E57  21                 	db	33
   148  000E58  00                 	db	0
   149  000E59                     STR_6:
   150                           
   151                           ; BSR set to: 15
   152  000E59  20                 	db	32
   153  000E5A  20                 	db	32
   154  000E5B  00                 	db	0
   155  000E5C                     STR_4:
   156                           
   157                           ; BSR set to: 15
   158  000E5C  25                 	db	37
   159  000E5D  64                 	db	100	;'d'
   160  000E5E  00                 	db	0
   161  0000                     
   162                           ; #config settings
   163  000E5F  00                 	db	0	; dummy byte at the end
   164  0000                     
   165                           	psect	cinit
   166  0014A8                     __pcinit:
   167                           	opt stack 0
   168  0014A8                     start_initialization:
   169                           	opt stack 0
   170  0014A8                     __initialization:
   171                           	opt stack 0
   172  0014A8                     end_of_initialization:
   173                           	opt stack 0
   174  0014A8                     __end_of__initialization:
   175                           	opt stack 0
   176  0014A8  0100               	movlb	0
   177  0014AA  EF4D  F008         	goto	_main	;jump to C main() function
   178                           
   179                           	psect	cstackCOMRAM
   180  000001                     __pcstackCOMRAM:
   181                           	opt stack 0
   182  000001                     ??_waitASec:
   183  000001                     ??_fliplr:
   184  000001                     ??_initialisation_PORT:
   185  000001                     ?___lwdiv:
   186                           	opt stack 0
   187  000001                     spi_Send_Read@byte:
   188                           	opt stack 0
   189  000001                     ___lwdiv@dividend:
   190                           	opt stack 0
   191                           
   192                           ; 2 bytes @ 0x0
   193  000001                     	ds	1
   194  000002                     readBusyFlag@retValue:
   195                           	opt stack 0
   196  000002                     waitASec@i:
   197                           	opt stack 0
   198                           
   199                           ; 2 bytes @ 0x1
   200  000002                     	ds	1
   201  000003                     displayCtrl@cursor:
   202                           	opt stack 0
   203  000003                     fliplr@input:
   204                           	opt stack 0
   205  000003                     ___lwdiv@divisor:
   206                           	opt stack 0
   207                           
   208                           ; 2 bytes @ 0x2
   209  000003                     	ds	1
   210  000004                     displayCtrl@blink:
   211                           	opt stack 0
   212  000004                     putchLCD@input:
   213                           	opt stack 0
   214  000004                     moveCursor@row:
   215                           	opt stack 0
   216                           
   217                           ; 2 bytes @ 0x3
   218  000004                     	ds	1
   219  000005                     displayCtrl@display:
   220                           	opt stack 0
   221  000005                     putStringLCD@input:
   222                           	opt stack 0
   223  000005                     ___lwdiv@quotient:
   224                           	opt stack 0
   225                           
   226                           ; 2 bytes @ 0x4
   227  000005                     	ds	1
   228  000006                     displayCtrl@BCD:
   229                           	opt stack 0
   230  000006                     moveCursor@col:
   231                           	opt stack 0
   232                           
   233                           ; 2 bytes @ 0x5
   234  000006                     	ds	1
   235  000007                     ??_putStringLCD:
   236  000007                     ___lwdiv@counter:
   237                           	opt stack 0
   238                           
   239                           ; 1 bytes @ 0x6
   240  000007                     	ds	1
   241  000008                     ?___lwmod:
   242                           	opt stack 0
   243  000008                     moveCursor@address:
   244                           	opt stack 0
   245  000008                     ___lwmod@dividend:
   246                           	opt stack 0
   247                           
   248                           ; 2 bytes @ 0x7
   249  000008                     	ds	1
   250  000009                     putStringLCD@i:
   251                           	opt stack 0
   252                           
   253                           ; 2 bytes @ 0x8
   254  000009                     	ds	1
   255  00000A                     ___lwmod@divisor:
   256                           	opt stack 0
   257                           
   258                           ; 2 bytes @ 0x9
   259  00000A                     	ds	1
   260  00000B                     
   261                           ; 1 bytes @ 0xA
   262  00000B                     	ds	1
   263  00000C                     ___lwmod@counter:
   264                           	opt stack 0
   265                           
   266                           ; 1 bytes @ 0xB
   267  00000C                     	ds	1
   268  00000D                     ?_sprintf:
   269                           	opt stack 0
   270  00000D                     sprintf@sp:
   271                           	opt stack 0
   272                           
   273                           ; 2 bytes @ 0xC
   274  00000D                     	ds	2
   275  00000F                     sprintf@f:
   276                           	opt stack 0
   277                           
   278                           ; 2 bytes @ 0xE
   279  00000F                     	ds	4
   280  000013                     ??_sprintf:
   281                           
   282                           ; 1 bytes @ 0x12
   283  000013                     	ds	1
   284  000014                     sprintf@ap:
   285                           	opt stack 0
   286                           
   287                           ; 2 bytes @ 0x13
   288  000014                     	ds	2
   289  000016                     sprintf@flag:
   290                           	opt stack 0
   291                           
   292                           ; 1 bytes @ 0x15
   293  000016                     	ds	1
   294  000017                     sprintf@prec:
   295                           	opt stack 0
   296                           
   297                           ; 1 bytes @ 0x16
   298  000017                     	ds	1
   299  000018                     sprintf@val:
   300                           	opt stack 0
   301                           
   302                           ; 2 bytes @ 0x17
   303  000018                     	ds	2
   304  00001A                     sprintf@c:
   305                           	opt stack 0
   306                           
   307                           ; 1 bytes @ 0x19
   308  00001A                     	ds	1
   309  00001B                     printStat@stat:
   310                           	opt stack 0
   311                           
   312                           ; 2 bytes @ 0x1A
   313  00001B                     	ds	2
   314  00001D                     printStat@statArray:
   315                           	opt stack 0
   316                           
   317                           ; 3 bytes @ 0x1C
   318  00001D                     	ds	3
   319  000020                     printRemBullets@nbBullets:
   320                           	opt stack 0
   321  000020                     printRemTime@nbSeconds:
   322                           	opt stack 0
   323  000020                     printPoints@nbPoints:
   324                           	opt stack 0
   325                           
   326                           ; 2 bytes @ 0x1F
   327  000020                     	ds	2
   328  000022                     main@status:
   329                           	opt stack 0
   330                           
   331                           ; 1 bytes @ 0x21
   332  000022                     	ds	1
   333  000023                     main@points:
   334                           	opt stack 0
   335                           
   336                           ; 1 bytes @ 0x22
   337  000023                     	ds	1
   338  000024                     main@bullets:
   339                           	opt stack 0
   340                           
   341                           ; 1 bytes @ 0x23
   342  000024                     	ds	1
   343  000025                     main@time:
   344                           	opt stack 0
   345                           
   346                           ; 1 bytes @ 0x24
   347  000025                     	ds	1
   348                           
   349 ;;
   350 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   351 ;;
   352 ;; *************** function _main *****************
   353 ;; Defined at:
   354 ;;		line 3 in file "main.c"
   355 ;; Parameters:    Size  Location     Type
   356 ;;		None
   357 ;; Auto vars:     Size  Location     Type
   358 ;;  data            5    0        unsigned char [5]
   359 ;;  i               2    0        int 
   360 ;;  time            1   36[COMRAM] unsigned char 
   361 ;;  bullets         1   35[COMRAM] unsigned char 
   362 ;;  points          1   34[COMRAM] unsigned char 
   363 ;;  status          1   33[COMRAM] unsigned char 
   364 ;; Return value:  Size  Location     Type
   365 ;;                  1    wreg      void 
   366 ;; Registers used:
   367 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   368 ;; Tracked objects:
   369 ;;		On entry : 0/0
   370 ;;		On exit  : 0/0
   371 ;;		Unchanged: 0/0
   372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   373 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   374 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   375 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   376 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   377 ;;Total ram usage:        4 bytes
   378 ;; Hardware stack levels required when called:    6
   379 ;; This function calls:
   380 ;;		_initialisation_LCD
   381 ;;		_printEndGame
   382 ;;		_printMBED
   383 ;;		_printPoints
   384 ;;		_printRemBullets
   385 ;;		_printRemTime
   386 ;;		_printStartGame
   387 ;;		_waitASec
   388 ;; This function is called by:
   389 ;;		Startup code after reset
   390 ;; This function uses a non-reentrant model
   391 ;;
   392                           
   393                           	psect	text0
   394  00109A                     __ptext0:
   395                           	opt stack 0
   396  00109A                     _main:
   397                           	opt stack 25
   398                           
   399                           ;main.c: 5: unsigned char status = 0;
   400                           
   401                           ; BSR set to: 15
   402                           ;incstack = 0
   403  00109A  0E00               	movlw	0
   404  00109C  6E22               	movwf	main@status,c
   405                           
   406                           ;main.c: 6: unsigned char data[5];
   407                           ;main.c: 7: int i;
   408                           ;main.c: 12: initialisation_LCD();
   409  00109E  EC30  F00A         	call	_initialisation_LCD	;wreg free
   410                           
   411                           ;main.c: 13: printMBED();
   412  0010A2  ECAB  F009         	call	_printMBED	;wreg free
   413                           
   414                           ;main.c: 17: unsigned char points = 0;
   415  0010A6  0E00               	movlw	0
   416  0010A8  6E23               	movwf	main@points,c
   417                           
   418                           ;main.c: 18: unsigned char bullets = 20;
   419  0010AA  0E14               	movlw	20
   420  0010AC  6E24               	movwf	main@bullets,c
   421                           
   422                           ;main.c: 19: unsigned char time = 120;
   423  0010AE  0E78               	movlw	120
   424  0010B0  6E25               	movwf	main@time,c
   425                           
   426                           ;main.c: 21: printStartGame();
   427  0010B2  EC76  F009         	call	_printStartGame	;wreg free
   428                           
   429                           ;main.c: 23: while (time > 0)
   430  0010B6  D019               	goto	l19
   431  0010B8                     l1334:
   432                           
   433                           ;main.c: 24: {
   434                           ;main.c: 25: waitASec();
   435  0010B8  ECC2  F009         	call	_waitASec	;wreg free
   436                           
   437                           ;main.c: 26: printPoints(points++);
   438  0010BC  C023  F020         	movff	main@points,printPoints@nbPoints
   439  0010C0  6A21               	clrf	printPoints@nbPoints+1,c
   440  0010C2  EC0E  F00A         	call	_printPoints	;wreg free
   441  0010C6  2A23               	incf	main@points,f,c
   442                           
   443                           ;main.c: 27: printRemBullets(bullets--);
   444  0010C8  C024  F020         	movff	main@bullets,printRemBullets@nbBullets
   445  0010CC  6A21               	clrf	printRemBullets@nbBullets+1,c
   446  0010CE  ECFD  F009         	call	_printRemBullets	;wreg free
   447  0010D2  0624               	decf	main@bullets,f,c
   448                           
   449                           ;main.c: 28: printRemTime(time--);
   450  0010D4  C025  F020         	movff	main@time,printRemTime@nbSeconds
   451  0010D8  6A21               	clrf	printRemTime@nbSeconds+1,c
   452  0010DA  ECEC  F009         	call	_printRemTime	;wreg free
   453  0010DE  0625               	decf	main@time,f,c
   454                           
   455                           ;main.c: 32: if(bullets == 0)
   456                           
   457                           ;main.c: 31: points = 255;
   458                           
   459                           ;main.c: 30: if(points > 255)
   460  0010E0  5024               	movf	main@bullets,w,c
   461  0010E2  A4D8               	btfss	status,2,c
   462  0010E4  D002               	goto	l19
   463                           
   464                           ;main.c: 33: points = 20;
   465  0010E6  0E14               	movlw	20
   466  0010E8  6E23               	movwf	main@points,c
   467  0010EA                     l19:
   468  0010EA  5025               	movf	main@time,w,c
   469  0010EC  A4D8               	btfss	status,2,c
   470  0010EE  D7E4               	goto	l1334
   471                           
   472                           ;main.c: 34: }
   473                           ;main.c: 36: printEndGame();
   474  0010F0  ECD9  F009         	call	_printEndGame	;wreg free
   475  0010F4  EF00  F000         	goto	start
   476  0010F8                     __end_of_main:
   477                           	opt stack 0
   478                           status	equ	0xFD8
   479                           
   480 ;; *************** function _printStartGame *****************
   481 ;; Defined at:
   482 ;;		line 11 in file "LCD_Game_Printer.c"
   483 ;; Parameters:    Size  Location     Type
   484 ;;		None
   485 ;; Auto vars:     Size  Location     Type
   486 ;;		None
   487 ;; Return value:  Size  Location     Type
   488 ;;                  1    wreg      void 
   489 ;; Registers used:
   490 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   491 ;; Tracked objects:
   492 ;;		On entry : 0/0
   493 ;;		On exit  : 0/0
   494 ;;		Unchanged: 0/0
   495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   496 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   497 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   498 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   499 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   500 ;;Total ram usage:        0 bytes
   501 ;; Hardware stack levels used:    1
   502 ;; Hardware stack levels required when called:    4
   503 ;; This function calls:
   504 ;;		_clearDisplay
   505 ;;		_moveCursor
   506 ;;		_putStringLCD
   507 ;;		_waitASec
   508 ;; This function is called by:
   509 ;;		_main
   510 ;; This function uses a non-reentrant model
   511 ;;
   512                           
   513                           	psect	text1
   514  0012EC                     __ptext1:
   515                           	opt stack 0
   516  0012EC                     _printStartGame:
   517                           	opt stack 26
   518                           
   519                           ;LCD_Game_Printer.c: 12: moveCursor(1,3);
   520                           
   521                           ;incstack = 0
   522  0012EC  0E00               	movlw	0
   523  0012EE  6E05               	movwf	moveCursor@row+1,c
   524  0012F0  0E01               	movlw	1
   525  0012F2  6E04               	movwf	moveCursor@row,c
   526  0012F4  0E00               	movlw	0
   527  0012F6  6E07               	movwf	moveCursor@col+1,c
   528  0012F8  0E03               	movlw	3
   529  0012FA  6E06               	movwf	moveCursor@col,c
   530  0012FC  ECCE  F008         	call	_moveCursor	;wreg free
   531                           
   532                           ;LCD_Game_Printer.c: 13: putStringLCD("S  T  A  R  T !");
   533  001300  0E49               	movlw	low STR_2
   534  001302  6E05               	movwf	putStringLCD@input,c
   535  001304  0E0E               	movlw	high STR_2
   536  001306  6E06               	movwf	putStringLCD@input+1,c
   537  001308  ECDE  F007         	call	_putStringLCD	;wreg free
   538                           
   539                           ;LCD_Game_Printer.c: 14: waitASec();
   540  00130C  ECC2  F009         	call	_waitASec	;wreg free
   541                           
   542                           ;LCD_Game_Printer.c: 15: waitASec();
   543  001310  ECC2  F009         	call	_waitASec	;wreg free
   544                           
   545                           ;LCD_Game_Printer.c: 16: clearDisplay();
   546  001314  EC1F  F00A         	call	_clearDisplay	;wreg free
   547                           
   548                           ;LCD_Game_Printer.c: 17: putStringLCD("POINTS BULLETS TIME");
   549  001318  0E21               	movlw	low STR_3
   550  00131A  6E05               	movwf	putStringLCD@input,c
   551  00131C  0E0E               	movlw	high STR_3
   552  00131E  6E06               	movwf	putStringLCD@input+1,c
   553  001320  ECDE  F007         	call	_putStringLCD	;wreg free
   554  001324  0012               	return		;funcret
   555  001326                     __end_of_printStartGame:
   556                           	opt stack 0
   557                           status	equ	0xFD8
   558                           
   559 ;; *************** function _printRemTime *****************
   560 ;; Defined at:
   561 ;;		line 25 in file "LCD_Game_Printer.c"
   562 ;; Parameters:    Size  Location     Type
   563 ;;  nbSeconds       2   31[COMRAM] unsigned int 
   564 ;; Auto vars:     Size  Location     Type
   565 ;;		None
   566 ;; Return value:  Size  Location     Type
   567 ;;                  1    wreg      void 
   568 ;; Registers used:
   569 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   570 ;; Tracked objects:
   571 ;;		On entry : 0/0
   572 ;;		On exit  : 0/0
   573 ;;		Unchanged: 0/0
   574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   575 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   576 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   577 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   578 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   579 ;;Total ram usage:        2 bytes
   580 ;; Hardware stack levels used:    1
   581 ;; Hardware stack levels required when called:    5
   582 ;; This function calls:
   583 ;;		_moveCursor
   584 ;;		_printStat
   585 ;; This function is called by:
   586 ;;		_main
   587 ;; This function uses a non-reentrant model
   588 ;;
   589                           
   590                           	psect	text2
   591  0013D8                     __ptext2:
   592                           	opt stack 0
   593  0013D8                     _printRemTime:
   594                           	opt stack 25
   595                           
   596                           ;LCD_Game_Printer.c: 26: moveCursor(2,16);
   597                           
   598                           ;incstack = 0
   599  0013D8  0E00               	movlw	0
   600  0013DA  6E05               	movwf	moveCursor@row+1,c
   601  0013DC  0E02               	movlw	2
   602  0013DE  6E04               	movwf	moveCursor@row,c
   603  0013E0  0E00               	movlw	0
   604  0013E2  6E07               	movwf	moveCursor@col+1,c
   605  0013E4  0E10               	movlw	16
   606  0013E6  6E06               	movwf	moveCursor@col,c
   607  0013E8  ECCE  F008         	call	_moveCursor	;wreg free
   608                           
   609                           ;LCD_Game_Printer.c: 27: printStat(nbSeconds);
   610  0013EC  C020  F01B         	movff	printRemTime@nbSeconds,printStat@stat
   611  0013F0  C021  F01C         	movff	printRemTime@nbSeconds+1,printStat@stat+1
   612  0013F4  EC19  F008         	call	_printStat	;wreg free
   613  0013F8  0012               	return		;funcret
   614  0013FA                     __end_of_printRemTime:
   615                           	opt stack 0
   616                           status	equ	0xFD8
   617                           
   618 ;; *************** function _printRemBullets *****************
   619 ;; Defined at:
   620 ;;		line 20 in file "LCD_Game_Printer.c"
   621 ;; Parameters:    Size  Location     Type
   622 ;;  nbBullets       2   31[COMRAM] unsigned int 
   623 ;; Auto vars:     Size  Location     Type
   624 ;;		None
   625 ;; Return value:  Size  Location     Type
   626 ;;                  1    wreg      void 
   627 ;; Registers used:
   628 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   629 ;; Tracked objects:
   630 ;;		On entry : 0/0
   631 ;;		On exit  : 0/0
   632 ;;		Unchanged: 0/0
   633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   634 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   635 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   636 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   637 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   638 ;;Total ram usage:        2 bytes
   639 ;; Hardware stack levels used:    1
   640 ;; Hardware stack levels required when called:    5
   641 ;; This function calls:
   642 ;;		_moveCursor
   643 ;;		_printStat
   644 ;; This function is called by:
   645 ;;		_main
   646 ;; This function uses a non-reentrant model
   647 ;;
   648                           
   649                           	psect	text3
   650  0013FA                     __ptext3:
   651                           	opt stack 0
   652  0013FA                     _printRemBullets:
   653                           	opt stack 25
   654                           
   655                           ;LCD_Game_Printer.c: 21: moveCursor(2,9);
   656                           
   657                           ;incstack = 0
   658  0013FA  0E00               	movlw	0
   659  0013FC  6E05               	movwf	moveCursor@row+1,c
   660  0013FE  0E02               	movlw	2
   661  001400  6E04               	movwf	moveCursor@row,c
   662  001402  0E00               	movlw	0
   663  001404  6E07               	movwf	moveCursor@col+1,c
   664  001406  0E09               	movlw	9
   665  001408  6E06               	movwf	moveCursor@col,c
   666  00140A  ECCE  F008         	call	_moveCursor	;wreg free
   667                           
   668                           ;LCD_Game_Printer.c: 22: printStat(nbBullets);
   669  00140E  C020  F01B         	movff	printRemBullets@nbBullets,printStat@stat
   670  001412  C021  F01C         	movff	printRemBullets@nbBullets+1,printStat@stat+1
   671  001416  EC19  F008         	call	_printStat	;wreg free
   672  00141A  0012               	return		;funcret
   673  00141C                     __end_of_printRemBullets:
   674                           	opt stack 0
   675                           status	equ	0xFD8
   676                           
   677 ;; *************** function _printPoints *****************
   678 ;; Defined at:
   679 ;;		line 30 in file "LCD_Game_Printer.c"
   680 ;; Parameters:    Size  Location     Type
   681 ;;  nbPoints        2   31[COMRAM] unsigned int 
   682 ;; Auto vars:     Size  Location     Type
   683 ;;		None
   684 ;; Return value:  Size  Location     Type
   685 ;;                  1    wreg      void 
   686 ;; Registers used:
   687 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   688 ;; Tracked objects:
   689 ;;		On entry : 0/0
   690 ;;		On exit  : 0/0
   691 ;;		Unchanged: 0/0
   692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   693 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   694 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   695 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   696 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   697 ;;Total ram usage:        2 bytes
   698 ;; Hardware stack levels used:    1
   699 ;; Hardware stack levels required when called:    5
   700 ;; This function calls:
   701 ;;		_moveCursor
   702 ;;		_printStat
   703 ;; This function is called by:
   704 ;;		_main
   705 ;; This function uses a non-reentrant model
   706 ;;
   707                           
   708                           	psect	text4
   709  00141C                     __ptext4:
   710                           	opt stack 0
   711  00141C                     _printPoints:
   712                           	opt stack 25
   713                           
   714                           ;LCD_Game_Printer.c: 31: moveCursor(2,1);
   715                           
   716                           ;incstack = 0
   717  00141C  0E00               	movlw	0
   718  00141E  6E05               	movwf	moveCursor@row+1,c
   719  001420  0E02               	movlw	2
   720  001422  6E04               	movwf	moveCursor@row,c
   721  001424  0E00               	movlw	0
   722  001426  6E07               	movwf	moveCursor@col+1,c
   723  001428  0E01               	movlw	1
   724  00142A  6E06               	movwf	moveCursor@col,c
   725  00142C  ECCE  F008         	call	_moveCursor	;wreg free
   726                           
   727                           ;LCD_Game_Printer.c: 32: printStat(nbPoints);
   728  001430  C020  F01B         	movff	printPoints@nbPoints,printStat@stat
   729  001434  C021  F01C         	movff	printPoints@nbPoints+1,printStat@stat+1
   730  001438  EC19  F008         	call	_printStat	;wreg free
   731  00143C  0012               	return		;funcret
   732  00143E                     __end_of_printPoints:
   733                           	opt stack 0
   734                           status	equ	0xFD8
   735                           
   736 ;; *************** function _printStat *****************
   737 ;; Defined at:
   738 ;;		line 35 in file "LCD_Game_Printer.c"
   739 ;; Parameters:    Size  Location     Type
   740 ;;  stat            2   26[COMRAM] unsigned int 
   741 ;; Auto vars:     Size  Location     Type
   742 ;;  statArray       3   28[COMRAM] unsigned char [3]
   743 ;; Return value:  Size  Location     Type
   744 ;;                  1    wreg      void 
   745 ;; Registers used:
   746 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   747 ;; Tracked objects:
   748 ;;		On entry : 0/0
   749 ;;		On exit  : 0/0
   750 ;;		Unchanged: 0/0
   751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   752 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   753 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   754 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   755 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   756 ;;Total ram usage:        5 bytes
   757 ;; Hardware stack levels used:    1
   758 ;; Hardware stack levels required when called:    4
   759 ;; This function calls:
   760 ;;		_putStringLCD
   761 ;;		_sprintf
   762 ;; This function is called by:
   763 ;;		_printRemBullets
   764 ;;		_printRemTime
   765 ;;		_printPoints
   766 ;; This function uses a non-reentrant model
   767 ;;
   768                           
   769                           	psect	text5
   770  001032                     __ptext5:
   771                           	opt stack 0
   772  001032                     _printStat:
   773                           	opt stack 25
   774                           
   775                           ;LCD_Game_Printer.c: 36: unsigned char statArray[3];
   776                           ;LCD_Game_Printer.c: 37: sprintf(statArray, "%d", stat);
   777                           
   778                           ;incstack = 0
   779  001032  0E1D               	movlw	low printStat@statArray
   780  001034  6E0D               	movwf	sprintf@sp,c
   781  001036  0E00               	movlw	high printStat@statArray
   782  001038  6E0E               	movwf	sprintf@sp+1,c
   783  00103A  0E5C               	movlw	low STR_4
   784  00103C  6E0F               	movwf	sprintf@f,c
   785  00103E  0E0E               	movlw	high STR_4
   786  001040  6E10               	movwf	sprintf@f+1,c
   787  001042  C01B  F011         	movff	printStat@stat,?_sprintf+4
   788  001046  C01C  F012         	movff	printStat@stat+1,?_sprintf+5
   789  00104A  EC30  F007         	call	_sprintf	;wreg free
   790                           
   791                           ;LCD_Game_Printer.c: 39: if(stat < 100 && stat >= 10){
   792  00104E  501C               	movf	printStat@stat+1,w,c
   793  001050  E111               	bnz	l1274
   794  001052  0E64               	movlw	100
   795  001054  5C1B               	subwf	printStat@stat,w,c
   796  001056  B0D8               	btfsc	status,0,c
   797  001058  D00D               	goto	l1274
   798  00105A  501C               	movf	printStat@stat+1,w,c
   799  00105C  E104               	bnz	u540
   800  00105E  0E0A               	movlw	10
   801  001060  5C1B               	subwf	printStat@stat,w,c
   802  001062  A0D8               	btfss	status,0,c
   803  001064  D007               	goto	l1274
   804  001066                     u540:
   805                           
   806                           ;LCD_Game_Printer.c: 40: putStringLCD(" ");
   807  001066  0E5A               	movlw	low (STR_6+1)
   808  001068  6E05               	movwf	putStringLCD@input,c
   809  00106A  0E0E               	movlw	high (STR_6+1)
   810  00106C  6E06               	movwf	putStringLCD@input+1,c
   811  00106E  ECDE  F007         	call	_putStringLCD	;wreg free
   812                           
   813                           ;LCD_Game_Printer.c: 41: }
   814  001072  D00C               	goto	l148
   815  001074                     l1274:
   816                           
   817                           ;LCD_Game_Printer.c: 42: else if(stat < 10){
   818  001074  501C               	movf	printStat@stat+1,w,c
   819  001076  E10A               	bnz	l148
   820  001078  0E0A               	movlw	10
   821  00107A  5C1B               	subwf	printStat@stat,w,c
   822  00107C  B0D8               	btfsc	status,0,c
   823  00107E  D006               	goto	l148
   824                           
   825                           ;LCD_Game_Printer.c: 43: putStringLCD("  ");
   826  001080  0E59               	movlw	low STR_6
   827  001082  6E05               	movwf	putStringLCD@input,c
   828  001084  0E0E               	movlw	high STR_6
   829  001086  6E06               	movwf	putStringLCD@input+1,c
   830  001088  ECDE  F007         	call	_putStringLCD	;wreg free
   831  00108C                     l148:
   832                           
   833                           ;LCD_Game_Printer.c: 44: }
   834                           ;LCD_Game_Printer.c: 46: putStringLCD(statArray);
   835  00108C  0E1D               	movlw	low printStat@statArray
   836  00108E  6E05               	movwf	putStringLCD@input,c
   837  001090  0E00               	movlw	high printStat@statArray
   838  001092  6E06               	movwf	putStringLCD@input+1,c
   839  001094  ECDE  F007         	call	_putStringLCD	;wreg free
   840  001098  0012               	return		;funcret
   841  00109A                     __end_of_printStat:
   842                           	opt stack 0
   843                           status	equ	0xFD8
   844                           
   845 ;; *************** function _sprintf *****************
   846 ;; Defined at:
   847 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\doprnt.c"
   848 ;; Parameters:    Size  Location     Type
   849 ;;  sp              2   12[COMRAM] PTR unsigned char 
   850 ;;		 -> printStat@statArray(3), 
   851 ;;  f               2   14[COMRAM] PTR const unsigned char 
   852 ;;		 -> STR_4(3), 
   853 ;; Auto vars:     Size  Location     Type
   854 ;;  tmpval          4    0        struct .
   855 ;;  cp              3    0        PTR const unsigned char 
   856 ;;  val             2   23[COMRAM] unsigned int 
   857 ;;  ap              2   19[COMRAM] PTR void [1]
   858 ;;		 -> ?_sprintf(2), 
   859 ;;  len             2    0        unsigned int 
   860 ;;  c               1   25[COMRAM] char 
   861 ;;  prec            1   22[COMRAM] char 
   862 ;;  flag            1   21[COMRAM] unsigned char 
   863 ;; Return value:  Size  Location     Type
   864 ;;                  2   12[COMRAM] int 
   865 ;; Registers used:
   866 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   867 ;; Tracked objects:
   868 ;;		On entry : 0/0
   869 ;;		On exit  : 0/0
   870 ;;		Unchanged: 0/0
   871 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   872 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   873 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   874 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   875 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   876 ;;Total ram usage:       14 bytes
   877 ;; Hardware stack levels used:    1
   878 ;; Hardware stack levels required when called:    1
   879 ;; This function calls:
   880 ;;		___lwdiv
   881 ;;		___lwmod
   882 ;; This function is called by:
   883 ;;		_printStat
   884 ;; This function uses a non-reentrant model
   885 ;;
   886                           
   887                           	psect	text6
   888  000E60                     __ptext6:
   889                           	opt stack 0
   890  000E60                     _sprintf:
   891                           	opt stack 27
   892                           
   893                           ;doprnt.c: 494: va_list ap;
   894                           ;doprnt.c: 499: signed char c;
   895                           ;doprnt.c: 506: signed char prec;
   896                           ;doprnt.c: 508: unsigned char flag;
   897                           ;doprnt.c: 523: union {
   898                           ;doprnt.c: 524: unsigned long vd;
   899                           ;doprnt.c: 525: double integ;
   900                           ;doprnt.c: 526: } tmpval;
   901                           ;doprnt.c: 528: unsigned int val;
   902                           ;doprnt.c: 529: unsigned len;
   903                           ;doprnt.c: 530: const char * cp;
   904                           ;doprnt.c: 533: *ap = __va_start();
   905                           
   906                           ;incstack = 0
   907  000E60  0E11               	movlw	low (?_sprintf+4)
   908  000E62  6E14               	movwf	sprintf@ap,c
   909  000E64  0E00               	movlw	high (?_sprintf+4)
   910  000E66  6E15               	movwf	sprintf@ap+1,c
   911                           
   912                           ;doprnt.c: 536: while(c = *f++) {
   913  000E68  D094               	goto	l1230
   914  000E6A                     l1178:
   915                           
   916                           ;doprnt.c: 538: if(c != '%')
   917  000E6A  0E25               	movlw	37
   918  000E6C  181A               	xorwf	sprintf@c,w,c
   919  000E6E  B4D8               	btfsc	status,2,c
   920  000E70  D009               	goto	l1184
   921                           
   922                           ;doprnt.c: 540: {
   923                           ;doprnt.c: 541: ((*sp++ = (c)));
   924  000E72  C00D  FFD9         	movff	sprintf@sp,fsr2l
   925  000E76  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
   926  000E7A  C01A  FFDF         	movff	sprintf@c,indf2
   927  000E7E  4A0D               	infsnz	sprintf@sp,f,c
   928  000E80  2A0E               	incf	sprintf@sp+1,f,c
   929                           
   930                           ;doprnt.c: 542: continue;
   931  000E82  D087               	goto	l1230
   932  000E84                     l1184:
   933                           
   934                           ;doprnt.c: 543: }
   935                           ;doprnt.c: 548: flag = 0;
   936  000E84  0E00               	movlw	0
   937  000E86  6E16               	movwf	sprintf@flag,c
   938                           
   939                           ;doprnt.c: 822: }
   940                           
   941                           ;doprnt.c: 813: continue;
   942                           
   943                           ;doprnt.c: 802: default:
   944                           
   945                           ;doprnt.c: 698: case 'i':
   946                           ;doprnt.c: 699: break;
   947                           
   948                           ;doprnt.c: 697: case 'd':
   949                           
   950                           ;doprnt.c: 638: goto alldone;
   951                           
   952                           ;doprnt.c: 637: case 0:
   953                           
   954                           ;doprnt.c: 635: switch(c = *f++) {
   955  000E88  C00F  FFF6         	movff	sprintf@f,tblptrl
   956  000E8C  C010  FFF7         	movff	sprintf@f+1,tblptrh
   957  000E90  4A0F               	infsnz	sprintf@f,f,c
   958  000E92  2A10               	incf	sprintf@f+1,f,c
   959  000E94                     	if	0	;tblptru may be non-zero
   960  000E94                     	endif
   961  000E94                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
   962  000E94  0E00               	movlw	low (__mediumconst shr (0+16))
   963  000E96  6EF8               	movwf	tblptru,c
   964  000E98                     	endif
   965  000E98  0008               	tblrd		*
   966  000E9A  CFF5 F01A          	movff	tablat,sprintf@c
   967  000E9E  501A               	movf	sprintf@c,w,c
   968                           
   969                           ; Switch size 1, requested type "space"
   970                           ; Number of cases is 3, Range of values is 0 to 105
   971                           ; switch strategies available:
   972                           ; Name         Instructions Cycles
   973                           ; simple_byte           10     6 (average)
   974                           ;	Chosen strategy is simple_byte
   975  000EA0  0A00               	xorlw	0	; case 0
   976  000EA2  B4D8               	btfsc	status,2,c
   977  000EA4  D084               	goto	l1232
   978  000EA6  0A64               	xorlw	100	; case 100
   979  000EA8  B4D8               	btfsc	status,2,c
   980  000EAA  D003               	goto	l1190
   981  000EAC  0A0D               	xorlw	13	; case 105
   982  000EAE  A4D8               	btfss	status,2,c
   983  000EB0  D070               	goto	l1230
   984  000EB2                     l1190:
   985                           
   986                           ;doprnt.c: 1253: {
   987                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
   988  000EB2  C014  FFD9         	movff	sprintf@ap,fsr2l
   989  000EB6  C015  FFDA         	movff	sprintf@ap+1,fsr2h
   990  000EBA  CFDE F018          	movff	postinc2,sprintf@val
   991  000EBE  CFDD F019          	movff	postdec2,sprintf@val+1
   992  000EC2  0E02               	movlw	2
   993  000EC4  2614               	addwf	sprintf@ap,f,c
   994  000EC6  0E00               	movlw	0
   995  000EC8  2215               	addwfc	sprintf@ap+1,f,c
   996                           
   997                           ;doprnt.c: 1261: if((int)val < 0) {
   998  000ECA  AE19               	btfss	sprintf@val+1,7,c
   999  000ECC  D006               	goto	l1200
  1000                           
  1001                           ;doprnt.c: 1262: flag |= 0x03;
  1002  000ECE  0E03               	movlw	3
  1003  000ED0  1216               	iorwf	sprintf@flag,f,c
  1004                           
  1005                           ;doprnt.c: 1263: val = -val;
  1006  000ED2  6C18               	negf	sprintf@val,c
  1007  000ED4  1E19               	comf	sprintf@val+1,f,c
  1008  000ED6  B0D8               	btfsc	status,0,c
  1009  000ED8  2A19               	incf	sprintf@val+1,f,c
  1010  000EDA                     l1200:
  1011                           
  1012                           ;doprnt.c: 1264: }
  1013                           ;doprnt.c: 1266: }
  1014                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1015  000EDA  0E01               	movlw	1
  1016  000EDC  6E1A               	movwf	sprintf@c,c
  1017  000EDE                     l1202:
  1018  000EDE  0E05               	movlw	5
  1019  000EE0  181A               	xorwf	sprintf@c,w,c
  1020  000EE2  B4D8               	btfsc	status,2,c
  1021  000EE4  D015               	goto	l1214
  1022                           
  1023                           ;doprnt.c: 1306: if(val < dpowers[c])
  1024  000EE6  501A               	movf	sprintf@c,w,c
  1025  000EE8  0D02               	mullw	2
  1026  000EEA  0E01               	movlw	low _dpowers
  1027  000EEC  24F3               	addwf	prodl,w,c
  1028  000EEE  6EF6               	movwf	tblptrl,c
  1029  000EF0  0E0E               	movlw	high _dpowers
  1030  000EF2  20F4               	addwfc	prodh,w,c
  1031  000EF4  6EF7               	movwf	tblptrh,c
  1032  000EF6                     	if	1	;There are 3 active tblptr bytes
  1033  000EF6  6AF8               	clrf	tblptru,c
  1034  000EF8  0E00               	movlw	low (__mediumconst shr (0+16))
  1035  000EFA  22F8               	addwfc	tblptru,f,c
  1036  000EFC                     	endif
  1037  000EFC  0009               	tblrd		*+
  1038  000EFE  50F5               	movf	tablat,w,c
  1039  000F00  5C18               	subwf	sprintf@val,w,c
  1040  000F02  0009               	tblrd		*+
  1041  000F04  50F5               	movf	tablat,w,c
  1042  000F06  5819               	subwfb	sprintf@val+1,w,c
  1043  000F08  A0D8               	btfss	status,0,c
  1044  000F0A  D002               	goto	l1214
  1045                           
  1046                           ;doprnt.c: 1307: break;
  1047  000F0C  2A1A               	incf	sprintf@c,f,c
  1048  000F0E  D7E7               	goto	l1202
  1049  000F10                     l1214:
  1050                           
  1051                           ;doprnt.c: 1422: {
  1052                           ;doprnt.c: 1438: if(flag & 0x03)
  1053  000F10  C016  F013         	movff	sprintf@flag,??_sprintf
  1054  000F14  0E03               	movlw	3
  1055  000F16  1613               	andwf	??_sprintf,f,c
  1056  000F18  B4D8               	btfsc	status,2,c
  1057  000F1A  D008               	goto	l1220
  1058                           
  1059                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  1060  000F1C  C00D  FFD9         	movff	sprintf@sp,fsr2l
  1061  000F20  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  1062  000F24  0E2D               	movlw	45
  1063  000F26  6EDF               	movwf	indf2,c
  1064  000F28  4A0D               	infsnz	sprintf@sp,f,c
  1065  000F2A  2A0E               	incf	sprintf@sp+1,f,c
  1066  000F2C                     l1220:
  1067                           
  1068                           ;doprnt.c: 1469: }
  1069                           ;doprnt.c: 1472: prec = c;
  1070  000F2C  C01A  F017         	movff	sprintf@c,sprintf@prec
  1071                           
  1072                           ;doprnt.c: 1474: while(prec--) {
  1073  000F30  D02C               	goto	l1228
  1074  000F32                     l1222:
  1075                           
  1076                           ;doprnt.c: 1478: {
  1077                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1078  000F32  5017               	movf	sprintf@prec,w,c
  1079  000F34  0D02               	mullw	2
  1080  000F36  0E01               	movlw	low _dpowers
  1081  000F38  24F3               	addwf	prodl,w,c
  1082  000F3A  6EF6               	movwf	tblptrl,c
  1083  000F3C  0E0E               	movlw	high _dpowers
  1084  000F3E  20F4               	addwfc	prodh,w,c
  1085  000F40  6EF7               	movwf	tblptrh,c
  1086  000F42                     	if	1	;There are 3 active tblptr bytes
  1087  000F42  6AF8               	clrf	tblptru,c
  1088  000F44  0E00               	movlw	low (__mediumconst shr (0+16))
  1089  000F46  22F8               	addwfc	tblptru,f,c
  1090  000F48                     	endif
  1091  000F48  0009               	tblrd		*+
  1092  000F4A  CFF5 F003          	movff	tablat,___lwdiv@divisor
  1093  000F4E  000A               	tblrd		*-
  1094  000F50  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  1095  000F54  C018  F001         	movff	sprintf@val,___lwdiv@dividend
  1096  000F58  C019  F002         	movff	sprintf@val+1,___lwdiv@dividend+1
  1097  000F5C  EC7C  F008         	call	___lwdiv	;wreg free
  1098  000F60  C001  F008         	movff	?___lwdiv,___lwmod@dividend
  1099  000F64  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
  1100  000F68  0E00               	movlw	0
  1101  000F6A  6E0B               	movwf	___lwmod@divisor+1,c
  1102  000F6C  0E0A               	movlw	10
  1103  000F6E  6E0A               	movwf	___lwmod@divisor,c
  1104  000F70  EC16  F009         	call	___lwmod	;wreg free
  1105  000F74  5008               	movf	?___lwmod,w,c
  1106  000F76  0F30               	addlw	48
  1107  000F78  6E1A               	movwf	sprintf@c,c
  1108                           
  1109                           ;doprnt.c: 1523: }
  1110                           ;doprnt.c: 1524: ((*sp++ = (c)));
  1111  000F7A  C00D  FFD9         	movff	sprintf@sp,fsr2l
  1112  000F7E  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  1113  000F82  C01A  FFDF         	movff	sprintf@c,indf2
  1114  000F86  4A0D               	infsnz	sprintf@sp,f,c
  1115  000F88  2A0E               	incf	sprintf@sp+1,f,c
  1116  000F8A                     l1228:
  1117  000F8A  0617               	decf	sprintf@prec,f,c
  1118  000F8C  2817               	incf	sprintf@prec,w,c
  1119  000F8E  A4D8               	btfss	status,2,c
  1120  000F90  D7D0               	goto	l1222
  1121  000F92                     l1230:
  1122  000F92  C00F  FFF6         	movff	sprintf@f,tblptrl
  1123  000F96  C010  FFF7         	movff	sprintf@f+1,tblptrh
  1124  000F9A  4A0F               	infsnz	sprintf@f,f,c
  1125  000F9C  2A10               	incf	sprintf@f+1,f,c
  1126  000F9E                     	if	0	;tblptru may be non-zero
  1127  000F9E                     	endif
  1128  000F9E                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1129  000F9E  0E00               	movlw	low (__mediumconst shr (0+16))
  1130  000FA0  6EF8               	movwf	tblptru,c
  1131  000FA2                     	endif
  1132  000FA2  0008               	tblrd		*
  1133  000FA4  CFF5 F01A          	movff	tablat,sprintf@c
  1134  000FA8  501A               	movf	sprintf@c,w,c
  1135  000FAA  A4D8               	btfss	status,2,c
  1136  000FAC  D75E               	goto	l1178
  1137  000FAE                     l1232:
  1138                           
  1139                           ;doprnt.c: 1538: *sp = 0;
  1140  000FAE  C00D  FFD9         	movff	sprintf@sp,fsr2l
  1141  000FB2  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  1142  000FB6  0E00               	movlw	0
  1143  000FB8  6EDF               	movwf	indf2,c
  1144  000FBA  0012               	return	
  1145  000FBC                     __end_of_sprintf:
  1146                           	opt stack 0
  1147                           tblptru	equ	0xFF8
  1148                           tblptrh	equ	0xFF7
  1149                           tblptrl	equ	0xFF6
  1150                           tablat	equ	0xFF5
  1151                           prodh	equ	0xFF4
  1152                           prodl	equ	0xFF3
  1153                           indf2	equ	0xFDF
  1154                           postinc2	equ	0xFDE
  1155                           postdec2	equ	0xFDD
  1156                           fsr2h	equ	0xFDA
  1157                           fsr2l	equ	0xFD9
  1158                           status	equ	0xFD8
  1159                           
  1160 ;; *************** function ___lwmod *****************
  1161 ;; Defined at:
  1162 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lwmod.c"
  1163 ;; Parameters:    Size  Location     Type
  1164 ;;  dividend        2    7[COMRAM] unsigned int 
  1165 ;;  divisor         2    9[COMRAM] unsigned int 
  1166 ;; Auto vars:     Size  Location     Type
  1167 ;;  counter         1   11[COMRAM] unsigned char 
  1168 ;; Return value:  Size  Location     Type
  1169 ;;                  2    7[COMRAM] unsigned int 
  1170 ;; Registers used:
  1171 ;;		wreg, status,2, status,0
  1172 ;; Tracked objects:
  1173 ;;		On entry : 0/0
  1174 ;;		On exit  : 0/0
  1175 ;;		Unchanged: 0/0
  1176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1177 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1178 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1179 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1180 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1181 ;;Total ram usage:        5 bytes
  1182 ;; Hardware stack levels used:    1
  1183 ;; This function calls:
  1184 ;;		Nothing
  1185 ;; This function is called by:
  1186 ;;		_sprintf
  1187 ;; This function uses a non-reentrant model
  1188 ;;
  1189                           
  1190                           	psect	text7
  1191  00122C                     __ptext7:
  1192                           	opt stack 0
  1193  00122C                     ___lwmod:
  1194                           	opt stack 27
  1195                           
  1196                           ;incstack = 0
  1197  00122C  500A               	movf	___lwmod@divisor,w,c
  1198  00122E  100B               	iorwf	___lwmod@divisor+1,w,c
  1199  001230  B4D8               	btfsc	status,2,c
  1200  001232  D018               	goto	l599
  1201  001234  0E01               	movlw	1
  1202  001236  6E0C               	movwf	___lwmod@counter,c
  1203  001238  D004               	goto	l1158
  1204  00123A                     l1156:
  1205  00123A  90D8               	bcf	status,0,c
  1206  00123C  360A               	rlcf	___lwmod@divisor,f,c
  1207  00123E  360B               	rlcf	___lwmod@divisor+1,f,c
  1208  001240  2A0C               	incf	___lwmod@counter,f,c
  1209  001242                     l1158:
  1210  001242  AE0B               	btfss	___lwmod@divisor+1,7,c
  1211  001244  D7FA               	goto	l1156
  1212  001246                     l1160:
  1213  001246  500A               	movf	___lwmod@divisor,w,c
  1214  001248  5C08               	subwf	___lwmod@dividend,w,c
  1215  00124A  500B               	movf	___lwmod@divisor+1,w,c
  1216  00124C  5809               	subwfb	___lwmod@dividend+1,w,c
  1217  00124E  A0D8               	btfss	status,0,c
  1218  001250  D004               	goto	l1164
  1219  001252  500A               	movf	___lwmod@divisor,w,c
  1220  001254  5E08               	subwf	___lwmod@dividend,f,c
  1221  001256  500B               	movf	___lwmod@divisor+1,w,c
  1222  001258  5A09               	subwfb	___lwmod@dividend+1,f,c
  1223  00125A                     l1164:
  1224  00125A  90D8               	bcf	status,0,c
  1225  00125C  320B               	rrcf	___lwmod@divisor+1,f,c
  1226  00125E  320A               	rrcf	___lwmod@divisor,f,c
  1227  001260  2E0C               	decfsz	___lwmod@counter,f,c
  1228  001262  D7F1               	goto	l1160
  1229  001264                     l599:
  1230  001264  C008  F008         	movff	___lwmod@dividend,?___lwmod
  1231  001268  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
  1232  00126C  0012               	return		;funcret
  1233  00126E                     __end_of___lwmod:
  1234                           	opt stack 0
  1235                           tblptru	equ	0xFF8
  1236                           tblptrh	equ	0xFF7
  1237                           tblptrl	equ	0xFF6
  1238                           tablat	equ	0xFF5
  1239                           prodh	equ	0xFF4
  1240                           prodl	equ	0xFF3
  1241                           indf2	equ	0xFDF
  1242                           postinc2	equ	0xFDE
  1243                           postdec2	equ	0xFDD
  1244                           fsr2h	equ	0xFDA
  1245                           fsr2l	equ	0xFD9
  1246                           status	equ	0xFD8
  1247                           
  1248 ;; *************** function ___lwdiv *****************
  1249 ;; Defined at:
  1250 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lwdiv.c"
  1251 ;; Parameters:    Size  Location     Type
  1252 ;;  dividend        2    0[COMRAM] unsigned int 
  1253 ;;  divisor         2    2[COMRAM] unsigned int 
  1254 ;; Auto vars:     Size  Location     Type
  1255 ;;  quotient        2    4[COMRAM] unsigned int 
  1256 ;;  counter         1    6[COMRAM] unsigned char 
  1257 ;; Return value:  Size  Location     Type
  1258 ;;                  2    0[COMRAM] unsigned int 
  1259 ;; Registers used:
  1260 ;;		wreg, status,2, status,0
  1261 ;; Tracked objects:
  1262 ;;		On entry : 0/0
  1263 ;;		On exit  : 0/0
  1264 ;;		Unchanged: 0/0
  1265 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1266 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1267 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1268 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1269 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1270 ;;Total ram usage:        7 bytes
  1271 ;; Hardware stack levels used:    1
  1272 ;; This function calls:
  1273 ;;		Nothing
  1274 ;; This function is called by:
  1275 ;;		_sprintf
  1276 ;; This function uses a non-reentrant model
  1277 ;;
  1278                           
  1279                           	psect	text8
  1280  0010F8                     __ptext8:
  1281                           	opt stack 0
  1282  0010F8                     ___lwdiv:
  1283                           	opt stack 27
  1284                           
  1285                           ;incstack = 0
  1286  0010F8  0E00               	movlw	0
  1287  0010FA  6E06               	movwf	___lwdiv@quotient+1,c
  1288  0010FC  0E00               	movlw	0
  1289  0010FE  6E05               	movwf	___lwdiv@quotient,c
  1290  001100  5003               	movf	___lwdiv@divisor,w,c
  1291  001102  1004               	iorwf	___lwdiv@divisor+1,w,c
  1292  001104  B4D8               	btfsc	status,2,c
  1293  001106  D01C               	goto	l589
  1294  001108  0E01               	movlw	1
  1295  00110A  6E07               	movwf	___lwdiv@counter,c
  1296  00110C  D004               	goto	l1138
  1297  00110E                     l1136:
  1298  00110E  90D8               	bcf	status,0,c
  1299  001110  3603               	rlcf	___lwdiv@divisor,f,c
  1300  001112  3604               	rlcf	___lwdiv@divisor+1,f,c
  1301  001114  2A07               	incf	___lwdiv@counter,f,c
  1302  001116                     l1138:
  1303  001116  AE04               	btfss	___lwdiv@divisor+1,7,c
  1304  001118  D7FA               	goto	l1136
  1305  00111A                     l1140:
  1306  00111A  90D8               	bcf	status,0,c
  1307  00111C  3605               	rlcf	___lwdiv@quotient,f,c
  1308  00111E  3606               	rlcf	___lwdiv@quotient+1,f,c
  1309  001120  5003               	movf	___lwdiv@divisor,w,c
  1310  001122  5C01               	subwf	___lwdiv@dividend,w,c
  1311  001124  5004               	movf	___lwdiv@divisor+1,w,c
  1312  001126  5802               	subwfb	___lwdiv@dividend+1,w,c
  1313  001128  A0D8               	btfss	status,0,c
  1314  00112A  D005               	goto	l1148
  1315  00112C  5003               	movf	___lwdiv@divisor,w,c
  1316  00112E  5E01               	subwf	___lwdiv@dividend,f,c
  1317  001130  5004               	movf	___lwdiv@divisor+1,w,c
  1318  001132  5A02               	subwfb	___lwdiv@dividend+1,f,c
  1319  001134  8005               	bsf	___lwdiv@quotient,0,c
  1320  001136                     l1148:
  1321  001136  90D8               	bcf	status,0,c
  1322  001138  3204               	rrcf	___lwdiv@divisor+1,f,c
  1323  00113A  3203               	rrcf	___lwdiv@divisor,f,c
  1324  00113C  2E07               	decfsz	___lwdiv@counter,f,c
  1325  00113E  D7ED               	goto	l1140
  1326  001140                     l589:
  1327  001140  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  1328  001144  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1329  001148  0012               	return		;funcret
  1330  00114A                     __end_of___lwdiv:
  1331                           	opt stack 0
  1332                           tblptru	equ	0xFF8
  1333                           tblptrh	equ	0xFF7
  1334                           tblptrl	equ	0xFF6
  1335                           tablat	equ	0xFF5
  1336                           prodh	equ	0xFF4
  1337                           prodl	equ	0xFF3
  1338                           indf2	equ	0xFDF
  1339                           postinc2	equ	0xFDE
  1340                           postdec2	equ	0xFDD
  1341                           fsr2h	equ	0xFDA
  1342                           fsr2l	equ	0xFD9
  1343                           status	equ	0xFD8
  1344                           
  1345 ;; *************** function _printMBED *****************
  1346 ;; Defined at:
  1347 ;;		line 3 in file "LCD_Game_Printer.c"
  1348 ;; Parameters:    Size  Location     Type
  1349 ;;		None
  1350 ;; Auto vars:     Size  Location     Type
  1351 ;;		None
  1352 ;; Return value:  Size  Location     Type
  1353 ;;                  1    wreg      void 
  1354 ;; Registers used:
  1355 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1356 ;; Tracked objects:
  1357 ;;		On entry : 0/0
  1358 ;;		On exit  : 0/0
  1359 ;;		Unchanged: 0/0
  1360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1361 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1362 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1363 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1364 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1365 ;;Total ram usage:        0 bytes
  1366 ;; Hardware stack levels used:    1
  1367 ;; Hardware stack levels required when called:    4
  1368 ;; This function calls:
  1369 ;;		_clearDisplay
  1370 ;;		_moveCursor
  1371 ;;		_putStringLCD
  1372 ;;		_waitASec
  1373 ;; This function is called by:
  1374 ;;		_main
  1375 ;; This function uses a non-reentrant model
  1376 ;;
  1377                           
  1378                           	psect	text9
  1379  001356                     __ptext9:
  1380                           	opt stack 0
  1381  001356                     _printMBED:
  1382                           	opt stack 26
  1383                           
  1384                           ;LCD_Game_Printer.c: 4: moveCursor(1,0);
  1385                           
  1386                           ;incstack = 0
  1387  001356  0E00               	movlw	0
  1388  001358  6E05               	movwf	moveCursor@row+1,c
  1389  00135A  0E01               	movlw	1
  1390  00135C  6E04               	movwf	moveCursor@row,c
  1391  00135E  0E00               	movlw	0
  1392  001360  6E07               	movwf	moveCursor@col+1,c
  1393  001362  0E00               	movlw	0
  1394  001364  6E06               	movwf	moveCursor@col,c
  1395  001366  ECCE  F008         	call	_moveCursor	;wreg free
  1396                           
  1397                           ;LCD_Game_Printer.c: 5: putStringLCD("  EMBEDDED UNIVERSE");
  1398  00136A  0E35               	movlw	low STR_1
  1399  00136C  6E05               	movwf	putStringLCD@input,c
  1400  00136E  0E0E               	movlw	high STR_1
  1401  001370  6E06               	movwf	putStringLCD@input+1,c
  1402  001372  ECDE  F007         	call	_putStringLCD	;wreg free
  1403                           
  1404                           ;LCD_Game_Printer.c: 6: waitASec();
  1405  001376  ECC2  F009         	call	_waitASec	;wreg free
  1406                           
  1407                           ;LCD_Game_Printer.c: 7: waitASec();
  1408  00137A  ECC2  F009         	call	_waitASec	;wreg free
  1409                           
  1410                           ;LCD_Game_Printer.c: 8: clearDisplay();
  1411  00137E  EC1F  F00A         	call	_clearDisplay	;wreg free
  1412  001382  0012               	return		;funcret
  1413  001384                     __end_of_printMBED:
  1414                           	opt stack 0
  1415                           tblptru	equ	0xFF8
  1416                           tblptrh	equ	0xFF7
  1417                           tblptrl	equ	0xFF6
  1418                           tablat	equ	0xFF5
  1419                           prodh	equ	0xFF4
  1420                           prodl	equ	0xFF3
  1421                           indf2	equ	0xFDF
  1422                           postinc2	equ	0xFDE
  1423                           postdec2	equ	0xFDD
  1424                           fsr2h	equ	0xFDA
  1425                           fsr2l	equ	0xFD9
  1426                           status	equ	0xFD8
  1427                           
  1428 ;; *************** function _waitASec *****************
  1429 ;; Defined at:
  1430 ;;		line 55 in file "LCD_Game_Printer.c"
  1431 ;; Parameters:    Size  Location     Type
  1432 ;;		None
  1433 ;; Auto vars:     Size  Location     Type
  1434 ;;  i               2    1[COMRAM] int 
  1435 ;; Return value:  Size  Location     Type
  1436 ;;                  1    wreg      void 
  1437 ;; Registers used:
  1438 ;;		wreg, status,2, status,0
  1439 ;; Tracked objects:
  1440 ;;		On entry : 0/0
  1441 ;;		On exit  : 0/0
  1442 ;;		Unchanged: 0/0
  1443 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1444 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1445 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1446 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1447 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1448 ;;Total ram usage:        3 bytes
  1449 ;; Hardware stack levels used:    1
  1450 ;; This function calls:
  1451 ;;		Nothing
  1452 ;; This function is called by:
  1453 ;;		_main
  1454 ;;		_printMBED
  1455 ;;		_printStartGame
  1456 ;; This function uses a non-reentrant model
  1457 ;;
  1458                           
  1459                           	psect	text10
  1460  001384                     __ptext10:
  1461                           	opt stack 0
  1462  001384                     _waitASec:
  1463                           	opt stack 30
  1464                           
  1465                           ;LCD_Game_Printer.c: 56: for(int i = 0; i < 20; i++)
  1466                           
  1467                           ;incstack = 0
  1468  001384  0E00               	movlw	0
  1469  001386  6E03               	movwf	waitASec@i+1,c
  1470  001388  0E00               	movlw	0
  1471  00138A  6E02               	movwf	waitASec@i,c
  1472  00138C                     l940:
  1473  00138C  BE03               	btfsc	waitASec@i+1,7,c
  1474  00138E  D006               	goto	l944
  1475  001390  5003               	movf	waitASec@i+1,w,c
  1476  001392  E10E               	bnz	l158
  1477  001394  0E14               	movlw	20
  1478  001396  5C02               	subwf	waitASec@i,w,c
  1479  001398  B0D8               	btfsc	status,0,c
  1480  00139A  0012               	return	
  1481  00139C                     l944:
  1482                           
  1483                           ;LCD_Game_Printer.c: 57: _delay((unsigned long)((50)*(8000000/4000.0)));
  1484  00139C  0E82               	movlw	130
  1485  00139E  6E01               	movwf	??_waitASec& (0+255),c
  1486  0013A0  0EDE               	movlw	222
  1487  0013A2                     u587:
  1488  0013A2  2EE8               	decfsz	wreg,f,c
  1489  0013A4  D7FE               	goto	u587
  1490  0013A6  2E01               	decfsz	??_waitASec& (0+255),f,c
  1491  0013A8  D7FC               	goto	u587
  1492  0013AA  4A02               	infsnz	waitASec@i,f,c
  1493  0013AC  2A03               	incf	waitASec@i+1,f,c
  1494  0013AE  D7EE               	goto	l940
  1495  0013B0                     l158:
  1496  0013B0  0012               	return		;funcret
  1497  0013B2                     __end_of_waitASec:
  1498                           	opt stack 0
  1499                           tblptru	equ	0xFF8
  1500                           tblptrh	equ	0xFF7
  1501                           tblptrl	equ	0xFF6
  1502                           tablat	equ	0xFF5
  1503                           prodh	equ	0xFF4
  1504                           prodl	equ	0xFF3
  1505                           wreg	equ	0xFE8
  1506                           indf2	equ	0xFDF
  1507                           postinc2	equ	0xFDE
  1508                           postdec2	equ	0xFDD
  1509                           fsr2h	equ	0xFDA
  1510                           fsr2l	equ	0xFD9
  1511                           status	equ	0xFD8
  1512                           
  1513 ;; *************** function _printEndGame *****************
  1514 ;; Defined at:
  1515 ;;		line 49 in file "LCD_Game_Printer.c"
  1516 ;; Parameters:    Size  Location     Type
  1517 ;;		None
  1518 ;; Auto vars:     Size  Location     Type
  1519 ;;		None
  1520 ;; Return value:  Size  Location     Type
  1521 ;;                  1    wreg      void 
  1522 ;; Registers used:
  1523 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1524 ;; Tracked objects:
  1525 ;;		On entry : 0/0
  1526 ;;		On exit  : 0/0
  1527 ;;		Unchanged: 0/0
  1528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1529 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1530 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1531 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1532 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1533 ;;Total ram usage:        0 bytes
  1534 ;; Hardware stack levels used:    1
  1535 ;; Hardware stack levels required when called:    4
  1536 ;; This function calls:
  1537 ;;		_clearDisplay
  1538 ;;		_moveCursor
  1539 ;;		_putStringLCD
  1540 ;; This function is called by:
  1541 ;;		_main
  1542 ;; This function uses a non-reentrant model
  1543 ;;
  1544                           
  1545                           	psect	text11
  1546  0013B2                     __ptext11:
  1547                           	opt stack 0
  1548  0013B2                     _printEndGame:
  1549                           	opt stack 26
  1550                           
  1551                           ;LCD_Game_Printer.c: 50: clearDisplay();
  1552                           
  1553                           ;incstack = 0
  1554  0013B2  EC1F  F00A         	call	_clearDisplay	;wreg free
  1555                           
  1556                           ;LCD_Game_Printer.c: 51: moveCursor(1,0);
  1557  0013B6  0E00               	movlw	0
  1558  0013B8  6E05               	movwf	moveCursor@row+1,c
  1559  0013BA  0E01               	movlw	1
  1560  0013BC  6E04               	movwf	moveCursor@row,c
  1561  0013BE  0E00               	movlw	0
  1562  0013C0  6E07               	movwf	moveCursor@col+1,c
  1563  0013C2  0E00               	movlw	0
  1564  0013C4  6E06               	movwf	moveCursor@col,c
  1565  0013C6  ECCE  F008         	call	_moveCursor	;wreg free
  1566                           
  1567                           ;LCD_Game_Printer.c: 52: putStringLCD("E  N  D   G  A  M  E ");
  1568  0013CA  0E0B               	movlw	low STR_7
  1569  0013CC  6E05               	movwf	putStringLCD@input,c
  1570  0013CE  0E0E               	movlw	high STR_7
  1571  0013D0  6E06               	movwf	putStringLCD@input+1,c
  1572  0013D2  ECDE  F007         	call	_putStringLCD	;wreg free
  1573  0013D6  0012               	return		;funcret
  1574  0013D8                     __end_of_printEndGame:
  1575                           	opt stack 0
  1576                           tblptru	equ	0xFF8
  1577                           tblptrh	equ	0xFF7
  1578                           tblptrl	equ	0xFF6
  1579                           tablat	equ	0xFF5
  1580                           prodh	equ	0xFF4
  1581                           prodl	equ	0xFF3
  1582                           wreg	equ	0xFE8
  1583                           indf2	equ	0xFDF
  1584                           postinc2	equ	0xFDE
  1585                           postdec2	equ	0xFDD
  1586                           fsr2h	equ	0xFDA
  1587                           fsr2l	equ	0xFD9
  1588                           status	equ	0xFD8
  1589                           
  1590 ;; *************** function _putStringLCD *****************
  1591 ;; Defined at:
  1592 ;;		line 48 in file "LCD_SPI.c"
  1593 ;; Parameters:    Size  Location     Type
  1594 ;;  input           2    4[COMRAM] PTR const unsigned char 
  1595 ;;		 -> STR_7(22), STR_6(3), STR_5(2), printStat@statArray(3), 
  1596 ;;		 -> STR_3(20), STR_2(16), STR_1(20), 
  1597 ;; Auto vars:     Size  Location     Type
  1598 ;;  i               2    8[COMRAM] int 
  1599 ;; Return value:  Size  Location     Type
  1600 ;;                  1    wreg      void 
  1601 ;; Registers used:
  1602 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1603 ;; Tracked objects:
  1604 ;;		On entry : 0/0
  1605 ;;		On exit  : 0/0
  1606 ;;		Unchanged: 0/0
  1607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1608 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1609 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1610 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1611 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1612 ;;Total ram usage:        6 bytes
  1613 ;; Hardware stack levels used:    1
  1614 ;; Hardware stack levels required when called:    3
  1615 ;; This function calls:
  1616 ;;		_putchLCD
  1617 ;; This function is called by:
  1618 ;;		_printMBED
  1619 ;;		_printStartGame
  1620 ;;		_printStat
  1621 ;;		_printEndGame
  1622 ;; This function uses a non-reentrant model
  1623 ;;
  1624                           
  1625                           	psect	text12
  1626  000FBC                     __ptext12:
  1627                           	opt stack 0
  1628  000FBC                     _putStringLCD:
  1629                           	opt stack 26
  1630                           
  1631                           ;LCD_SPI.c: 50: int i;
  1632                           ;LCD_SPI.c: 51: for (i = 0; input[i] != '\0'; i++)
  1633                           
  1634                           ;incstack = 0
  1635  000FBC  0E00               	movlw	0
  1636  000FBE  6E0A               	movwf	putStringLCD@i+1,c
  1637  000FC0  0E00               	movlw	0
  1638  000FC2  6E09               	movwf	putStringLCD@i,c
  1639  000FC4  D01B               	goto	l1174
  1640  000FC6                     l1170:
  1641                           
  1642                           ;LCD_SPI.c: 52: {
  1643                           ;LCD_SPI.c: 53: putchLCD(input[i]);
  1644  000FC6  5009               	movf	putStringLCD@i,w,c
  1645  000FC8  2405               	addwf	putStringLCD@input,w,c
  1646  000FCA  6E07               	movwf	??_putStringLCD& (0+255),c
  1647  000FCC  500A               	movf	putStringLCD@i+1,w,c
  1648  000FCE  2006               	addwfc	putStringLCD@input+1,w,c
  1649  000FD0  6E08               	movwf	(??_putStringLCD+1)& (0+255),c
  1650  000FD2  C007  FFF6         	movff	??_putStringLCD,tblptrl
  1651  000FD6  C008  FFF7         	movff	??_putStringLCD+1,tblptrh
  1652  000FDA  0E00               	movlw	low (__smallconst shr (0+16))
  1653  000FDC  6EF8               	movwf	tblptru,c
  1654  000FDE  0E0D               	movlw	(high __ramtop+-1)
  1655  000FE0  64F7               	cpfsgt	tblptrh,c
  1656  000FE2  D003               	bra	u397
  1657  000FE4  0008               	tblrd		*
  1658  000FE6  50F5               	movf	tablat,w,c
  1659  000FE8  D005               	bra	u390
  1660  000FEA                     u397:
  1661  000FEA  CFF6 FFE9          	movff	tblptrl,fsr0l
  1662  000FEE  CFF7 FFEA          	movff	tblptrh,fsr0h
  1663  000FF2  50EF               	movf	indf0,w,c
  1664  000FF4                     u390:
  1665  000FF4  EC93  F009         	call	_putchLCD
  1666  000FF8  4A09               	infsnz	putStringLCD@i,f,c
  1667  000FFA  2A0A               	incf	putStringLCD@i+1,f,c
  1668  000FFC                     l1174:
  1669  000FFC  5009               	movf	putStringLCD@i,w,c
  1670  000FFE  2405               	addwf	putStringLCD@input,w,c
  1671  001000  6E07               	movwf	??_putStringLCD& (0+255),c
  1672  001002  500A               	movf	putStringLCD@i+1,w,c
  1673  001004  2006               	addwfc	putStringLCD@input+1,w,c
  1674  001006  6E08               	movwf	(??_putStringLCD+1)& (0+255),c
  1675  001008  C007  FFF6         	movff	??_putStringLCD,tblptrl
  1676  00100C  C008  FFF7         	movff	??_putStringLCD+1,tblptrh
  1677  001010  0E00               	movlw	low (__smallconst shr (0+16))
  1678  001012  6EF8               	movwf	tblptru,c
  1679  001014  0E0D               	movlw	(high __ramtop+-1)
  1680  001016  64F7               	cpfsgt	tblptrh,c
  1681  001018  D003               	bra	u407
  1682  00101A  0008               	tblrd		*
  1683  00101C  50F5               	movf	tablat,w,c
  1684  00101E  D005               	bra	u400
  1685  001020                     u407:
  1686  001020  CFF6 FFE9          	movff	tblptrl,fsr0l
  1687  001024  CFF7 FFEA          	movff	tblptrh,fsr0h
  1688  001028  50EF               	movf	indf0,w,c
  1689  00102A                     u400:
  1690  00102A  0900               	iorlw	0
  1691  00102C  B4D8               	btfsc	status,2,c
  1692  00102E  0012               	return	
  1693  001030  D7CA               	goto	l1170
  1694  001032                     __end_of_putStringLCD:
  1695                           	opt stack 0
  1696                           tblptru	equ	0xFF8
  1697                           tblptrh	equ	0xFF7
  1698                           tblptrl	equ	0xFF6
  1699                           tablat	equ	0xFF5
  1700                           prodh	equ	0xFF4
  1701                           prodl	equ	0xFF3
  1702                           indf0	equ	0xFEF
  1703                           fsr0h	equ	0xFEA
  1704                           fsr0l	equ	0xFE9
  1705                           wreg	equ	0xFE8
  1706                           indf2	equ	0xFDF
  1707                           postinc2	equ	0xFDE
  1708                           postdec2	equ	0xFDD
  1709                           fsr2h	equ	0xFDA
  1710                           fsr2l	equ	0xFD9
  1711                           status	equ	0xFD8
  1712                           
  1713 ;; *************** function _putchLCD *****************
  1714 ;; Defined at:
  1715 ;;		line 57 in file "LCD_SPI.c"
  1716 ;; Parameters:    Size  Location     Type
  1717 ;;  input           1    wreg     unsigned char 
  1718 ;; Auto vars:     Size  Location     Type
  1719 ;;  input           1    3[COMRAM] unsigned char 
  1720 ;; Return value:  Size  Location     Type
  1721 ;;                  1    wreg      void 
  1722 ;; Registers used:
  1723 ;;		wreg, status,2, status,0, cstack
  1724 ;; Tracked objects:
  1725 ;;		On entry : 0/0
  1726 ;;		On exit  : 0/0
  1727 ;;		Unchanged: 0/0
  1728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1729 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1730 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1731 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1732 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1733 ;;Total ram usage:        1 bytes
  1734 ;; Hardware stack levels used:    1
  1735 ;; Hardware stack levels required when called:    2
  1736 ;; This function calls:
  1737 ;;		_fliplr
  1738 ;;		_readBusyFlag
  1739 ;;		_spi_Send_Read
  1740 ;; This function is called by:
  1741 ;;		_putStringLCD
  1742 ;; This function uses a non-reentrant model
  1743 ;;
  1744                           
  1745                           	psect	text13
  1746  001326                     __ptext13:
  1747                           	opt stack 0
  1748  001326                     _putchLCD:
  1749                           	opt stack 26
  1750                           
  1751                           ;incstack = 0
  1752                           ;putchLCD@input stored from wreg
  1753  001326  6E04               	movwf	putchLCD@input,c
  1754                           
  1755                           ;LCD_SPI.c: 59: input = fliplr(input);
  1756  001328  5004               	movf	putchLCD@input,w,c
  1757  00132A  ECA5  F008         	call	_fliplr
  1758  00132E  6E04               	movwf	putchLCD@input,c
  1759  001330                     l822:
  1760  001330  EC3E  F00A         	call	_readBusyFlag	;wreg free
  1761  001334  0900               	iorlw	0
  1762  001336  A4D8               	btfss	status,2,c
  1763  001338  D7FB               	goto	l822
  1764                           
  1765                           ;LCD_SPI.c: 62: LATDbits.LATD3 = 0;
  1766  00133A  968C               	bcf	3980,3,c	;volatile
  1767                           
  1768                           ;LCD_SPI.c: 63: spi_Send_Read(0xFA);
  1769  00133C  0EFA               	movlw	250
  1770  00133E  EC4B  F00A         	call	_spi_Send_Read
  1771                           
  1772                           ;LCD_SPI.c: 64: spi_Send_Read(input & 0xF0);
  1773  001342  5004               	movf	putchLCD@input,w,c
  1774  001344  0BF0               	andlw	240
  1775  001346  EC4B  F00A         	call	_spi_Send_Read
  1776                           
  1777                           ;LCD_SPI.c: 65: spi_Send_Read(input << 4);
  1778  00134A  3804               	swapf	putchLCD@input,w,c
  1779  00134C  0BF0               	andlw	240
  1780  00134E  EC4B  F00A         	call	_spi_Send_Read
  1781                           
  1782                           ;LCD_SPI.c: 66: LATDbits.LATD3 = 1;
  1783  001352  868C               	bsf	3980,3,c	;volatile
  1784  001354  0012               	return		;funcret
  1785  001356                     __end_of_putchLCD:
  1786                           	opt stack 0
  1787                           tblptru	equ	0xFF8
  1788                           tblptrh	equ	0xFF7
  1789                           tblptrl	equ	0xFF6
  1790                           tablat	equ	0xFF5
  1791                           prodh	equ	0xFF4
  1792                           prodl	equ	0xFF3
  1793                           indf0	equ	0xFEF
  1794                           fsr0h	equ	0xFEA
  1795                           fsr0l	equ	0xFE9
  1796                           wreg	equ	0xFE8
  1797                           indf2	equ	0xFDF
  1798                           postinc2	equ	0xFDE
  1799                           postdec2	equ	0xFDD
  1800                           fsr2h	equ	0xFDA
  1801                           fsr2l	equ	0xFD9
  1802                           status	equ	0xFD8
  1803                           
  1804 ;; *************** function _moveCursor *****************
  1805 ;; Defined at:
  1806 ;;		line 78 in file "LCD_SPI.c"
  1807 ;; Parameters:    Size  Location     Type
  1808 ;;  row             2    3[COMRAM] int 
  1809 ;;  col             2    5[COMRAM] int 
  1810 ;; Auto vars:     Size  Location     Type
  1811 ;;  address         1    7[COMRAM] unsigned char 
  1812 ;; Return value:  Size  Location     Type
  1813 ;;                  1    wreg      void 
  1814 ;; Registers used:
  1815 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  1816 ;; Tracked objects:
  1817 ;;		On entry : 0/0
  1818 ;;		On exit  : 0/0
  1819 ;;		Unchanged: 0/0
  1820 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1821 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1822 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1823 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1824 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1825 ;;Total ram usage:        5 bytes
  1826 ;; Hardware stack levels used:    1
  1827 ;; Hardware stack levels required when called:    2
  1828 ;; This function calls:
  1829 ;;		_fliplr
  1830 ;;		_readBusyFlag
  1831 ;;		_spi_Send_Read
  1832 ;; This function is called by:
  1833 ;;		_printMBED
  1834 ;;		_printStartGame
  1835 ;;		_printRemBullets
  1836 ;;		_printRemTime
  1837 ;;		_printPoints
  1838 ;;		_printEndGame
  1839 ;; This function uses a non-reentrant model
  1840 ;;
  1841                           
  1842                           	psect	text14
  1843  00119C                     __ptext14:
  1844                           	opt stack 0
  1845  00119C                     _moveCursor:
  1846                           	opt stack 27
  1847                           
  1848                           ;LCD_SPI.c: 80: char address = row * 20 + col;
  1849                           
  1850                           ;incstack = 0
  1851  00119C  5004               	movf	moveCursor@row,w,c
  1852  00119E  0D14               	mullw	20
  1853  0011A0  50F3               	movf	prodl,w,c
  1854  0011A2  2406               	addwf	moveCursor@col,w,c
  1855  0011A4  6E08               	movwf	moveCursor@address,c
  1856                           
  1857                           ;LCD_SPI.c: 81: if (row >= 2)
  1858  0011A6  BE05               	btfsc	moveCursor@row+1,7,c
  1859  0011A8  D008               	goto	l1256
  1860  0011AA  5005               	movf	moveCursor@row+1,w,c
  1861  0011AC  E104               	bnz	u510
  1862  0011AE  0E02               	movlw	2
  1863  0011B0  5C04               	subwf	moveCursor@row,w,c
  1864  0011B2  A0D8               	btfss	status,0,c
  1865  0011B4  D002               	goto	l1256
  1866  0011B6                     u510:
  1867                           
  1868                           ;LCD_SPI.c: 82: {
  1869                           ;LCD_SPI.c: 83: address += 24;
  1870  0011B6  0E18               	movlw	24
  1871  0011B8  2608               	addwf	moveCursor@address,f,c
  1872  0011BA                     l1256:
  1873                           
  1874                           ;LCD_SPI.c: 84: }
  1875                           ;LCD_SPI.c: 85: address = fliplr(address);
  1876  0011BA  5008               	movf	moveCursor@address,w,c
  1877  0011BC  ECA5  F008         	call	_fliplr
  1878  0011C0  6E08               	movwf	moveCursor@address,c
  1879  0011C2                     l1258:
  1880  0011C2  EC3E  F00A         	call	_readBusyFlag	;wreg free
  1881  0011C6  0900               	iorlw	0
  1882  0011C8  A4D8               	btfss	status,2,c
  1883  0011CA  D7FB               	goto	l1258
  1884                           
  1885                           ;LCD_SPI.c: 87: LATDbits.LATD3 = 0;
  1886  0011CC  968C               	bcf	3980,3,c	;volatile
  1887                           
  1888                           ;LCD_SPI.c: 88: spi_Send_Read(0xF8);
  1889  0011CE  0EF8               	movlw	248
  1890  0011D0  EC4B  F00A         	call	_spi_Send_Read
  1891                           
  1892                           ;LCD_SPI.c: 89: spi_Send_Read(address & 0xF0);
  1893  0011D4  5008               	movf	moveCursor@address,w,c
  1894  0011D6  0BF0               	andlw	240
  1895  0011D8  EC4B  F00A         	call	_spi_Send_Read
  1896                           
  1897                           ;LCD_SPI.c: 90: spi_Send_Read((address << 4) | 0x10);
  1898  0011DC  3808               	swapf	moveCursor@address,w,c
  1899  0011DE  0BF0               	andlw	240
  1900  0011E0  0910               	iorlw	16
  1901  0011E2  EC4B  F00A         	call	_spi_Send_Read
  1902  0011E6  0012               	return		;funcret
  1903  0011E8                     __end_of_moveCursor:
  1904                           	opt stack 0
  1905                           tblptru	equ	0xFF8
  1906                           tblptrh	equ	0xFF7
  1907                           tblptrl	equ	0xFF6
  1908                           tablat	equ	0xFF5
  1909                           prodh	equ	0xFF4
  1910                           prodl	equ	0xFF3
  1911                           indf0	equ	0xFEF
  1912                           fsr0h	equ	0xFEA
  1913                           fsr0l	equ	0xFE9
  1914                           wreg	equ	0xFE8
  1915                           indf2	equ	0xFDF
  1916                           postinc2	equ	0xFDE
  1917                           postdec2	equ	0xFDD
  1918                           fsr2h	equ	0xFDA
  1919                           fsr2l	equ	0xFD9
  1920                           status	equ	0xFD8
  1921                           
  1922 ;; *************** function _fliplr *****************
  1923 ;; Defined at:
  1924 ;;		line 69 in file "LCD_SPI.c"
  1925 ;; Parameters:    Size  Location     Type
  1926 ;;  input           1    wreg     unsigned char 
  1927 ;; Auto vars:     Size  Location     Type
  1928 ;;  input           1    2[COMRAM] unsigned char 
  1929 ;; Return value:  Size  Location     Type
  1930 ;;                  1    wreg      unsigned char 
  1931 ;; Registers used:
  1932 ;;		wreg, status,2, status,0
  1933 ;; Tracked objects:
  1934 ;;		On entry : 0/0
  1935 ;;		On exit  : 0/0
  1936 ;;		Unchanged: 0/0
  1937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1938 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1939 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1940 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1941 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1942 ;;Total ram usage:        3 bytes
  1943 ;; Hardware stack levels used:    1
  1944 ;; This function calls:
  1945 ;;		Nothing
  1946 ;; This function is called by:
  1947 ;;		_putchLCD
  1948 ;;		_moveCursor
  1949 ;; This function uses a non-reentrant model
  1950 ;;
  1951                           
  1952                           	psect	text15
  1953  00114A                     __ptext15:
  1954                           	opt stack 0
  1955  00114A                     _fliplr:
  1956                           	opt stack 27
  1957                           
  1958                           ;incstack = 0
  1959                           ;fliplr@input stored from wreg
  1960  00114A  6E03               	movwf	fliplr@input,c
  1961                           
  1962                           ;LCD_SPI.c: 72: input = (input & 0xF0) >> 4 | (input & 0x0F) << 4;
  1963  00114C  C003  F001         	movff	fliplr@input,??_fliplr
  1964  001150  0E0F               	movlw	15
  1965  001152  1601               	andwf	??_fliplr,f,c
  1966  001154  3A01               	swapf	??_fliplr,f,c
  1967  001156  0EF0               	movlw	240
  1968  001158  1601               	andwf	??_fliplr,f,c
  1969  00115A  3803               	swapf	fliplr@input,w,c
  1970  00115C  0B0F               	andlw	15
  1971  00115E  0B0F               	andlw	15
  1972  001160  1001               	iorwf	??_fliplr,w,c
  1973  001162  6E03               	movwf	fliplr@input,c
  1974                           
  1975                           ;LCD_SPI.c: 73: input = (input & 0xCC) >> 2 | (input & 0x33) << 2;
  1976  001164  C003  F001         	movff	fliplr@input,??_fliplr
  1977  001168  0E33               	movlw	51
  1978  00116A  1601               	andwf	??_fliplr,f,c
  1979  00116C  90D8               	bcf	status,0,c
  1980  00116E  3601               	rlcf	??_fliplr,f,c
  1981  001170  90D8               	bcf	status,0,c
  1982  001172  3601               	rlcf	??_fliplr,f,c
  1983  001174  4003               	rrncf	fliplr@input,w,c
  1984  001176  42E8               	rrncf	wreg,f,c
  1985  001178  0B3F               	andlw	63
  1986  00117A  0B33               	andlw	51
  1987  00117C  1001               	iorwf	??_fliplr,w,c
  1988  00117E  6E03               	movwf	fliplr@input,c
  1989                           
  1990                           ;LCD_SPI.c: 74: input = (input & 0xAA) >> 1 | (input & 0x55) << 1;
  1991  001180  C003  F001         	movff	fliplr@input,??_fliplr
  1992  001184  0E55               	movlw	85
  1993  001186  1601               	andwf	??_fliplr,f,c
  1994  001188  90D8               	bcf	status,0,c
  1995  00118A  3401               	rlcf	??_fliplr,w,c
  1996  00118C  6E02               	movwf	(??_fliplr+1)& (0+255),c
  1997  00118E  90D8               	bcf	status,0,c
  1998  001190  3003               	rrcf	fliplr@input,w,c
  1999  001192  0B55               	andlw	85
  2000  001194  1002               	iorwf	??_fliplr+1,w,c
  2001  001196  6E03               	movwf	fliplr@input,c
  2002                           
  2003                           ;LCD_SPI.c: 76: return input;
  2004  001198  5003               	movf	fliplr@input,w,c
  2005  00119A  0012               	return	
  2006  00119C                     __end_of_fliplr:
  2007                           	opt stack 0
  2008                           tblptru	equ	0xFF8
  2009                           tblptrh	equ	0xFF7
  2010                           tblptrl	equ	0xFF6
  2011                           tablat	equ	0xFF5
  2012                           prodh	equ	0xFF4
  2013                           prodl	equ	0xFF3
  2014                           indf0	equ	0xFEF
  2015                           fsr0h	equ	0xFEA
  2016                           fsr0l	equ	0xFE9
  2017                           wreg	equ	0xFE8
  2018                           indf2	equ	0xFDF
  2019                           postinc2	equ	0xFDE
  2020                           postdec2	equ	0xFDD
  2021                           fsr2h	equ	0xFDA
  2022                           fsr2l	equ	0xFD9
  2023                           status	equ	0xFD8
  2024                           
  2025 ;; *************** function _initialisation_LCD *****************
  2026 ;; Defined at:
  2027 ;;		line 149 in file "LCD_SPI.c"
  2028 ;; Parameters:    Size  Location     Type
  2029 ;;		None
  2030 ;; Auto vars:     Size  Location     Type
  2031 ;;		None
  2032 ;; Return value:  Size  Location     Type
  2033 ;;                  1    wreg      void 
  2034 ;; Registers used:
  2035 ;;		wreg, status,2, status,0, cstack
  2036 ;; Tracked objects:
  2037 ;;		On entry : 0/0
  2038 ;;		On exit  : 0/0
  2039 ;;		Unchanged: 0/0
  2040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2041 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2042 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2043 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2044 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2045 ;;Total ram usage:        0 bytes
  2046 ;; Hardware stack levels used:    1
  2047 ;; Hardware stack levels required when called:    3
  2048 ;; This function calls:
  2049 ;;		_clearDisplay
  2050 ;;		_displayCtrl
  2051 ;;		_initialisation_PORT
  2052 ;;		_initialisation_SPI
  2053 ;; This function is called by:
  2054 ;;		_main
  2055 ;; This function uses a non-reentrant model
  2056 ;;
  2057                           
  2058                           	psect	text16
  2059  001460                     __ptext16:
  2060                           	opt stack 0
  2061  001460                     _initialisation_LCD:
  2062                           	opt stack 27
  2063                           
  2064                           ;LCD_SPI.c: 151: initialisation_PORT();
  2065                           
  2066                           ;incstack = 0
  2067  001460  EC37  F009         	call	_initialisation_PORT	;wreg free
  2068                           
  2069                           ;LCD_SPI.c: 152: initialisation_SPI();
  2070  001464  EC57  F009         	call	_initialisation_SPI	;wreg free
  2071                           
  2072                           ;LCD_SPI.c: 153: clearDisplay();
  2073  001468  EC1F  F00A         	call	_clearDisplay	;wreg free
  2074                           
  2075                           ;LCD_SPI.c: 154: displayCtrl(1,1,0);
  2076  00146C  0E01               	movlw	1
  2077  00146E  6E03               	movwf	displayCtrl@cursor,c
  2078  001470  0E00               	movlw	0
  2079  001472  6E04               	movwf	displayCtrl@blink,c
  2080  001474  0E01               	movlw	1
  2081  001476  ECF4  F008         	call	_displayCtrl
  2082  00147A  0012               	return		;funcret
  2083  00147C                     __end_of_initialisation_LCD:
  2084                           	opt stack 0
  2085                           tblptru	equ	0xFF8
  2086                           tblptrh	equ	0xFF7
  2087                           tblptrl	equ	0xFF6
  2088                           tablat	equ	0xFF5
  2089                           prodh	equ	0xFF4
  2090                           prodl	equ	0xFF3
  2091                           indf0	equ	0xFEF
  2092                           fsr0h	equ	0xFEA
  2093                           fsr0l	equ	0xFE9
  2094                           wreg	equ	0xFE8
  2095                           indf2	equ	0xFDF
  2096                           postinc2	equ	0xFDE
  2097                           postdec2	equ	0xFDD
  2098                           fsr2h	equ	0xFDA
  2099                           fsr2l	equ	0xFD9
  2100                           status	equ	0xFD8
  2101                           
  2102 ;; *************** function _initialisation_SPI *****************
  2103 ;; Defined at:
  2104 ;;		line 112 in file "LCD_SPI.c"
  2105 ;; Parameters:    Size  Location     Type
  2106 ;;		None
  2107 ;; Auto vars:     Size  Location     Type
  2108 ;;		None
  2109 ;; Return value:  Size  Location     Type
  2110 ;;                  1    wreg      void 
  2111 ;; Registers used:
  2112 ;;		wreg, status,2, status,0
  2113 ;; Tracked objects:
  2114 ;;		On entry : 0/0
  2115 ;;		On exit  : 0/0
  2116 ;;		Unchanged: 0/0
  2117 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2118 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2119 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2120 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2121 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2122 ;;Total ram usage:        0 bytes
  2123 ;; Hardware stack levels used:    1
  2124 ;; This function calls:
  2125 ;;		Nothing
  2126 ;; This function is called by:
  2127 ;;		_initialisation_LCD
  2128 ;; This function uses a non-reentrant model
  2129 ;;
  2130                           
  2131                           	psect	text17
  2132  0012AE                     __ptext17:
  2133                           	opt stack 0
  2134  0012AE                     _initialisation_SPI:
  2135                           	opt stack 29
  2136                           
  2137                           ;LCD_SPI.c: 116: RPOR24_25 |= 0x04;
  2138                           
  2139                           ;incstack = 0
  2140  0012AE  010E               	movlb	14	; () banked
  2141  0012B0  851E               	bsf	30,2,b	;volatile
  2142                           
  2143                           ; BSR set to: 14
  2144                           ;LCD_SPI.c: 117: RPOR24_25 &= 0xF4;
  2145  0012B2  0EF4               	movlw	244
  2146  0012B4  010E               	movlb	14	; () banked
  2147  0012B6  171E               	andwf	30,f,b	;volatile
  2148                           
  2149                           ; BSR set to: 14
  2150                           ;LCD_SPI.c: 119: RPOR22_23 |= 0x05;
  2151  0012B8  0E05               	movlw	5
  2152  0012BA  010E               	movlb	14	; () banked
  2153  0012BC  131D               	iorwf	29,f,b	;volatile
  2154                           
  2155                           ; BSR set to: 14
  2156                           ;LCD_SPI.c: 120: RPOR22_23 &= 0xF5;
  2157  0012BE  0EF5               	movlw	245
  2158  0012C0  010E               	movlb	14	; () banked
  2159  0012C2  171D               	andwf	29,f,b	;volatile
  2160                           
  2161                           ; BSR set to: 14
  2162                           ;LCD_SPI.c: 122: RPINR12_13 |= 0x50;
  2163  0012C4  0E50               	movlw	80
  2164  0012C6  010E               	movlb	14	; () banked
  2165  0012C8  1330               	iorwf	48,f,b	;volatile
  2166                           
  2167                           ; BSR set to: 14
  2168                           ;LCD_SPI.c: 123: RPINR12_13 &= 0x5F;
  2169  0012CA  0E5F               	movlw	95
  2170  0012CC  010E               	movlb	14	; () banked
  2171  0012CE  1730               	andwf	48,f,b	;volatile
  2172                           
  2173                           ; BSR set to: 14
  2174                           ;LCD_SPI.c: 126: SSP2CON1 &= 0xF1;
  2175  0012D0  0EF1               	movlw	241
  2176  0012D2  010F               	movlb	15	; () banked
  2177  0012D4  1719               	andwf	25,f,b	;volatile
  2178                           
  2179                           ; BSR set to: 15
  2180                           ;LCD_SPI.c: 127: SSP2CON1 |= 0x31;
  2181  0012D6  0E31               	movlw	49
  2182  0012D8  010F               	movlb	15	; () banked
  2183  0012DA  1319               	iorwf	25,f,b	;volatile
  2184                           
  2185                           ; BSR set to: 15
  2186                           ;LCD_SPI.c: 128: SSP2STAT |= 0x80;
  2187  0012DC  010F               	movlb	15	; () banked
  2188  0012DE  8F1A               	bsf	26,7,b	;volatile
  2189                           
  2190                           ; BSR set to: 15
  2191                           ;LCD_SPI.c: 129: SSP2STAT &= ~0x40;
  2192  0012E0  010F               	movlb	15	; () banked
  2193  0012E2  9D1A               	bcf	26,6,b	;volatile
  2194                           
  2195                           ; BSR set to: 15
  2196                           ;LCD_SPI.c: 130: SSP2CON3 &= 0x8F;
  2197  0012E4  0E8F               	movlw	143
  2198  0012E6  010F               	movlb	15	; () banked
  2199  0012E8  1739               	andwf	57,f,b	;volatile
  2200                           
  2201                           ; BSR set to: 15
  2202  0012EA  0012               	return		;funcret
  2203  0012EC                     __end_of_initialisation_SPI:
  2204                           	opt stack 0
  2205                           tblptru	equ	0xFF8
  2206                           tblptrh	equ	0xFF7
  2207                           tblptrl	equ	0xFF6
  2208                           tablat	equ	0xFF5
  2209                           prodh	equ	0xFF4
  2210                           prodl	equ	0xFF3
  2211                           indf0	equ	0xFEF
  2212                           fsr0h	equ	0xFEA
  2213                           fsr0l	equ	0xFE9
  2214                           wreg	equ	0xFE8
  2215                           indf2	equ	0xFDF
  2216                           postinc2	equ	0xFDE
  2217                           postdec2	equ	0xFDD
  2218                           fsr2h	equ	0xFDA
  2219                           fsr2l	equ	0xFD9
  2220                           status	equ	0xFD8
  2221                           
  2222 ;; *************** function _initialisation_PORT *****************
  2223 ;; Defined at:
  2224 ;;		line 134 in file "LCD_SPI.c"
  2225 ;; Parameters:    Size  Location     Type
  2226 ;;		None
  2227 ;; Auto vars:     Size  Location     Type
  2228 ;;		None
  2229 ;; Return value:  Size  Location     Type
  2230 ;;                  1    wreg      void 
  2231 ;; Registers used:
  2232 ;;		wreg, status,2, status,0
  2233 ;; Tracked objects:
  2234 ;;		On entry : 0/0
  2235 ;;		On exit  : 0/0
  2236 ;;		Unchanged: 0/0
  2237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2238 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2239 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2240 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2241 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2242 ;;Total ram usage:        1 bytes
  2243 ;; Hardware stack levels used:    1
  2244 ;; This function calls:
  2245 ;;		Nothing
  2246 ;; This function is called by:
  2247 ;;		_initialisation_LCD
  2248 ;; This function uses a non-reentrant model
  2249 ;;
  2250                           
  2251                           	psect	text18
  2252  00126E                     __ptext18:
  2253                           	opt stack 0
  2254  00126E                     _initialisation_PORT:
  2255                           	opt stack 29
  2256                           
  2257                           ;LCD_SPI.c: 136: OSCCON = OSCCON | 0b01110000;
  2258                           
  2259                           ; BSR set to: 15
  2260                           ;incstack = 0
  2261  00126E  50D3               	movf	4051,w,c	;volatile
  2262  001270  0970               	iorlw	112
  2263  001272  6ED3               	movwf	4051,c	;volatile
  2264                           
  2265                           ;LCD_SPI.c: 137: TRISDbits.TRISD4 = 0;
  2266  001274  9895               	bcf	3989,4,c	;volatile
  2267                           
  2268                           ;LCD_SPI.c: 138: TRISDbits.TRISD2 = 0;
  2269  001276  9495               	bcf	3989,2,c	;volatile
  2270                           
  2271                           ;LCD_SPI.c: 139: TRISDbits.TRISD3 = 0;
  2272  001278  9695               	bcf	3989,3,c	;volatile
  2273                           
  2274                           ;LCD_SPI.c: 140: TRISDbits.TRISD1 = 1;
  2275  00127A  8295               	bsf	3989,1,c	;volatile
  2276                           
  2277                           ;LCD_SPI.c: 141: TRISCbits.TRISC0 = 0;
  2278  00127C  9094               	bcf	3988,0,c	;volatile
  2279                           
  2280                           ;LCD_SPI.c: 142: LATDbits.LATD3 = 1;
  2281  00127E  868C               	bsf	3980,3,c	;volatile
  2282                           
  2283                           ;LCD_SPI.c: 143: __nop();
  2284  001280  F000               	nop	
  2285                           
  2286                           ;LCD_SPI.c: 144: _delay((unsigned long)((33)*(8000000/4000.0)));
  2287  001282  0E56               	movlw	86
  2288  001284  6E01               	movwf	??_initialisation_PORT& (0+255),c
  2289  001286  0EB6               	movlw	182
  2290  001288                     u597:
  2291  001288  2EE8               	decfsz	wreg,f,c
  2292  00128A  D7FE               	goto	u597
  2293  00128C  2E01               	decfsz	??_initialisation_PORT& (0+255),f,c
  2294  00128E  D7FC               	goto	u597
  2295                           
  2296                           ;LCD_SPI.c: 145: _delay((unsigned long)((33)*(8000000/4000.0)));
  2297  001290  0E56               	movlw	86
  2298  001292  6E01               	movwf	??_initialisation_PORT& (0+255),c
  2299  001294  0EB6               	movlw	182
  2300  001296                     u607:
  2301  001296  2EE8               	decfsz	wreg,f,c
  2302  001298  D7FE               	goto	u607
  2303  00129A  2E01               	decfsz	??_initialisation_PORT& (0+255),f,c
  2304  00129C  D7FC               	goto	u607
  2305                           
  2306                           ;LCD_SPI.c: 146: _delay((unsigned long)((33)*(8000000/4000.0)));
  2307  00129E  0E56               	movlw	86
  2308  0012A0  6E01               	movwf	??_initialisation_PORT& (0+255),c
  2309  0012A2  0EB6               	movlw	182
  2310  0012A4                     u617:
  2311  0012A4  2EE8               	decfsz	wreg,f,c
  2312  0012A6  D7FE               	goto	u617
  2313  0012A8  2E01               	decfsz	??_initialisation_PORT& (0+255),f,c
  2314  0012AA  D7FC               	goto	u617
  2315  0012AC  0012               	return		;funcret
  2316  0012AE                     __end_of_initialisation_PORT:
  2317                           	opt stack 0
  2318                           tblptru	equ	0xFF8
  2319                           tblptrh	equ	0xFF7
  2320                           tblptrl	equ	0xFF6
  2321                           tablat	equ	0xFF5
  2322                           prodh	equ	0xFF4
  2323                           prodl	equ	0xFF3
  2324                           indf0	equ	0xFEF
  2325                           fsr0h	equ	0xFEA
  2326                           fsr0l	equ	0xFE9
  2327                           wreg	equ	0xFE8
  2328                           indf2	equ	0xFDF
  2329                           postinc2	equ	0xFDE
  2330                           postdec2	equ	0xFDD
  2331                           fsr2h	equ	0xFDA
  2332                           fsr2l	equ	0xFD9
  2333                           status	equ	0xFD8
  2334                           
  2335 ;; *************** function _displayCtrl *****************
  2336 ;; Defined at:
  2337 ;;		line 30 in file "LCD_SPI.c"
  2338 ;; Parameters:    Size  Location     Type
  2339 ;;  display         1    wreg     unsigned char 
  2340 ;;  cursor          1    2[COMRAM] unsigned char 
  2341 ;;  blink           1    3[COMRAM] unsigned char 
  2342 ;; Auto vars:     Size  Location     Type
  2343 ;;  display         1    4[COMRAM] unsigned char 
  2344 ;;  BCD             1    5[COMRAM] unsigned char 
  2345 ;; Return value:  Size  Location     Type
  2346 ;;                  1    wreg      void 
  2347 ;; Registers used:
  2348 ;;		wreg, status,2, status,0, cstack
  2349 ;; Tracked objects:
  2350 ;;		On entry : 0/0
  2351 ;;		On exit  : 0/0
  2352 ;;		Unchanged: 0/0
  2353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2354 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2355 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2356 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2357 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2358 ;;Total ram usage:        4 bytes
  2359 ;; Hardware stack levels used:    1
  2360 ;; Hardware stack levels required when called:    2
  2361 ;; This function calls:
  2362 ;;		_readBusyFlag
  2363 ;;		_spi_Send_Read
  2364 ;; This function is called by:
  2365 ;;		_initialisation_LCD
  2366 ;; This function uses a non-reentrant model
  2367 ;;
  2368                           
  2369                           	psect	text19
  2370  0011E8                     __ptext19:
  2371                           	opt stack 0
  2372  0011E8                     _displayCtrl:
  2373                           	opt stack 27
  2374                           
  2375                           ;incstack = 0
  2376                           ;displayCtrl@display stored from wreg
  2377  0011E8  6E05               	movwf	displayCtrl@display,c
  2378                           
  2379                           ;LCD_SPI.c: 32: char BCD = blink;
  2380  0011EA  C004  F006         	movff	displayCtrl@blink,displayCtrl@BCD
  2381                           
  2382                           ;LCD_SPI.c: 33: BCD <<= 1;
  2383  0011EE  90D8               	bcf	status,0,c
  2384  0011F0  3606               	rlcf	displayCtrl@BCD,f,c
  2385                           
  2386                           ;LCD_SPI.c: 34: BCD += cursor;
  2387  0011F2  5003               	movf	displayCtrl@cursor,w,c
  2388  0011F4  2606               	addwf	displayCtrl@BCD,f,c
  2389                           
  2390                           ;LCD_SPI.c: 35: BCD <<= 1;
  2391  0011F6  90D8               	bcf	status,0,c
  2392  0011F8  3606               	rlcf	displayCtrl@BCD,f,c
  2393                           
  2394                           ;LCD_SPI.c: 36: BCD += display;
  2395  0011FA  5005               	movf	displayCtrl@display,w,c
  2396  0011FC  2606               	addwf	displayCtrl@BCD,f,c
  2397                           
  2398                           ;LCD_SPI.c: 37: BCD <<= 1;
  2399  0011FE  90D8               	bcf	status,0,c
  2400  001200  3606               	rlcf	displayCtrl@BCD,f,c
  2401                           
  2402                           ;LCD_SPI.c: 38: BCD += 1;
  2403  001202  2A06               	incf	displayCtrl@BCD,f,c
  2404                           
  2405                           ;LCD_SPI.c: 39: BCD <<= 4;
  2406  001204  3A06               	swapf	displayCtrl@BCD,f,c
  2407  001206  0EF0               	movlw	240
  2408  001208  1606               	andwf	displayCtrl@BCD,f,c
  2409  00120A                     l1244:
  2410  00120A  EC3E  F00A         	call	_readBusyFlag	;wreg free
  2411  00120E  0900               	iorlw	0
  2412  001210  A4D8               	btfss	status,2,c
  2413  001212  D7FB               	goto	l1244
  2414                           
  2415                           ;LCD_SPI.c: 42: LATDbits.LATD3 = 0;
  2416  001214  968C               	bcf	3980,3,c	;volatile
  2417                           
  2418                           ;LCD_SPI.c: 43: spi_Send_Read(0xF8);
  2419  001216  0EF8               	movlw	248
  2420  001218  EC4B  F00A         	call	_spi_Send_Read
  2421                           
  2422                           ;LCD_SPI.c: 44: spi_Send_Read(BCD);
  2423  00121C  5006               	movf	displayCtrl@BCD,w,c
  2424  00121E  EC4B  F00A         	call	_spi_Send_Read
  2425                           
  2426                           ;LCD_SPI.c: 45: spi_Send_Read(0x00);
  2427  001222  0E00               	movlw	0
  2428  001224  EC4B  F00A         	call	_spi_Send_Read
  2429                           
  2430                           ;LCD_SPI.c: 46: LATDbits.LATD3 = 1;
  2431  001228  868C               	bsf	3980,3,c	;volatile
  2432  00122A  0012               	return		;funcret
  2433  00122C                     __end_of_displayCtrl:
  2434                           	opt stack 0
  2435                           tblptru	equ	0xFF8
  2436                           tblptrh	equ	0xFF7
  2437                           tblptrl	equ	0xFF6
  2438                           tablat	equ	0xFF5
  2439                           prodh	equ	0xFF4
  2440                           prodl	equ	0xFF3
  2441                           indf0	equ	0xFEF
  2442                           fsr0h	equ	0xFEA
  2443                           fsr0l	equ	0xFE9
  2444                           wreg	equ	0xFE8
  2445                           indf2	equ	0xFDF
  2446                           postinc2	equ	0xFDE
  2447                           postdec2	equ	0xFDD
  2448                           fsr2h	equ	0xFDA
  2449                           fsr2l	equ	0xFD9
  2450                           status	equ	0xFD8
  2451                           
  2452 ;; *************** function _clearDisplay *****************
  2453 ;; Defined at:
  2454 ;;		line 18 in file "LCD_SPI.c"
  2455 ;; Parameters:    Size  Location     Type
  2456 ;;		None
  2457 ;; Auto vars:     Size  Location     Type
  2458 ;;		None
  2459 ;; Return value:  Size  Location     Type
  2460 ;;                  1    wreg      void 
  2461 ;; Registers used:
  2462 ;;		wreg, status,2, status,0, cstack
  2463 ;; Tracked objects:
  2464 ;;		On entry : 0/0
  2465 ;;		On exit  : 0/0
  2466 ;;		Unchanged: 0/0
  2467 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2468 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2469 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2470 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2471 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2472 ;;Total ram usage:        0 bytes
  2473 ;; Hardware stack levels used:    1
  2474 ;; Hardware stack levels required when called:    2
  2475 ;; This function calls:
  2476 ;;		_readBusyFlag
  2477 ;;		_spi_Send_Read
  2478 ;; This function is called by:
  2479 ;;		_initialisation_LCD
  2480 ;;		_printMBED
  2481 ;;		_printStartGame
  2482 ;;		_printEndGame
  2483 ;; This function uses a non-reentrant model
  2484 ;;
  2485                           
  2486                           	psect	text20
  2487  00143E                     __ptext20:
  2488                           	opt stack 0
  2489  00143E                     _clearDisplay:
  2490                           	opt stack 27
  2491  00143E                     l950:
  2492  00143E  EC3E  F00A         	call	_readBusyFlag	;wreg free
  2493  001442  0900               	iorlw	0
  2494  001444  A4D8               	btfss	status,2,c
  2495  001446  D7FB               	goto	l950
  2496                           
  2497                           ;LCD_SPI.c: 22: LATDbits.LATD3 = 0;
  2498  001448  968C               	bcf	3980,3,c	;volatile
  2499                           
  2500                           ;LCD_SPI.c: 23: spi_Send_Read(0xF8);
  2501  00144A  0EF8               	movlw	248
  2502  00144C  EC4B  F00A         	call	_spi_Send_Read
  2503                           
  2504                           ;LCD_SPI.c: 24: spi_Send_Read(0x80);
  2505  001450  0E80               	movlw	128
  2506  001452  EC4B  F00A         	call	_spi_Send_Read
  2507                           
  2508                           ;LCD_SPI.c: 25: spi_Send_Read(0x00);
  2509  001456  0E00               	movlw	0
  2510  001458  EC4B  F00A         	call	_spi_Send_Read
  2511                           
  2512                           ;LCD_SPI.c: 26: LATDbits.LATD3 = 1;
  2513  00145C  868C               	bsf	3980,3,c	;volatile
  2514  00145E  0012               	return		;funcret
  2515  001460                     __end_of_clearDisplay:
  2516                           	opt stack 0
  2517                           tblptru	equ	0xFF8
  2518                           tblptrh	equ	0xFF7
  2519                           tblptrl	equ	0xFF6
  2520                           tablat	equ	0xFF5
  2521                           prodh	equ	0xFF4
  2522                           prodl	equ	0xFF3
  2523                           indf0	equ	0xFEF
  2524                           fsr0h	equ	0xFEA
  2525                           fsr0l	equ	0xFE9
  2526                           wreg	equ	0xFE8
  2527                           indf2	equ	0xFDF
  2528                           postinc2	equ	0xFDE
  2529                           postdec2	equ	0xFDD
  2530                           fsr2h	equ	0xFDA
  2531                           fsr2l	equ	0xFD9
  2532                           status	equ	0xFD8
  2533                           
  2534 ;; *************** function _readBusyFlag *****************
  2535 ;; Defined at:
  2536 ;;		line 93 in file "LCD_SPI.c"
  2537 ;; Parameters:    Size  Location     Type
  2538 ;;		None
  2539 ;; Auto vars:     Size  Location     Type
  2540 ;;  retValue        1    1[COMRAM] unsigned char 
  2541 ;; Return value:  Size  Location     Type
  2542 ;;                  1    wreg      unsigned char 
  2543 ;; Registers used:
  2544 ;;		wreg, status,2, status,0, cstack
  2545 ;; Tracked objects:
  2546 ;;		On entry : 0/0
  2547 ;;		On exit  : 0/0
  2548 ;;		Unchanged: 0/0
  2549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2550 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2551 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2552 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2553 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2554 ;;Total ram usage:        1 bytes
  2555 ;; Hardware stack levels used:    1
  2556 ;; Hardware stack levels required when called:    1
  2557 ;; This function calls:
  2558 ;;		_spi_Send_Read
  2559 ;; This function is called by:
  2560 ;;		_clearDisplay
  2561 ;;		_displayCtrl
  2562 ;;		_putchLCD
  2563 ;;		_moveCursor
  2564 ;; This function uses a non-reentrant model
  2565 ;;
  2566                           
  2567                           	psect	text21
  2568  00147C                     __ptext21:
  2569                           	opt stack 0
  2570  00147C                     _readBusyFlag:
  2571                           	opt stack 26
  2572                           
  2573                           ;LCD_SPI.c: 95: unsigned char retValue;
  2574                           ;LCD_SPI.c: 97: LATDbits.LATD3 = 0;
  2575                           
  2576                           ;incstack = 0
  2577  00147C  968C               	bcf	3980,3,c	;volatile
  2578                           
  2579                           ;LCD_SPI.c: 98: spi_Send_Read(0xFC);
  2580  00147E  0EFC               	movlw	252
  2581  001480  EC4B  F00A         	call	_spi_Send_Read
  2582                           
  2583                           ;LCD_SPI.c: 99: retValue = spi_Send_Read(0x00);
  2584  001484  0E00               	movlw	0
  2585  001486  EC4B  F00A         	call	_spi_Send_Read
  2586  00148A  6E02               	movwf	readBusyFlag@retValue,c
  2587                           
  2588                           ;LCD_SPI.c: 100: LATDbits.LATD3 = 1;
  2589  00148C  868C               	bsf	3980,3,c	;volatile
  2590                           
  2591                           ;LCD_SPI.c: 101: _delay((unsigned long)((1)*(8000000/4000000.0)));
  2592  00148E  D000               	nop2		;2 cycle nop
  2593                           
  2594                           ;LCD_SPI.c: 102: return (retValue & 1);
  2595  001490  5002               	movf	readBusyFlag@retValue,w,c
  2596  001492  0B01               	andlw	1
  2597  001494  0012               	return	
  2598  001496                     __end_of_readBusyFlag:
  2599                           	opt stack 0
  2600                           tblptru	equ	0xFF8
  2601                           tblptrh	equ	0xFF7
  2602                           tblptrl	equ	0xFF6
  2603                           tablat	equ	0xFF5
  2604                           prodh	equ	0xFF4
  2605                           prodl	equ	0xFF3
  2606                           indf0	equ	0xFEF
  2607                           fsr0h	equ	0xFEA
  2608                           fsr0l	equ	0xFE9
  2609                           wreg	equ	0xFE8
  2610                           indf2	equ	0xFDF
  2611                           postinc2	equ	0xFDE
  2612                           postdec2	equ	0xFDD
  2613                           fsr2h	equ	0xFDA
  2614                           fsr2l	equ	0xFD9
  2615                           status	equ	0xFD8
  2616                           
  2617 ;; *************** function _spi_Send_Read *****************
  2618 ;; Defined at:
  2619 ;;		line 11 in file "LCD_SPI.c"
  2620 ;; Parameters:    Size  Location     Type
  2621 ;;  byte            1    wreg     unsigned char 
  2622 ;; Auto vars:     Size  Location     Type
  2623 ;;  byte            1    0[COMRAM] unsigned char 
  2624 ;; Return value:  Size  Location     Type
  2625 ;;                  1    wreg      unsigned char 
  2626 ;; Registers used:
  2627 ;;		wreg, status,2
  2628 ;; Tracked objects:
  2629 ;;		On entry : 0/0
  2630 ;;		On exit  : 0/0
  2631 ;;		Unchanged: 0/0
  2632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2633 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2634 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2635 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2636 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2637 ;;Total ram usage:        1 bytes
  2638 ;; Hardware stack levels used:    1
  2639 ;; This function calls:
  2640 ;;		Nothing
  2641 ;; This function is called by:
  2642 ;;		_clearDisplay
  2643 ;;		_displayCtrl
  2644 ;;		_putchLCD
  2645 ;;		_moveCursor
  2646 ;;		_readBusyFlag
  2647 ;; This function uses a non-reentrant model
  2648 ;;
  2649                           
  2650                           	psect	text22
  2651  001496                     __ptext22:
  2652                           	opt stack 0
  2653  001496                     _spi_Send_Read:
  2654                           	opt stack 27
  2655                           
  2656                           ;incstack = 0
  2657                           ;spi_Send_Read@byte stored from wreg
  2658  001496  6E01               	movwf	spi_Send_Read@byte,c
  2659                           
  2660                           ;LCD_SPI.c: 13: SSP2BUF = byte;
  2661  001498  C001  FF03         	movff	spi_Send_Read@byte,3843	;volatile
  2662  00149C                     l61:
  2663  00149C  010F               	movlb	15	; () banked
  2664  00149E  A11A               	btfss	26,0,b	;volatile
  2665  0014A0  D7FD               	goto	l61
  2666                           
  2667                           ; BSR set to: 15
  2668                           ;LCD_SPI.c: 15: return SSP2BUF;
  2669  0014A2  010F               	movlb	15	; () banked
  2670  0014A4  5103               	movf	3,w,b	;volatile
  2671                           
  2672                           ; BSR set to: 15
  2673  0014A6  0012               	return		;funcret
  2674  0014A8                     __end_of_spi_Send_Read:
  2675                           	opt stack 0
  2676                           tblptru	equ	0xFF8
  2677                           tblptrh	equ	0xFF7
  2678                           tblptrl	equ	0xFF6
  2679                           tablat	equ	0xFF5
  2680                           prodh	equ	0xFF4
  2681                           prodl	equ	0xFF3
  2682                           indf0	equ	0xFEF
  2683                           fsr0h	equ	0xFEA
  2684                           fsr0l	equ	0xFE9
  2685                           wreg	equ	0xFE8
  2686                           indf2	equ	0xFDF
  2687                           postinc2	equ	0xFDE
  2688                           postdec2	equ	0xFDD
  2689                           fsr2h	equ	0xFDA
  2690                           fsr2l	equ	0xFD9
  2691                           status	equ	0xFD8
  2692                           tblptru	equ	0xFF8
  2693                           tblptrh	equ	0xFF7
  2694                           tblptrl	equ	0xFF6
  2695                           tablat	equ	0xFF5
  2696                           prodh	equ	0xFF4
  2697                           prodl	equ	0xFF3
  2698                           indf0	equ	0xFEF
  2699                           fsr0h	equ	0xFEA
  2700                           fsr0l	equ	0xFE9
  2701                           wreg	equ	0xFE8
  2702                           indf2	equ	0xFDF
  2703                           postinc2	equ	0xFDE
  2704                           postdec2	equ	0xFDD
  2705                           fsr2h	equ	0xFDA
  2706                           fsr2l	equ	0xFD9
  2707                           status	equ	0xFD8
  2708                           
  2709                           	psect	rparam
  2710  0000                     tblptru	equ	0xFF8
  2711                           tblptrh	equ	0xFF7
  2712                           tblptrl	equ	0xFF6
  2713                           tablat	equ	0xFF5
  2714                           prodh	equ	0xFF4
  2715                           prodl	equ	0xFF3
  2716                           indf0	equ	0xFEF
  2717                           fsr0h	equ	0xFEA
  2718                           fsr0l	equ	0xFE9
  2719                           wreg	equ	0xFE8
  2720                           indf2	equ	0xFDF
  2721                           postinc2	equ	0xFDE
  2722                           postdec2	equ	0xFDD
  2723                           fsr2h	equ	0xFDA
  2724                           fsr2l	equ	0xFD9
  2725                           status	equ	0xFD8


Data Sizes:
    Strings     84
    Constant    10
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     37      37
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          250      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_4(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 3
		 -> printStat@statArray(COMRAM[3]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    putStringLCD@input	PTR const unsigned char  size(2) Largest target is 22
		 -> STR_7(CODE[22]), STR_6(CODE[3]), STR_5(CODE[2]), printStat@statArray(COMRAM[3]), 
		 -> STR_3(CODE[20]), STR_2(CODE[16]), STR_1(CODE[20]), 


Critical Paths under _main in COMRAM

    _main->_printPoints
    _main->_printRemBullets
    _main->_printRemTime
    _printStartGame->_putStringLCD
    _printRemTime->_printStat
    _printRemBullets->_printStat
    _printPoints->_printStat
    _printStat->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _printMBED->_putStringLCD
    _printEndGame->_putStringLCD
    _putStringLCD->_putchLCD
    _putchLCD->_fliplr
    _moveCursor->_fliplr
    _initialisation_LCD->_displayCtrl
    _displayCtrl->_readBusyFlag
    _clearDisplay->_readBusyFlag
    _readBusyFlag->_spi_Send_Read

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                11    11      0   16180
                                             33 COMRAM     4     4      0
                 _initialisation_LCD
                       _printEndGame
                          _printMBED
                        _printPoints
                    _printRemBullets
                       _printRemTime
                     _printStartGame
                           _waitASec
 ---------------------------------------------------------------------------------
 (1) _printStartGame                                       0     0      0    1861
                       _clearDisplay
                         _moveCursor
                       _putStringLCD
                           _waitASec
 ---------------------------------------------------------------------------------
 (1) _printRemTime                                         2     0      2    3388
                                             31 COMRAM     2     0      2
                         _moveCursor
                          _printStat
 ---------------------------------------------------------------------------------
 (1) _printRemBullets                                      2     0      2    3388
                                             31 COMRAM     2     0      2
                         _moveCursor
                          _printStat
 ---------------------------------------------------------------------------------
 (1) _printPoints                                          2     0      2    3388
                                             31 COMRAM     2     0      2
                         _moveCursor
                          _printStat
 ---------------------------------------------------------------------------------
 (2) _printStat                                            5     3      2    2249
                                             26 COMRAM     5     3      2
                       _putStringLCD
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             23    17      6    1182
                                             12 COMRAM    14     8      6
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     287
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     290
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _printMBED                                            0     0      0    1861
                       _clearDisplay
                         _moveCursor
                       _putStringLCD
                           _waitASec
 ---------------------------------------------------------------------------------
 (1) _waitASec                                             3     3      0      30
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _printEndGame                                         0     0      0    1831
                       _clearDisplay
                         _moveCursor
                       _putStringLCD
 ---------------------------------------------------------------------------------
 (2) _putStringLCD                                         6     4      2     733
                                              4 COMRAM     6     4      2
                           _putchLCD
 ---------------------------------------------------------------------------------
 (3) _putchLCD                                             1     1      0     195
                                              3 COMRAM     1     1      0
                             _fliplr
                       _readBusyFlag
                      _spi_Send_Read
 ---------------------------------------------------------------------------------
 (2) _moveCursor                                           5     1      4    1053
                                              3 COMRAM     5     1      4
                             _fliplr
                       _readBusyFlag
                      _spi_Send_Read
 ---------------------------------------------------------------------------------
 (4) _fliplr                                               3     3      0     105
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _initialisation_LCD                                   0     0      0     314
                       _clearDisplay
                        _displayCtrl
                _initialisation_PORT
                 _initialisation_SPI
 ---------------------------------------------------------------------------------
 (2) _initialisation_SPI                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _initialisation_PORT                                  1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _displayCtrl                                          4     2      2     269
                                              2 COMRAM     4     2      2
                       _readBusyFlag
                      _spi_Send_Read
 ---------------------------------------------------------------------------------
 (2) _clearDisplay                                         0     0      0      45
                       _readBusyFlag
                      _spi_Send_Read
 ---------------------------------------------------------------------------------
 (4) _readBusyFlag                                         1     1      0      30
                                              1 COMRAM     1     1      0
                      _spi_Send_Read
 ---------------------------------------------------------------------------------
 (4) _spi_Send_Read                                        1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initialisation_LCD
     _clearDisplay
       _readBusyFlag
         _spi_Send_Read
       _spi_Send_Read
     _displayCtrl
       _readBusyFlag
         _spi_Send_Read
       _spi_Send_Read
     _initialisation_PORT
     _initialisation_SPI
   _printEndGame
     _clearDisplay
       _readBusyFlag
         _spi_Send_Read
       _spi_Send_Read
     _moveCursor
       _fliplr
       _readBusyFlag
         _spi_Send_Read
       _spi_Send_Read
     _putStringLCD
       _putchLCD
         _fliplr
         _readBusyFlag
           _spi_Send_Read
         _spi_Send_Read
   _printMBED
     _clearDisplay
       _readBusyFlag
         _spi_Send_Read
       _spi_Send_Read
     _moveCursor
       _fliplr
       _readBusyFlag
         _spi_Send_Read
       _spi_Send_Read
     _putStringLCD
       _putchLCD
         _fliplr
         _readBusyFlag
           _spi_Send_Read
         _spi_Send_Read
     _waitASec
   _printPoints
     _moveCursor
       _fliplr
       _readBusyFlag
         _spi_Send_Read
       _spi_Send_Read
     _printStat
       _putStringLCD
         _putchLCD
           _fliplr
           _readBusyFlag
             _spi_Send_Read
           _spi_Send_Read
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
   _printRemBullets
     _moveCursor
       _fliplr
       _readBusyFlag
         _spi_Send_Read
       _spi_Send_Read
     _printStat
       _putStringLCD
         _putchLCD
           _fliplr
           _readBusyFlag
             _spi_Send_Read
           _spi_Send_Read
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
   _printRemTime
     _moveCursor
       _fliplr
       _readBusyFlag
         _spi_Send_Read
       _spi_Send_Read
     _printStat
       _putStringLCD
         _putchLCD
           _fliplr
           _readBusyFlag
             _spi_Send_Read
           _spi_Send_Read
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
   _printStartGame
     _clearDisplay
       _readBusyFlag
         _spi_Send_Read
       _spi_Send_Read
     _moveCursor
       _fliplr
       _readBusyFlag
         _spi_Send_Read
       _spi_Send_Read
     _putStringLCD
       _putchLCD
         _fliplr
         _readBusyFlag
           _spi_Send_Read
         _spi_Send_Read
     _waitASec
   _waitASec

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F     25      25       1       38.9%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
ABS                  0      0       0       8        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK13           FA      0       0      31        0.0%
BANK13              FA      0       0      32        0.0%
BIGRAM             DF9      0       0      33        0.0%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%


Microchip Technology PIC18 Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Sat Dec 02 20:20:16 2017

                ?_displayCtrl 0003                            l19 10EA                            l61 149C  
                _putStringLCD 0FBC                   __CFG_BORV$1 000000                           l148 108C  
                         l158 13B0                           l822 1330                           l940 138C  
                         l589 1140                           l950 143E                           l599 1264  
                         l944 139C                           u400 102A                           u510 11B6  
                         u407 1020                           u540 1066                           u390 0FF4  
                         u607 1296                           u617 12A4                           u397 0FEA  
                         u587 13A2                           u597 1288                           wreg 000FE8  
                        l1200 0EDA                          l1202 0EDE                          l1140 111A  
                        l1220 0F2C                          l1222 0F32                          l1214 0F10  
                        l1230 0F92                          l1136 110E                          l1160 1246  
                        l1232 0FAE                          l1170 0FC6                          l1138 1116  
                        l1244 120A                          l1148 1136                          l1164 125A  
                        l1156 123A                          l1228 0F8A                          l1174 0FFC  
                        l1158 1242                          l1190 0EB2                          l1334 10B8  
                        l1256 11BA                          l1184 0E84                          l1258 11C2  
                        l1178 0E6A                          l1274 1074                          STR_1 0E35  
                        STR_2 0E49                          STR_3 0E21                          STR_4 0E5C  
                        STR_5 0E5A                          STR_6 0E59                          STR_7 0E0B  
                 main@bullets 0024                          _main 109A                          fsr0h 000FEA  
                        indf0 000FEF                          fsr0l 000FE9                          fsr2h 000FDA  
                        indf2 000FDF                          fsr2l 000FD9                          prodh 000FF4  
                        prodl 000FF3                          start 0000                 __CFG_IESO$OFF 000000  
               __CFG_FOSC$FRC 000000                  ___param_bank 000010          __end_of_clearDisplay 1460  
                 fliplr@input 0003             putStringLCD@input 0005                         ?_main 0001  
             __end_of___lwdiv 114A               __end_of___lwmod 126E                 printStat@stat 001B  
 __size_of_initialisation_LCD 001C               __end_of_dpowers 0E0B   __size_of_initialisation_SPI 003E  
                       tablat 000FF5                         status 000FD8               __end_of_sprintf 0FBC  
             __initialization 14A8                  __end_of_main 10F8                        ??_main 0022  
               __activetblptr 000003                 ?_readBusyFlag 0001      __size_of_printRemBullets 0022  
           spi_Send_Read@byte 0001                        _OSCCON 000FD3                __CFG_XINST$OFF 000000  
               putchLCD@input 0004              ??_printStartGame 000B                __CFG_STVREN$ON 000000  
                   ??___lwdiv 0005                     ??___lwmod 000C  __size_of_initialisation_PORT 0040  
                      _fliplr 114A          __size_of_displayCtrl 0044                ??_readBusyFlag 0002  
            __end_of_waitASec 13B2                  __mediumconst 0000                        tblptrh 000FF7  
                      tblptrl 000FF6                        tblptru 000FF8              __end_of_putchLCD 1356  
                   ??_sprintf 0013                  ?_printPoints 0020         printRemTime@nbSeconds 0020  
                  __accesstop 0060       __end_of__initialization 14A8         __size_of_clearDisplay 0022  
               ___rparam_used 000001                __pcstackCOMRAM 0001             moveCursor@address 0008  
                _clearDisplay 143E                 putStringLCD@i 0009             ??_printRemBullets 0022  
       __end_of_spi_Send_Read 14A8                       ?_fliplr 0001             displayCtrl@cursor 0003  
          __size_of_printMBED 002E            __size_of_printStat 0068                       _SSP2BUF 000F03  
        __end_of_readBusyFlag 1496                       __Hparam 0000                     ?_waitASec 0001  
                     __Lparam 0000           printPoints@nbPoints 0020                     ?_putchLCD 0001  
                     ___lwdiv 10F8                       ___lwmod 122C                  __psmallconst 0E00  
             __size_of_fliplr 0052                displayCtrl@BCD 0006                       __pcinit 14A8  
                     __ramtop 0E00                       __ptext0 109A                       __ptext1 12EC  
                     __ptext2 13D8                       __ptext3 13FA                       __ptext4 141C  
                     __ptext5 1032                       __ptext6 0E60                       __ptext7 122C  
                     __ptext8 10F8                       __ptext9 1356                       _dpowers 0E01  
  __end_of_initialisation_LCD 147C    __end_of_initialisation_SPI 12EC                       _sprintf 0E60  
        end_of_initialization 14A8           _initialisation_PORT 126E          __size_of_printPoints 0022  
                  _moveCursor 119C             __end_of_printMBED 1384                    ??_waitASec 0001  
           __end_of_printStat 109A                 ?_printEndGame 0001                       postdec2 000FDD  
                     postinc2 000FDE                    ??_putchLCD 0004          ?_initialisation_PORT 0001  
                   _RPOR22_23 000E1D                     _RPOR24_25 000E1E                 ?_printRemTime 0020  
        readBusyFlag@retValue 0002      printRemBullets@nbBullets 0020                     _TRISCbits 000F94  
                   _TRISDbits 000F95                 moveCursor@col 0006                 moveCursor@row 0004  
                  main@points 0023                ??_printEndGame 000B                    main@status 0022  
               ??_displayCtrl 0005         ??_initialisation_PORT 0001                ??_printRemTime 0022  
               ?_putStringLCD 0005                __end_of_fliplr 119C           start_initialization 14A8  
             _printRemBullets 13FA         __size_of_readBusyFlag 001A                   ?_moveCursor 0004  
              ??_putStringLCD 0007                      ??_fliplr 0001           __end_of_displayCtrl 122C  
                _readBusyFlag 147C       __size_of_printStartGame 003A                   sprintf@flag 0016  
                 sprintf@prec 0017              ___lwdiv@dividend 0001             __size_of_waitASec 002E  
            displayCtrl@blink 0004                      ?___lwdiv 0001                      ?___lwmod 0008  
           __size_of_putchLCD 0030       __end_of_printRemBullets 141C           __size_of_moveCursor 004C  
                 __smallconst 0E00            displayCtrl@display 0005          __end_of_printEndGame 13D8  
            ___lwdiv@quotient 0005                      ?_sprintf 000D        __size_of_spi_Send_Read 0012  
        __end_of_printRemTime 13FA                      _LATDbits 000F8C            _initialisation_LCD 1460  
          _initialisation_SPI 12AE              __CFG_WDTPS$32768 000000           ?_initialisation_LCD 0001  
         ?_initialisation_SPI 0001                     _printMBED 1356                      _SSP2CON1 000F19  
                    _SSP2CON3 000F39                   _displayCtrl 11E8                      _SSP2STAT 000F1A  
                   _printStat 1032          ??_initialisation_LCD 0007          ??_initialisation_SPI 0001  
               ??_printPoints 0022          __end_of_putStringLCD 1032                      __Hrparam 0000  
                    __Lrparam 0000                    ?_printMBED 0001                 _spi_Send_Read 1496  
                  ?_printStat 001B              __size_of___lwdiv 0052              __size_of___lwmod 0042  
            ?_printRemBullets 0020                    sprintf@val 0018                _printStartGame 12EC  
             ___lwdiv@divisor 0003               ___lwdiv@counter 0007                 ?_clearDisplay 0001  
                    __ptext10 1384                      __ptext11 13B2                      __ptext20 143E  
                    __ptext12 0FBC                      __ptext21 147C                      __ptext13 1326  
                    __ptext22 1496                      __ptext14 119C                      __ptext15 114A  
                    __ptext16 1460                      __ptext17 12AE                      __ptext18 126E  
                    __ptext19 11E8                     waitASec@i 0002              __size_of_sprintf 015C  
                ??_moveCursor 0008                 __size_of_main 005E   __end_of_initialisation_PORT 12AE  
         __end_of_printPoints 143E                      _waitASec 1384                ?_spi_Send_Read 0001  
                    _putchLCD 1326                      main@time 0025                  _SSP2STATbits 000F1A  
       __size_of_printEndGame 0026        __end_of_printStartGame 1326            __end_of_moveCursor 11E8  
       __size_of_printRemTime 0022                ??_clearDisplay 0003                     sprintf@ap 0014  
                   sprintf@sp 000D              ___lwmod@dividend 0008                  _printEndGame 13B2  
          printStat@statArray 001D                   ??_printMBED 000B                   ??_printStat 001D  
                _printRemTime 13D8                    _RPINR12_13 000E30               ?_printStartGame 0001  
                    sprintf@c 001A                      sprintf@f 000F               ___lwmod@divisor 000A  
       __size_of_putStringLCD 0076               ___lwmod@counter 000C                   _printPoints 141C  
             ??_spi_Send_Read 0001  
