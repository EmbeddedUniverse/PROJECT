

Microchip Technology PIC18 LITE Macro Assembler V1.43 build -156212558 
                                                                                               Sun Dec 03 15:04:15 2017

Microchip Technology Omniscient Code Generator v1.43 (Free mode) build 201707250354
     1                           	processor	18F67J94
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1
    40                           	psect	text28,global,reloc=2,class=CODE,delta=1
    41                           	psect	text29,global,reloc=2,class=CODE,delta=1
    42                           	psect	text30,global,reloc=2,class=CODE,delta=1
    43                           	psect	text31,global,reloc=2,class=CODE,delta=1
    44                           	psect	text32,global,reloc=2,class=CODE,delta=1
    45                           	psect	text33,global,reloc=2,class=CODE,delta=1
    46                           	psect	text34,global,reloc=2,class=CODE,delta=1
    47                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    48                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    49                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    50                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    51  0000                     
    52                           ; Version 1.43
    53                           ; Generated 25/07/2017 GMT
    54                           ; 
    55                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    56                           ; All rights reserved.
    57                           ; 
    58                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    59                           ; 
    60                           ; Redistribution and use in source and binary forms, with or without modification, are
    61                           ; permitted provided that the following conditions are met:
    62                           ; 
    63                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    64                           ;        conditions and the following disclaimer.
    65                           ; 
    66                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    67                           ;        of conditions and the following disclaimer in the documentation and/or other
    68                           ;        materials provided with the distribution.
    69                           ; 
    70                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    71                           ;        software without specific prior written permission.
    72                           ; 
    73                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    74                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    75                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    76                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    77                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    78                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    79                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    80                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    81                           ; 
    82                           ; 
    83                           ; Code-generator required, PIC18F67J94 Definitions
    84                           ; 
    85                           ; SFR Addresses
    86  0000                     
    87                           	psect	idataCOMRAM
    88  001854                     __pidataCOMRAM:
    89                           	opt stack 0
    90                           
    91                           ;initializer for _singleGameTime
    92  001854  0005               	dw	5
    93                           
    94                           ;initializer for _ammoLeft
    95  001856  000C               	dw	12
    96                           
    97                           	psect	smallconst
    98  000E00                     __psmallconst:
    99                           	opt stack 0
   100  000E00  00                 	db	0
   101  000E01                     _dpowers:
   102                           	opt stack 0
   103  000E01  0001               	dw	1
   104  000E03  000A               	dw	10
   105  000E05  0064               	dw	100
   106  000E07  03E8               	dw	1000
   107  000E09  2710               	dw	10000
   108  000E0B                     __end_of_dpowers:
   109                           	opt stack 0
   110  0000                     _RPINR12_13	set	3632
   111  0000                     _RPOR22_23	set	3613
   112  0000                     _RPOR24_25	set	3614
   113  0000                     _ANCON1	set	3655
   114  0000                     _RPINR26_27	set	3639
   115  0000                     _RPOR26_27	set	3615
   116  0000                     _RPINR0_1	set	3626
   117  0000                     _SSP2CON3	set	3897
   118  0000                     _SSP2STAT	set	3866
   119  0000                     _SSP2CON1	set	3865
   120  0000                     _SSP2STATbits	set	3866
   121  0000                     _SSP2BUF	set	3843
   122  0000                     _TRISCbits	set	3988
   123  0000                     _TRISDbits	set	3989
   124  0000                     _OSCCON	set	4051
   125  0000                     _LATDbits	set	3980
   126  0000                     _LATBbits	set	3978
   127  0000                     _LATC	set	3979
   128  0000                     _LATA	set	3977
   129  0000                     _TRISBbits	set	3987
   130  0000                     _TRISD	set	3989
   131  0000                     _TRISC	set	3988
   132  0000                     _TRISA	set	3986
   133  0000                     _RCONbits	set	4048
   134  0000                     _INTCON2bits	set	4081
   135  0000                     _TRISAbits	set	3986
   136  0000                     _IPR1bits	set	3999
   137  0000                     _TXREG1	set	4013
   138  0000                     _SPBRG1	set	4015
   139  0000                     _RCSTA1	set	4011
   140  0000                     _TXSTA1	set	4012
   141  0000                     _BAUDCON1	set	3943
   142  0000                     _RCREG1	set	4014
   143  0000                     _RCSTAbits	set	4011
   144  0000                     _PIR1bits	set	3998
   145  0000                     _INTCON3bits	set	4080
   146  0000                     _PIE1bits	set	3997
   147  0000                     _INTCONbits	set	4082
   148  0000                     _T0CONbits	set	4053
   149  000E0B                     STR_8:
   150  000E0B  45                 	db	69	;'E'
   151  000E0C  20                 	db	32
   152  000E0D  20                 	db	32
   153  000E0E  4E                 	db	78	;'N'
   154  000E0F  20                 	db	32
   155  000E10  20                 	db	32
   156  000E11  44                 	db	68	;'D'
   157  000E12  20                 	db	32
   158  000E13  20                 	db	32
   159  000E14  20                 	db	32
   160  000E15  47                 	db	71	;'G'
   161  000E16  20                 	db	32
   162  000E17  20                 	db	32
   163  000E18  41                 	db	65	;'A'
   164  000E19  20                 	db	32
   165  000E1A  20                 	db	32
   166  000E1B  4D                 	db	77	;'M'
   167  000E1C  20                 	db	32
   168  000E1D  20                 	db	32
   169  000E1E  45                 	db	69	;'E'
   170  000E1F  20                 	db	32
   171  000E20  00                 	db	0
   172  000E21                     STR_3:
   173  000E21  50                 	db	80	;'P'
   174  000E22  4F                 	db	79	;'O'
   175  000E23  49                 	db	73	;'I'
   176  000E24  4E                 	db	78	;'N'
   177  000E25  54                 	db	84	;'T'
   178  000E26  53                 	db	83	;'S'
   179  000E27  20                 	db	32
   180  000E28  42                 	db	66	;'B'
   181  000E29  55                 	db	85	;'U'
   182  000E2A  4C                 	db	76	;'L'
   183  000E2B  4C                 	db	76	;'L'
   184  000E2C  45                 	db	69	;'E'
   185  000E2D  54                 	db	84	;'T'
   186  000E2E  53                 	db	83	;'S'
   187  000E2F  20                 	db	32
   188  000E30  54                 	db	84	;'T'
   189  000E31  49                 	db	73	;'I'
   190  000E32  4D                 	db	77	;'M'
   191  000E33  45                 	db	69	;'E'
   192  000E34  00                 	db	0
   193  000E35                     STR_1:
   194  000E35  20                 	db	32
   195  000E36  20                 	db	32
   196  000E37  45                 	db	69	;'E'
   197  000E38  4D                 	db	77	;'M'
   198  000E39  42                 	db	66	;'B'
   199  000E3A  45                 	db	69	;'E'
   200  000E3B  44                 	db	68	;'D'
   201  000E3C  44                 	db	68	;'D'
   202  000E3D  45                 	db	69	;'E'
   203  000E3E  44                 	db	68	;'D'
   204  000E3F  20                 	db	32
   205  000E40  55                 	db	85	;'U'
   206  000E41  4E                 	db	78	;'N'
   207  000E42  49                 	db	73	;'I'
   208  000E43  56                 	db	86	;'V'
   209  000E44  45                 	db	69	;'E'
   210  000E45  52                 	db	82	;'R'
   211  000E46  53                 	db	83	;'S'
   212  000E47  45                 	db	69	;'E'
   213  000E48  00                 	db	0
   214  000E49                     STR_2:
   215  000E49  53                 	db	83	;'S'
   216  000E4A  20                 	db	32
   217  000E4B  20                 	db	32
   218  000E4C  54                 	db	84	;'T'
   219  000E4D  20                 	db	32
   220  000E4E  20                 	db	32
   221  000E4F  41                 	db	65	;'A'
   222  000E50  20                 	db	32
   223  000E51  20                 	db	32
   224  000E52  52                 	db	82	;'R'
   225  000E53  20                 	db	32
   226  000E54  20                 	db	32
   227  000E55  54                 	db	84	;'T'
   228  000E56  20                 	db	32
   229  000E57  21                 	db	33
   230  000E58  00                 	db	0
   231  000E59                     STR_9:
   232  000E59  50                 	db	80	;'P'
   233  000E5A  4F                 	db	79	;'O'
   234  000E5B  49                 	db	73	;'I'
   235  000E5C  4E                 	db	78	;'N'
   236  000E5D  54                 	db	84	;'T'
   237  000E5E  53                 	db	83	;'S'
   238  000E5F  20                 	db	32
   239  000E60  00                 	db	0
   240  000E61                     STR_6:
   241  000E61  20                 	db	32
   242  000E62  20                 	db	32
   243  000E63  00                 	db	0
   244  000E64                     STR_4:
   245  000E64  25                 	db	37
   246  000E65  64                 	db	100	;'d'
   247  000E66  00                 	db	0
   248  0000                     
   249                           ; #config settings
   250  000E67  00                 	db	0	; dummy byte at the end
   251  0000                     
   252                           	psect	cinit
   253  0015E2                     __pcinit:
   254                           	opt stack 0
   255  0015E2                     start_initialization:
   256                           	opt stack 0
   257  0015E2                     __initialization:
   258                           	opt stack 0
   259                           
   260                           ; Initialize objects allocated to COMRAM (4 bytes)
   261                           ; load TBLPTR registers with __pidataCOMRAM
   262  0015E2  0E54               	movlw	low __pidataCOMRAM
   263  0015E4  6EF6               	movwf	tblptrl,c
   264  0015E6  0E18               	movlw	high __pidataCOMRAM
   265  0015E8  6EF7               	movwf	tblptrh,c
   266  0015EA  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   267  0015EC  6EF8               	movwf	tblptru,c
   268  0015EE  EE00  F048         	lfsr	0,__pdataCOMRAM
   269  0015F2  EE10 F004          	lfsr	1,4
   270  0015F6                     copy_data0:
   271  0015F6  0009               	tblrd		*+
   272  0015F8  CFF5 FFEE          	movff	tablat,postinc0
   273  0015FC  50E5               	movf	postdec1,w,c
   274  0015FE  50E1               	movf	fsr1l,w,c
   275  001600  E1FA               	bnz	copy_data0
   276                           
   277                           ; Clear objects allocated to COMRAM (22 bytes)
   278  001602  EE00  F032         	lfsr	0,__pbssCOMRAM
   279  001606  0E16               	movlw	22
   280  001608                     clear_0:
   281  001608  6AEE               	clrf	postinc0,c
   282  00160A  06E8               	decf	wreg,f,c
   283  00160C  E1FD               	bnz	clear_0
   284  00160E                     end_of_initialization:
   285                           	opt stack 0
   286  00160E                     __end_of__initialization:
   287                           	opt stack 0
   288  00160E  904C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   289  001610  924C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   290  001612  0100               	movlb	0
   291  001614  EF34  F007         	goto	_main	;jump to C main() function
   292                           tblptru	equ	0xFF8
   293                           tblptrh	equ	0xFF7
   294                           tblptrl	equ	0xFF6
   295                           tablat	equ	0xFF5
   296                           postinc0	equ	0xFEE
   297                           wreg	equ	0xFE8
   298                           postdec1	equ	0xFE5
   299                           fsr1l	equ	0xFE1
   300                           
   301                           	psect	bssCOMRAM
   302  000032                     __pbssCOMRAM:
   303                           	opt stack 0
   304  000032                     _totalPoints:
   305                           	opt stack 0
   306  000032                     	ds	2
   307  000034                     _globalTimer:
   308                           	opt stack 0
   309  000034                     	ds	2
   310  000036                     _toggleCounter:
   311                           	opt stack 0
   312  000036                     	ds	2
   313  000038                     _endFlag:
   314                           	opt stack 0
   315  000038                     	ds	1
   316  000039                     _timerFlag:
   317                           	opt stack 0
   318  000039                     	ds	1
   319  00003A                     _capteurFlag:
   320                           	opt stack 0
   321  00003A                     	ds	1
   322  00003B                     _pewFlag:
   323                           	opt stack 0
   324  00003B                     	ds	1
   325  00003C                     _modeFlag:
   326                           	opt stack 0
   327  00003C                     	ds	1
   328  00003D                     _reloadFlag:
   329                           	opt stack 0
   330  00003D                     	ds	1
   331  00003E                     _rxFlag:
   332                           	opt stack 0
   333  00003E                     	ds	1
   334  00003F                     _ErrorUART:
   335                           	opt stack 0
   336  00003F                     	ds	1
   337  000040                     _transferedData:
   338                           	opt stack 0
   339  000040                     	ds	1
   340  000041                     _rxChar:
   341                           	opt stack 0
   342  000041                     	ds	1
   343  000042                     _myModeState:
   344                           	opt stack 0
   345  000042                     	ds	1
   346  000043                     _myState:
   347                           	opt stack 0
   348  000043                     	ds	1
   349  000044                     _nextTarget:
   350                           	opt stack 0
   351  000044                     	ds	4
   352                           tblptru	equ	0xFF8
   353                           tblptrh	equ	0xFF7
   354                           tblptrl	equ	0xFF6
   355                           tablat	equ	0xFF5
   356                           postinc0	equ	0xFEE
   357                           wreg	equ	0xFE8
   358                           postdec1	equ	0xFE5
   359                           fsr1l	equ	0xFE1
   360                           
   361                           	psect	dataCOMRAM
   362  000048                     __pdataCOMRAM:
   363                           	opt stack 0
   364  000048                     _singleGameTime:
   365                           	opt stack 0
   366  000048                     	ds	2
   367  00004A                     _ammoLeft:
   368                           	opt stack 0
   369  00004A                     	ds	2
   370                           tblptru	equ	0xFF8
   371                           tblptrh	equ	0xFF7
   372                           tblptrl	equ	0xFF6
   373                           tablat	equ	0xFF5
   374                           postinc0	equ	0xFEE
   375                           wreg	equ	0xFE8
   376                           postdec1	equ	0xFE5
   377                           fsr1l	equ	0xFE1
   378                           
   379                           	psect	cstackBANK0
   380  000060                     __pcstackBANK0:
   381                           	opt stack 0
   382  000060                     printRemBullets@nbBullets:
   383                           	opt stack 0
   384  000060                     printRemTime@nbSeconds:
   385                           	opt stack 0
   386  000060                     printPoints@nbPoints:
   387                           	opt stack 0
   388                           
   389                           ; 2 bytes @ 0x0
   390  000060                     	ds	2
   391  000062                     ??_main:
   392                           
   393                           ; 1 bytes @ 0x2
   394  000062                     	ds	2
   395  000064                     main@i:
   396                           	opt stack 0
   397                           
   398                           ; 2 bytes @ 0x4
   399  000064                     	ds	2
   400                           tblptru	equ	0xFF8
   401                           tblptrh	equ	0xFF7
   402                           tblptrl	equ	0xFF6
   403                           tablat	equ	0xFF5
   404                           postinc0	equ	0xFEE
   405                           wreg	equ	0xFE8
   406                           postdec1	equ	0xFE5
   407                           fsr1l	equ	0xFE1
   408                           
   409                           	psect	cstackCOMRAM
   410  000001                     __pcstackCOMRAM:
   411                           	opt stack 0
   412  000001                     ??_rxIsr:
   413  000001                     
   414                           ; 1 bytes @ 0x0
   415  000001                     	ds	18
   416  000013                     ??_waitASec:
   417  000013                     ??_fliplr:
   418  000013                     ??_initialisation_PORT:
   419  000013                     ?___lwdiv:
   420                           	opt stack 0
   421  000013                     setModeLED@Mode:
   422                           	opt stack 0
   423  000013                     spi_Send_Read@byte:
   424                           	opt stack 0
   425  000013                     getRandomTarget@Target:
   426                           	opt stack 0
   427  000013                     activateTarget@targetNbr:
   428                           	opt stack 0
   429  000013                     activateLEDTarget@targetLED:
   430                           	opt stack 0
   431  000013                     ___lwdiv@dividend:
   432                           	opt stack 0
   433                           
   434                           ; 2 bytes @ 0x12
   435  000013                     	ds	1
   436  000014                     readBusyFlag@retValue:
   437                           	opt stack 0
   438  000014                     waitASec@i:
   439                           	opt stack 0
   440                           
   441                           ; 2 bytes @ 0x13
   442  000014                     	ds	1
   443  000015                     ??_activateLEDTarget:
   444  000015                     displayCtrl@cursor:
   445                           	opt stack 0
   446  000015                     fliplr@input:
   447                           	opt stack 0
   448  000015                     ___lwdiv@divisor:
   449                           	opt stack 0
   450                           
   451                           ; 2 bytes @ 0x14
   452  000015                     	ds	1
   453  000016                     displayCtrl@blink:
   454                           	opt stack 0
   455  000016                     putchLCD@input:
   456                           	opt stack 0
   457  000016                     moveCursor@row:
   458                           	opt stack 0
   459                           
   460                           ; 2 bytes @ 0x15
   461  000016                     	ds	1
   462  000017                     displayCtrl@display:
   463                           	opt stack 0
   464  000017                     ___lwdiv@counter:
   465                           	opt stack 0
   466  000017                     putStringLCD@input:
   467                           	opt stack 0
   468                           
   469                           ; 2 bytes @ 0x16
   470  000017                     	ds	1
   471  000018                     displayCtrl@BCD:
   472                           	opt stack 0
   473  000018                     moveCursor@col:
   474                           	opt stack 0
   475  000018                     ___lwdiv@quotient:
   476                           	opt stack 0
   477                           
   478                           ; 2 bytes @ 0x17
   479  000018                     	ds	1
   480  000019                     ??_putStringLCD:
   481                           
   482                           ; 1 bytes @ 0x18
   483  000019                     	ds	1
   484  00001A                     ?___lwmod:
   485                           	opt stack 0
   486  00001A                     moveCursor@address:
   487                           	opt stack 0
   488  00001A                     ___lwmod@dividend:
   489                           	opt stack 0
   490                           
   491                           ; 2 bytes @ 0x19
   492  00001A                     	ds	1
   493  00001B                     activateLEDTarget@ledNBR:
   494                           	opt stack 0
   495  00001B                     putStringLCD@i:
   496                           	opt stack 0
   497                           
   498                           ; 2 bytes @ 0x1A
   499  00001B                     	ds	1
   500  00001C                     ___lwmod@divisor:
   501                           	opt stack 0
   502                           
   503                           ; 2 bytes @ 0x1B
   504  00001C                     	ds	1
   505  00001D                     
   506                           ; 1 bytes @ 0x1C
   507  00001D                     	ds	1
   508  00001E                     ___lwmod@counter:
   509                           	opt stack 0
   510                           
   511                           ; 1 bytes @ 0x1D
   512  00001E                     	ds	1
   513  00001F                     ?_sprintf:
   514                           	opt stack 0
   515  00001F                     sprintf@sp:
   516                           	opt stack 0
   517                           
   518                           ; 2 bytes @ 0x1E
   519  00001F                     	ds	2
   520  000021                     sprintf@f:
   521                           	opt stack 0
   522                           
   523                           ; 2 bytes @ 0x20
   524  000021                     	ds	4
   525  000025                     ??_sprintf:
   526                           
   527                           ; 1 bytes @ 0x24
   528  000025                     	ds	1
   529  000026                     sprintf@ap:
   530                           	opt stack 0
   531                           
   532                           ; 2 bytes @ 0x25
   533  000026                     	ds	2
   534  000028                     sprintf@flag:
   535                           	opt stack 0
   536                           
   537                           ; 1 bytes @ 0x27
   538  000028                     	ds	1
   539  000029                     sprintf@prec:
   540                           	opt stack 0
   541                           
   542                           ; 1 bytes @ 0x28
   543  000029                     	ds	1
   544  00002A                     sprintf@val:
   545                           	opt stack 0
   546                           
   547                           ; 2 bytes @ 0x29
   548  00002A                     	ds	2
   549  00002C                     sprintf@c:
   550                           	opt stack 0
   551                           
   552                           ; 1 bytes @ 0x2B
   553  00002C                     	ds	1
   554  00002D                     printStat@stat:
   555                           	opt stack 0
   556  00002D                     printEndGame@nbPoints:
   557                           	opt stack 0
   558                           
   559                           ; 2 bytes @ 0x2C
   560  00002D                     	ds	2
   561  00002F                     printStat@statArray:
   562                           	opt stack 0
   563  00002F                     printEndGame@statArray:
   564                           	opt stack 0
   565                           
   566                           ; 3 bytes @ 0x2E
   567  00002F                     	ds	3
   568  000032                     tblptru	equ	0xFF8
   569                           tblptrh	equ	0xFF7
   570                           tblptrl	equ	0xFF6
   571                           tablat	equ	0xFF5
   572                           postinc0	equ	0xFEE
   573                           wreg	equ	0xFE8
   574                           postdec1	equ	0xFE5
   575                           fsr1l	equ	0xFE1
   576                           
   577                           ; 1 bytes @ 0x31
   578 ;;
   579 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   580 ;;
   581 ;; *************** function _main *****************
   582 ;; Defined at:
   583 ;;		line 80 in file "main.c"
   584 ;; Parameters:    Size  Location     Type
   585 ;;		None
   586 ;; Auto vars:     Size  Location     Type
   587 ;;  i               2    4[BANK0 ] int 
   588 ;; Return value:  Size  Location     Type
   589 ;;                  1    wreg      void 
   590 ;; Registers used:
   591 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   592 ;; Tracked objects:
   593 ;;		On entry : 0/0
   594 ;;		On exit  : 0/0
   595 ;;		Unchanged: 0/0
   596 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   597 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   598 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   599 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   600 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   601 ;;Total ram usage:        4 bytes
   602 ;; Hardware stack levels required when called:    7
   603 ;; This function calls:
   604 ;;		_activateLEDTarget
   605 ;;		_activateTarget
   606 ;;		_changeMode
   607 ;;		_fireShot
   608 ;;		_getRandomTarget
   609 ;;		_initialisation_LCD
   610 ;;		_printEndGame
   611 ;;		_printMBED
   612 ;;		_printPoints
   613 ;;		_printRemBullets
   614 ;;		_printRemTime
   615 ;;		_printStartGame
   616 ;;		_setInterruptConfig
   617 ;;		_setModeLED
   618 ;;		_setPinConfig
   619 ;;		_setTimerConfig
   620 ;;		_setUARTconfig
   621 ;;		_stopShot
   622 ;;		_toggleGunLED
   623 ;; This function is called by:
   624 ;;		Startup code after reset
   625 ;; This function uses a non-reentrant model
   626 ;;
   627                           
   628                           	psect	text0
   629  000E68                     __ptext0:
   630                           	opt stack 0
   631  000E68                     _main:
   632                           	opt stack 24
   633                           
   634                           ;main.c: 81: setUARTconfig();
   635                           
   636                           ;incstack = 0
   637  000E68  EC65  F00B         	call	_setUARTconfig	;wreg free
   638                           
   639                           ;main.c: 82: setPinConfig();
   640  000E6C  ECE8  F00B         	call	_setPinConfig	;wreg free
   641                           
   642                           ;main.c: 83: setTimerConfig();
   643  000E70  EC02  F00C         	call	_setTimerConfig	;wreg free
   644                           
   645                           ;main.c: 84: setInterruptConfig();
   646  000E74  ECCA  F00B         	call	_setInterruptConfig	;wreg free
   647                           
   648                           ;main.c: 86: initialisation_LCD();
   649  000E78  ECDA  F00B         	call	_initialisation_LCD	;wreg free
   650                           
   651                           ;main.c: 87: printMBED();
   652  000E7C  EC24  F00B         	call	_printMBED	;wreg free
   653                           
   654                           ;main.c: 90: printStartGame();
   655  000E80  ECD4  F00A         	call	_printStartGame	;wreg free
   656                           
   657                           ;main.c: 91: T0CONbits.TMR0ON = 1;
   658  000E84  8ED5               	bsf	4053,7,c	;volatile
   659                           
   660                           ;main.c: 118: while(!endFlag){
   661  000E86  D0D6               	goto	l141
   662  000E88                     
   663                           ;main.c: 120: if(timerFlag){
   664  000E88  5039               	movf	_timerFlag,w,c
   665  000E8A  B4D8               	btfsc	status,2,c
   666  000E8C  D005               	goto	l137
   667                           
   668                           ;main.c: 121: globalTimer++;
   669  000E8E  4A34               	infsnz	_globalTimer,f,c
   670  000E90  2A35               	incf	_globalTimer+1,f,c
   671                           
   672                           ;main.c: 122: timerFlag=0;
   673  000E92  0E00               	movlw	0
   674  000E94  6E39               	movwf	_timerFlag,c
   675                           
   676                           ;main.c: 123: INTCONbits.TMR0IE = 1;
   677  000E96  8AF2               	bsf	intcon,5,c	;volatile
   678  000E98                     l137:
   679                           
   680                           ;main.c: 124: }
   681                           ;main.c: 126: if(globalTimer==singleGameTime ){
   682  000E98  5048               	movf	_singleGameTime,w,c
   683  000E9A  1834               	xorwf	_globalTimer,w,c
   684  000E9C  E106               	bnz	l2304
   685  000E9E  5049               	movf	_singleGameTime+1,w,c
   686  000EA0  1835               	xorwf	_globalTimer+1,w,c
   687  000EA2  A4D8               	btfss	status,2,c
   688  000EA4  D002               	goto	l138
   689                           
   690                           ;main.c: 127: myState= END_GAME;
   691  000EA6  0E05               	movlw	5
   692  000EA8  6E43               	movwf	_myState,c
   693  000EAA                     l138:
   694  000EAA                     l2304:
   695                           
   696                           ;main.c: 128: }
   697                           ;main.c: 131: printPoints(totalPoints);
   698  000EAA  C032  F060         	movff	_totalPoints,printPoints@nbPoints
   699  000EAE  C033  F061         	movff	_totalPoints+1,printPoints@nbPoints+1
   700  000EB2  EC98  F00B         	call	_printPoints	;wreg free
   701                           
   702                           ;main.c: 132: printRemBullets(ammoLeft);
   703  000EB6  C04A  F060         	movff	_ammoLeft,printRemBullets@nbBullets
   704  000EBA  C04B  F061         	movff	_ammoLeft+1,printRemBullets@nbBullets+1
   705  000EBE  EC87  F00B         	call	_printRemBullets	;wreg free
   706                           
   707                           ;main.c: 133: printRemTime(singleGameTime-globalTimer);
   708  000EC2  C034  F062         	movff	_globalTimer,??_main
   709  000EC6  C035  F063         	movff	_globalTimer+1,??_main+1
   710  000ECA  0100               	movlb	0	; () banked
   711  000ECC  1F62               	comf	??_main& (0+255),f,b
   712  000ECE  1F63               	comf	(??_main+1)& (0+255),f,b
   713  000ED0  4B62               	infsnz	??_main& (0+255),f,b
   714  000ED2  2B63               	incf	(??_main+1)& (0+255),f,b
   715  000ED4  5048               	movf	_singleGameTime,w,c
   716  000ED6  0100               	movlb	0	; () banked
   717  000ED8  2562               	addwf	??_main& (0+255),w,b
   718  000EDA  0100               	movlb	0	; () banked
   719  000EDC  6F60               	movwf	printRemTime@nbSeconds& (0+255),b
   720  000EDE  5049               	movf	_singleGameTime+1,w,c
   721  000EE0  0100               	movlb	0	; () banked
   722  000EE2  2163               	addwfc	(??_main+1)& (0+255),w,b
   723  000EE4  0100               	movlb	0	; () banked
   724  000EE6  6F61               	movwf	(printRemTime@nbSeconds+1)& (0+255),b
   725  000EE8  EC76  F00B         	call	_printRemTime	;wreg free
   726                           
   727                           ;main.c: 136: switch(myState){
   728  000EEC  D090               	goto	l139
   729  000EEE                     
   730                           ;main.c: 143: getRandomTarget(nextTarget);
   731  000EEE  0E44               	movlw	low _nextTarget
   732  000EF0  6E13               	movwf	getRandomTarget@Target,c
   733  000EF2  0E00               	movlw	high _nextTarget
   734  000EF4  6E14               	movwf	getRandomTarget@Target+1,c
   735  000EF6  EC52  F00B         	call	_getRandomTarget	;wreg free
   736                           
   737                           ;main.c: 144: activateTarget(nextTarget[0]);
   738  000EFA  C044  F013         	movff	_nextTarget,activateTarget@targetNbr
   739  000EFE  C045  F014         	movff	_nextTarget+1,activateTarget@targetNbr+1
   740  000F02  EC26  F00C         	call	_activateTarget	;wreg free
   741                           
   742                           ;main.c: 145: activateLEDTarget(nextTarget);
   743  000F06  0E44               	movlw	low _nextTarget
   744  000F08  6E13               	movwf	activateLEDTarget@targetLED,c
   745  000F0A  0E00               	movlw	high _nextTarget
   746  000F0C  6E14               	movwf	activateLEDTarget@targetLED+1,c
   747  000F0E  ECD3  F008         	call	_activateLEDTarget	;wreg free
   748                           
   749                           ;main.c: 146: myState= WAIT_KILL;
   750  000F12  0E04               	movlw	4
   751  000F14  D056               	goto	L3
   752  000F16                     
   753                           ;main.c: 150: totalPoints++;
   754  000F16  4A32               	infsnz	_totalPoints,f,c
   755  000F18  2A33               	incf	_totalPoints+1,f,c
   756                           
   757                           ;main.c: 151: myState= SELECT_NEW_TARGET;
   758  000F1A  0E01               	movlw	1
   759  000F1C  D052               	goto	L3
   760  000F1E                     
   761                           ;main.c: 155: if(reloadFlag){
   762  000F1E  503D               	movf	_reloadFlag,w,c
   763  000F20  B4D8               	btfsc	status,2,c
   764  000F22  D005               	goto	l145
   765                           
   766                           ;main.c: 156: ammoLeft= 12;
   767  000F24  0E00               	movlw	0
   768  000F26  6E4B               	movwf	_ammoLeft+1,c
   769  000F28  0E0C               	movlw	12
   770  000F2A  6E4A               	movwf	_ammoLeft,c
   771  000F2C  D069               	goto	L4
   772  000F2E                     l145:
   773                           
   774                           ;main.c: 161: else if (modeFlag){
   775  000F2E  503C               	movf	_modeFlag,w,c
   776  000F30  B4D8               	btfsc	status,2,c
   777  000F32  D008               	goto	l147
   778                           
   779                           ;main.c: 162: changeMode();
   780  000F34  EC15  F00C         	call	_changeMode	;wreg free
   781                           
   782                           ;main.c: 163: setModeLED(myModeState);
   783  000F38  5042               	movf	_myModeState,w,c
   784  000F3A  ECBA  F00B         	call	_setModeLED
   785                           
   786                           ;main.c: 164: modeFlag=0;
   787  000F3E  0E00               	movlw	0
   788  000F40  6E3C               	movwf	_modeFlag,c
   789  000F42  D060               	goto	l2392
   790  000F44                     l147:
   791                           
   792                           ;main.c: 168: else if (pewFlag && ammoLeft !=0){
   793  000F44  503B               	movf	_pewFlag,w,c
   794  000F46  B4D8               	btfsc	status,2,c
   795  000F48  D022               	goto	l149
   796  000F4A  504A               	movf	_ammoLeft,w,c
   797  000F4C  104B               	iorwf	_ammoLeft+1,w,c
   798  000F4E  B4D8               	btfsc	status,2,c
   799  000F50  D01E               	goto	l149
   800                           
   801                           ;main.c: 169: fireShot();
   802  000F52  EC2E  F00C         	call	_fireShot	;wreg free
   803                           
   804                           ;main.c: 170: for (int i =0;i<10000;i++){}
   805  000F56  0E00               	movlw	0
   806  000F58  0100               	movlb	0	; () banked
   807  000F5A  6F65               	movwf	(main@i+1)& (0+255),b
   808  000F5C  0E00               	movlw	0
   809  000F5E  6F64               	movwf	main@i& (0+255),b
   810  000F60                     l2346:
   811                           
   812                           ; BSR set to: 0
   813  000F60  0100               	movlb	0	; () banked
   814  000F62  BF65               	btfsc	(main@i+1)& (0+255),7,b
   815  000F64  D008               	goto	l150
   816  000F66  0E10               	movlw	16
   817  000F68  0100               	movlb	0	; () banked
   818  000F6A  5D64               	subwf	main@i& (0+255),w,b
   819  000F6C  0E27               	movlw	39
   820  000F6E  0100               	movlb	0	; () banked
   821  000F70  5965               	subwfb	(main@i+1)& (0+255),w,b
   822  000F72  B0D8               	btfsc	status,0,c
   823  000F74  D004               	goto	u1320
   824  000F76                     l150:
   825                           
   826                           ; BSR set to: 0
   827                           
   828                           ; BSR set to: 0
   829  000F76  0100               	movlb	0	; () banked
   830  000F78  4B64               	infsnz	main@i& (0+255),f,b
   831  000F7A  2B65               	incf	(main@i+1)& (0+255),f,b
   832  000F7C  D7F1               	goto	l2346
   833  000F7E                     u1320:
   834                           
   835                           ; BSR set to: 0
   836                           ;main.c: 171: stopShot();
   837                           
   838                           ; BSR set to: 0
   839  000F7E  EC2C  F00C         	call	_stopShot	;wreg free
   840                           
   841                           ;main.c: 172: ammoLeft -= 1;
   842  000F82  064A               	decf	_ammoLeft,f,c
   843  000F84  A0D8               	btfss	status,0,c
   844  000F86  064B               	decf	_ammoLeft+1,f,c
   845                           
   846                           ;main.c: 173: pewFlag = 0;
   847  000F88  0E00               	movlw	0
   848  000F8A  6E3B               	movwf	_pewFlag,c
   849  000F8C  D03B               	goto	l2392
   850  000F8E                     l149:
   851                           
   852                           ;main.c: 176: else if(ammoLeft==0){
   853  000F8E  504A               	movf	_ammoLeft,w,c
   854  000F90  104B               	iorwf	_ammoLeft+1,w,c
   855  000F92  A4D8               	btfss	status,2,c
   856  000F94  D002               	goto	l153
   857                           
   858                           ;main.c: 177: myState = NEED_RELOAD;
   859  000F96  0E03               	movlw	3
   860  000F98  D014               	goto	L3
   861  000F9A                     l153:
   862                           
   863                           ;main.c: 179: else if(capteurFlag && myModeState == nextTarget[1]){
   864  000F9A  503A               	movf	_capteurFlag,w,c
   865  000F9C  B4D8               	btfsc	status,2,c
   866  000F9E  D04A               	goto	l141
   867  000FA0  5042               	movf	_myModeState,w,c
   868  000FA2  0100               	movlb	0	; () banked
   869  000FA4  6F62               	movwf	??_main& (0+255),b
   870  000FA6  6B63               	clrf	(??_main+1)& (0+255),b
   871  000FA8  5046               	movf	_nextTarget+2,w,c
   872  000FAA  0100               	movlb	0	; () banked
   873  000FAC  1962               	xorwf	??_main& (0+255),w,b
   874  000FAE  E142               	bnz	l2400
   875  000FB0  5047               	movf	_nextTarget+3,w,c
   876  000FB2  0100               	movlb	0	; () banked
   877  000FB4  1963               	xorwf	(??_main+1)& (0+255),w,b
   878  000FB6  A4D8               	btfss	status,2,c
   879  000FB8  D03D               	goto	l141
   880                           
   881                           ; BSR set to: 0
   882                           ;main.c: 180: capteurFlag = 0;
   883  000FBA  0E00               	movlw	0
   884  000FBC  6E3A               	movwf	_capteurFlag,c
   885                           
   886                           ; BSR set to: 0
   887                           ;main.c: 181: INTCON3bits.INT1E = 1;
   888  000FBE  86F0               	bsf	intcon3,3,c	;volatile
   889                           
   890                           ;main.c: 182: myState = ACCUMULATE_POINTS;
   891  000FC0  0E02               	movlw	2
   892  000FC2                     L3:
   893  000FC2  6E43               	movwf	_myState,c
   894                           
   895                           ; BSR set to: 0
   896                           ;main.c: 183: }
   897                           ;main.c: 185: break;
   898                           
   899                           ; BSR set to: 0
   900                           
   901                           ; BSR set to: 0
   902                           
   903                           ; BSR set to: 0
   904                           
   905                           ; BSR set to: 0
   906  000FC4  D037               	goto	l141
   907  000FC6                     
   908                           ;main.c: 188: toggleCounter++;
   909                           
   910                           ; BSR set to: 0
   911  000FC6  4A36               	infsnz	_toggleCounter,f,c
   912  000FC8  2A37               	incf	_toggleCounter+1,f,c
   913                           
   914                           ;main.c: 189: if (toggleCounter==5000){
   915  000FCA  0E88               	movlw	136
   916  000FCC  1836               	xorwf	_toggleCounter,w,c
   917  000FCE  E10A               	bnz	l2382
   918  000FD0  0E13               	movlw	19
   919  000FD2  1837               	xorwf	_toggleCounter+1,w,c
   920  000FD4  A4D8               	btfss	status,2,c
   921  000FD6  D006               	goto	l157
   922                           
   923                           ;main.c: 190: toggleGunLED();
   924  000FD8  EC1E  F00C         	call	_toggleGunLED	;wreg free
   925                           
   926                           ;main.c: 191: toggleCounter=0;
   927  000FDC  0E00               	movlw	0
   928  000FDE  6E37               	movwf	_toggleCounter+1,c
   929  000FE0  0E00               	movlw	0
   930  000FE2  6E36               	movwf	_toggleCounter,c
   931  000FE4                     l157:
   932  000FE4                     l2382:
   933                           
   934                           ;main.c: 192: }
   935                           ;main.c: 193: if(reloadFlag){
   936  000FE4  503D               	movf	_reloadFlag,w,c
   937  000FE6  B4D8               	btfsc	status,2,c
   938  000FE8  D025               	goto	l141
   939                           
   940                           ;main.c: 194: ammoLeft= 12;
   941  000FEA  0E00               	movlw	0
   942  000FEC  6E4B               	movwf	_ammoLeft+1,c
   943  000FEE  0E0C               	movlw	12
   944  000FF0  6E4A               	movwf	_ammoLeft,c
   945                           
   946                           ;main.c: 195: setModeLED(myModeState);
   947  000FF2  5042               	movf	_myModeState,w,c
   948  000FF4  ECBA  F00B         	call	_setModeLED
   949                           
   950                           ;main.c: 196: toggleCounter=0;
   951  000FF8  0E00               	movlw	0
   952  000FFA  6E37               	movwf	_toggleCounter+1,c
   953  000FFC  0E00               	movlw	0
   954  000FFE  6E36               	movwf	_toggleCounter,c
   955  001000                     L4:
   956                           
   957                           ;main.c: 197: reloadFlag=0;
   958  001000  0E00               	movlw	0
   959  001002  6E3D               	movwf	_reloadFlag,c
   960  001004                     l2392:
   961                           
   962                           ;main.c: 198: PIE1bits.RC1IE = 1;
   963  001004  8A9D               	bsf	3997,5,c	;volatile
   964                           
   965                           ;main.c: 199: }
   966                           ;main.c: 200: break;
   967  001006  D016               	goto	l141
   968  001008                     
   969                           ;main.c: 203: endFlag = 1;
   970  001008  0E01               	movlw	1
   971  00100A  6E38               	movwf	_endFlag,c
   972                           
   973                           ;main.c: 205: }
   974                           
   975                           ;main.c: 204: break;
   976  00100C  D013               	goto	l141
   977  00100E                     l139:
   978  00100E  5043               	movf	_myState,w,c
   979                           
   980                           ; Switch size 1, requested type "space"
   981                           ; Number of cases is 6, Range of values is 0 to 5
   982                           ; switch strategies available:
   983                           ; Name         Instructions Cycles
   984                           ; simple_byte           19    10 (average)
   985                           ;	Chosen strategy is simple_byte
   986  001010  0A00               	xorlw	0	; case 0
   987  001012  B4D8               	btfsc	status,2,c
   988  001014  D00F               	goto	l141
   989  001016  0A01               	xorlw	1	; case 1
   990  001018  B4D8               	btfsc	status,2,c
   991  00101A  D769               	goto	l142
   992  00101C  0A03               	xorlw	3	; case 2
   993  00101E  B4D8               	btfsc	status,2,c
   994  001020  D77A               	goto	l143
   995  001022  0A01               	xorlw	1	; case 3
   996  001024  B4D8               	btfsc	status,2,c
   997  001026  D7CF               	goto	l156
   998  001028  0A07               	xorlw	7	; case 4
   999  00102A  B4D8               	btfsc	status,2,c
  1000  00102C  D778               	goto	l144
  1001  00102E  0A01               	xorlw	1	; case 5
  1002  001030  B4D8               	btfsc	status,2,c
  1003  001032  D7EA               	goto	l159
  1004  001034                     l141:
  1005  001034                     l2400:
  1006  001034  5038               	movf	_endFlag,w,c
  1007  001036  B4D8               	btfsc	status,2,c
  1008  001038  D727               	goto	l136
  1009                           
  1010                           ;main.c: 206: }
  1011                           ;main.c: 207: printEndGame(totalPoints);
  1012  00103A  C032  F02D         	movff	_totalPoints,printEndGame@nbPoints
  1013  00103E  C033  F02E         	movff	_totalPoints+1,printEndGame@nbPoints+1
  1014  001042  ECAD  F009         	call	_printEndGame	;wreg free
  1015  001046  EF80  F000         	goto	start
  1016  00104A                     __end_of_main:
  1017                           	opt stack 0
  1018                           tblptru	equ	0xFF8
  1019                           tblptrh	equ	0xFF7
  1020                           tblptrl	equ	0xFF6
  1021                           tablat	equ	0xFF5
  1022                           intcon	equ	0xFF2
  1023                           intcon3	equ	0xFF0
  1024                           postinc0	equ	0xFEE
  1025                           wreg	equ	0xFE8
  1026                           postdec1	equ	0xFE5
  1027                           fsr1l	equ	0xFE1
  1028                           status	equ	0xFD8
  1029                           
  1030 ;; *************** function _toggleGunLED *****************
  1031 ;; Defined at:
  1032 ;;		line 359 in file "main.c"
  1033 ;; Parameters:    Size  Location     Type
  1034 ;;		None
  1035 ;; Auto vars:     Size  Location     Type
  1036 ;;		None
  1037 ;; Return value:  Size  Location     Type
  1038 ;;                  1    wreg      void 
  1039 ;; Registers used:
  1040 ;;		None
  1041 ;; Tracked objects:
  1042 ;;		On entry : 0/0
  1043 ;;		On exit  : 0/0
  1044 ;;		Unchanged: 0/0
  1045 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1046 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1047 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1048 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1049 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1050 ;;Total ram usage:        0 bytes
  1051 ;; Hardware stack levels used:    1
  1052 ;; Hardware stack levels required when called:    1
  1053 ;; This function calls:
  1054 ;;		Nothing
  1055 ;; This function is called by:
  1056 ;;		_main
  1057 ;; This function uses a non-reentrant model
  1058 ;;
  1059                           
  1060                           	psect	text1
  1061  00183C                     __ptext1:
  1062                           	opt stack 0
  1063  00183C                     _toggleGunLED:
  1064                           	opt stack 29
  1065                           
  1066                           ;main.c: 360: if (LATDbits.LATD0==0){
  1067                           
  1068                           ;incstack = 0
  1069  00183C  B08C               	btfsc	3980,0,c	;volatile
  1070  00183E  D003               	goto	l222
  1071                           
  1072                           ;main.c: 361: LATDbits.LATD0 = 1;
  1073  001840  808C               	bsf	3980,0,c	;volatile
  1074                           
  1075                           ;main.c: 362: LATDbits.LATD5 = 1;
  1076  001842  8A8C               	bsf	3980,5,c	;volatile
  1077                           
  1078                           ;main.c: 363: }
  1079  001844  0012               	return	
  1080  001846                     l222:
  1081                           
  1082                           ;main.c: 364: else{
  1083                           ;main.c: 365: LATDbits.LATD0 = 0;
  1084  001846  908C               	bcf	3980,0,c	;volatile
  1085                           
  1086                           ;main.c: 366: LATDbits.LATD5 = 0;
  1087  001848  9A8C               	bcf	3980,5,c	;volatile
  1088  00184A  0012               	return	
  1089  00184C                     __end_of_toggleGunLED:
  1090                           	opt stack 0
  1091                           tblptru	equ	0xFF8
  1092                           tblptrh	equ	0xFF7
  1093                           tblptrl	equ	0xFF6
  1094                           tablat	equ	0xFF5
  1095                           intcon	equ	0xFF2
  1096                           intcon3	equ	0xFF0
  1097                           postinc0	equ	0xFEE
  1098                           wreg	equ	0xFE8
  1099                           postdec1	equ	0xFE5
  1100                           fsr1l	equ	0xFE1
  1101                           status	equ	0xFD8
  1102                           
  1103 ;; *************** function _stopShot *****************
  1104 ;; Defined at:
  1105 ;;		line 341 in file "main.c"
  1106 ;; Parameters:    Size  Location     Type
  1107 ;;		None
  1108 ;; Auto vars:     Size  Location     Type
  1109 ;;		None
  1110 ;; Return value:  Size  Location     Type
  1111 ;;                  1    wreg      void 
  1112 ;; Registers used:
  1113 ;;		None
  1114 ;; Tracked objects:
  1115 ;;		On entry : 0/0
  1116 ;;		On exit  : 0/0
  1117 ;;		Unchanged: 0/0
  1118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1119 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1120 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1121 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1122 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1123 ;;Total ram usage:        0 bytes
  1124 ;; Hardware stack levels used:    1
  1125 ;; Hardware stack levels required when called:    1
  1126 ;; This function calls:
  1127 ;;		Nothing
  1128 ;; This function is called by:
  1129 ;;		_main
  1130 ;; This function uses a non-reentrant model
  1131 ;;
  1132                           
  1133                           	psect	text2
  1134  001858                     __ptext2:
  1135                           	opt stack 0
  1136  001858                     _stopShot:
  1137                           	opt stack 29
  1138                           
  1139                           ;main.c: 342: LATBbits.LATB1 = 0;
  1140                           
  1141                           ;incstack = 0
  1142  001858  928A               	bcf	3978,1,c	;volatile
  1143  00185A  0012               	return		;funcret
  1144  00185C                     __end_of_stopShot:
  1145                           	opt stack 0
  1146                           tblptru	equ	0xFF8
  1147                           tblptrh	equ	0xFF7
  1148                           tblptrl	equ	0xFF6
  1149                           tablat	equ	0xFF5
  1150                           intcon	equ	0xFF2
  1151                           intcon3	equ	0xFF0
  1152                           postinc0	equ	0xFEE
  1153                           wreg	equ	0xFE8
  1154                           postdec1	equ	0xFE5
  1155                           fsr1l	equ	0xFE1
  1156                           status	equ	0xFD8
  1157                           
  1158 ;; *************** function _setUARTconfig *****************
  1159 ;; Defined at:
  1160 ;;		line 250 in file "main.c"
  1161 ;; Parameters:    Size  Location     Type
  1162 ;;		None
  1163 ;; Auto vars:     Size  Location     Type
  1164 ;;		None
  1165 ;; Return value:  Size  Location     Type
  1166 ;;                  1    wreg      void 
  1167 ;; Registers used:
  1168 ;;		wreg, status,2
  1169 ;; Tracked objects:
  1170 ;;		On entry : 0/0
  1171 ;;		On exit  : 0/0
  1172 ;;		Unchanged: 0/0
  1173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1174 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1175 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1176 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1177 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1178 ;;Total ram usage:        0 bytes
  1179 ;; Hardware stack levels used:    1
  1180 ;; Hardware stack levels required when called:    1
  1181 ;; This function calls:
  1182 ;;		Nothing
  1183 ;; This function is called by:
  1184 ;;		_main
  1185 ;; This function uses a non-reentrant model
  1186 ;;
  1187                           
  1188                           	psect	text3
  1189  0016CA                     __ptext3:
  1190                           	opt stack 0
  1191  0016CA                     _setUARTconfig:
  1192                           	opt stack 29
  1193                           
  1194                           ;main.c: 252: RPINR0_1 = 0b01100110;
  1195                           
  1196                           ;incstack = 0
  1197  0016CA  0E66               	movlw	102
  1198  0016CC  010E               	movlb	14	; () banked
  1199  0016CE  6F2A               	movwf	42,b	;volatile
  1200                           
  1201                           ;main.c: 253: RPOR26_27 = 0b00010001;
  1202  0016D0  0E11               	movlw	17
  1203  0016D2  010E               	movlb	14	; () banked
  1204  0016D4  6F1F               	movwf	31,b	;volatile
  1205                           
  1206                           ;main.c: 255: BAUDCON1 = 0x00;
  1207  0016D6  0E00               	movlw	0
  1208  0016D8  6E67               	movwf	3943,c	;volatile
  1209                           
  1210                           ;main.c: 256: TXSTA1 = 0x26;
  1211  0016DA  0E26               	movlw	38
  1212  0016DC  6EAC               	movwf	4012,c	;volatile
  1213                           
  1214                           ;main.c: 257: RCSTA1 = 0x90;
  1215  0016DE  0E90               	movlw	144
  1216  0016E0  6EAB               	movwf	4011,c	;volatile
  1217                           
  1218                           ;main.c: 258: SPBRG1 = 0x19;
  1219  0016E2  0E19               	movlw	25
  1220  0016E4  6EAF               	movwf	4015,c	;volatile
  1221                           
  1222                           ;main.c: 260: TXREG1 = 0xAA;
  1223  0016E6  0EAA               	movlw	170
  1224  0016E8  6EAD               	movwf	4013,c	;volatile
  1225                           
  1226                           ; BSR set to: 14
  1227  0016EA  0012               	return		;funcret
  1228  0016EC                     __end_of_setUARTconfig:
  1229                           	opt stack 0
  1230                           tblptru	equ	0xFF8
  1231                           tblptrh	equ	0xFF7
  1232                           tblptrl	equ	0xFF6
  1233                           tablat	equ	0xFF5
  1234                           intcon	equ	0xFF2
  1235                           intcon3	equ	0xFF0
  1236                           postinc0	equ	0xFEE
  1237                           wreg	equ	0xFE8
  1238                           postdec1	equ	0xFE5
  1239                           fsr1l	equ	0xFE1
  1240                           status	equ	0xFD8
  1241                           
  1242 ;; *************** function _setTimerConfig *****************
  1243 ;; Defined at:
  1244 ;;		line 295 in file "main.c"
  1245 ;; Parameters:    Size  Location     Type
  1246 ;;		None
  1247 ;; Auto vars:     Size  Location     Type
  1248 ;;		None
  1249 ;; Return value:  Size  Location     Type
  1250 ;;                  1    wreg      void 
  1251 ;; Registers used:
  1252 ;;		wreg, status,2
  1253 ;; Tracked objects:
  1254 ;;		On entry : 0/0
  1255 ;;		On exit  : 0/0
  1256 ;;		Unchanged: 0/0
  1257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1258 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1259 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1260 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1261 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1262 ;;Total ram usage:        0 bytes
  1263 ;; Hardware stack levels used:    1
  1264 ;; Hardware stack levels required when called:    1
  1265 ;; This function calls:
  1266 ;;		Nothing
  1267 ;; This function is called by:
  1268 ;;		_main
  1269 ;; This function uses a non-reentrant model
  1270 ;;
  1271                           
  1272                           	psect	text4
  1273  001804                     __ptext4:
  1274                           	opt stack 0
  1275  001804                     _setTimerConfig:
  1276                           	opt stack 29
  1277                           
  1278                           ;main.c: 296: T0CONbits.TMR0ON = 0;
  1279                           
  1280                           ; BSR set to: 14
  1281                           ;incstack = 0
  1282  001804  9ED5               	bcf	4053,7,c	;volatile
  1283                           
  1284                           ;main.c: 297: T0CONbits.T08BIT = 1;
  1285  001806  8CD5               	bsf	4053,6,c	;volatile
  1286                           
  1287                           ;main.c: 298: T0CONbits.T0CS = 0;
  1288  001808  0ECF               	movlw	-49
  1289  00180A  16D5               	andwf	4053,f,c	;volatile
  1290                           
  1291                           ;main.c: 299: T0CONbits.PSA = 0;
  1292  00180C  96D5               	bcf	4053,3,c	;volatile
  1293                           
  1294                           ;main.c: 300: T0CONbits.T0PS= 0b110;
  1295  00180E  50D5               	movf	4053,w,c	;volatile
  1296  001810  0BF8               	andlw	-8
  1297  001812  0906               	iorlw	6
  1298  001814  6ED5               	movwf	4053,c	;volatile
  1299  001816  0012               	return		;funcret
  1300  001818                     __end_of_setTimerConfig:
  1301                           	opt stack 0
  1302                           tblptru	equ	0xFF8
  1303                           tblptrh	equ	0xFF7
  1304                           tblptrl	equ	0xFF6
  1305                           tablat	equ	0xFF5
  1306                           intcon	equ	0xFF2
  1307                           intcon3	equ	0xFF0
  1308                           postinc0	equ	0xFEE
  1309                           wreg	equ	0xFE8
  1310                           postdec1	equ	0xFE5
  1311                           fsr1l	equ	0xFE1
  1312                           status	equ	0xFD8
  1313                           
  1314 ;; *************** function _setPinConfig *****************
  1315 ;; Defined at:
  1316 ;;		line 285 in file "main.c"
  1317 ;; Parameters:    Size  Location     Type
  1318 ;;		None
  1319 ;; Auto vars:     Size  Location     Type
  1320 ;;		None
  1321 ;; Return value:  Size  Location     Type
  1322 ;;                  1    wreg      void 
  1323 ;; Registers used:
  1324 ;;		wreg, status,2, status,0
  1325 ;; Tracked objects:
  1326 ;;		On entry : 0/0
  1327 ;;		On exit  : 0/0
  1328 ;;		Unchanged: 0/0
  1329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1330 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1331 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1332 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1333 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1334 ;;Total ram usage:        0 bytes
  1335 ;; Hardware stack levels used:    1
  1336 ;; Hardware stack levels required when called:    1
  1337 ;; This function calls:
  1338 ;;		Nothing
  1339 ;; This function is called by:
  1340 ;;		_main
  1341 ;; This function uses a non-reentrant model
  1342 ;;
  1343                           
  1344                           	psect	text5
  1345  0017D0                     __ptext5:
  1346                           	opt stack 0
  1347  0017D0                     _setPinConfig:
  1348                           	opt stack 29
  1349                           
  1350                           ;main.c: 287: ANCON1 = 0x00;
  1351                           
  1352                           ;incstack = 0
  1353  0017D0  0E00               	movlw	0
  1354  0017D2  010E               	movlb	14	; () banked
  1355  0017D4  6F47               	movwf	71,b	;volatile
  1356                           
  1357                           ; BSR set to: 14
  1358                           ;main.c: 288: TRISA &= 0b11111000;
  1359  0017D6  0EF8               	movlw	248
  1360  0017D8  1692               	andwf	3986,f,c	;volatile
  1361                           
  1362                           ; BSR set to: 14
  1363                           ;main.c: 289: TRISC &= 0b00011000;
  1364  0017DA  0E18               	movlw	24
  1365  0017DC  1694               	andwf	3988,f,c	;volatile
  1366                           
  1367                           ; BSR set to: 14
  1368                           ;main.c: 290: TRISD &= 0b11011110;
  1369  0017DE  0EDE               	movlw	222
  1370  0017E0  1695               	andwf	3989,f,c	;volatile
  1371                           
  1372                           ; BSR set to: 14
  1373                           ;main.c: 291: TRISBbits.TRISB1 = 0;
  1374  0017E2  9293               	bcf	3987,1,c	;volatile
  1375                           
  1376                           ; BSR set to: 14
  1377                           ;main.c: 292: LATA = 0;
  1378  0017E4  0E00               	movlw	0
  1379  0017E6  6E89               	movwf	3977,c	;volatile
  1380                           
  1381                           ; BSR set to: 14
  1382  0017E8  0012               	return		;funcret
  1383  0017EA                     __end_of_setPinConfig:
  1384                           	opt stack 0
  1385                           tblptru	equ	0xFF8
  1386                           tblptrh	equ	0xFF7
  1387                           tblptrl	equ	0xFF6
  1388                           tablat	equ	0xFF5
  1389                           intcon	equ	0xFF2
  1390                           intcon3	equ	0xFF0
  1391                           postinc0	equ	0xFEE
  1392                           wreg	equ	0xFE8
  1393                           postdec1	equ	0xFE5
  1394                           fsr1l	equ	0xFE1
  1395                           status	equ	0xFD8
  1396                           
  1397 ;; *************** function _setModeLED *****************
  1398 ;; Defined at:
  1399 ;;		line 345 in file "main.c"
  1400 ;; Parameters:    Size  Location     Type
  1401 ;;  Mode            1    wreg     enum E13823
  1402 ;; Auto vars:     Size  Location     Type
  1403 ;;  Mode            1   18[COMRAM] enum E13823
  1404 ;; Return value:  Size  Location     Type
  1405 ;;                  1    wreg      void 
  1406 ;; Registers used:
  1407 ;;		wreg, status,2, status,0
  1408 ;; Tracked objects:
  1409 ;;		On entry : 0/0
  1410 ;;		On exit  : 0/0
  1411 ;;		Unchanged: 0/0
  1412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1413 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1414 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1415 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1416 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1417 ;;Total ram usage:        1 bytes
  1418 ;; Hardware stack levels used:    1
  1419 ;; Hardware stack levels required when called:    1
  1420 ;; This function calls:
  1421 ;;		Nothing
  1422 ;; This function is called by:
  1423 ;;		_main
  1424 ;; This function uses a non-reentrant model
  1425 ;;
  1426                           
  1427                           	psect	text6
  1428  001774                     __ptext6:
  1429                           	opt stack 0
  1430  001774                     _setModeLED:
  1431                           	opt stack 29
  1432                           
  1433                           ; BSR set to: 14
  1434                           ;incstack = 0
  1435                           ;setModeLED@Mode stored from wreg
  1436  001774  6E13               	movwf	setModeLED@Mode,c
  1437                           
  1438                           ;main.c: 346: switch (Mode){
  1439  001776  D006               	goto	l215
  1440  001778                     l216:
  1441                           
  1442                           ;main.c: 348: LATDbits.LATD0 = 1;
  1443  001778  808C               	bsf	3980,0,c	;volatile
  1444                           
  1445                           ;main.c: 349: LATDbits.LATD5 = 0;
  1446  00177A  9A8C               	bcf	3980,5,c	;volatile
  1447                           
  1448                           ;main.c: 350: break;
  1449  00177C  0012               	return	
  1450  00177E                     l218:
  1451                           
  1452                           ;main.c: 352: LATDbits.LATD0 = 1;
  1453  00177E  808C               	bsf	3980,0,c	;volatile
  1454                           
  1455                           ;main.c: 353: LATDbits.LATD5 = 0;
  1456  001780  9A8C               	bcf	3980,5,c	;volatile
  1457                           
  1458                           ;main.c: 356: }
  1459                           
  1460                           ;main.c: 354: break;
  1461  001782  0012               	return	
  1462  001784                     l215:
  1463  001784  5013               	movf	setModeLED@Mode,w,c
  1464                           
  1465                           ; Switch size 1, requested type "space"
  1466                           ; Number of cases is 2, Range of values is 0 to 1
  1467                           ; switch strategies available:
  1468                           ; Name         Instructions Cycles
  1469                           ; simple_byte            7     4 (average)
  1470                           ;	Chosen strategy is simple_byte
  1471  001786  0A00               	xorlw	0	; case 0
  1472  001788  B4D8               	btfsc	status,2,c
  1473  00178A  D7F6               	goto	l216
  1474  00178C  0A01               	xorlw	1	; case 1
  1475  00178E  A4D8               	btfss	status,2,c
  1476  001790  0012               	return	
  1477  001792  D7F5               	goto	l218
  1478  001794                     __end_of_setModeLED:
  1479                           	opt stack 0
  1480                           tblptru	equ	0xFF8
  1481                           tblptrh	equ	0xFF7
  1482                           tblptrl	equ	0xFF6
  1483                           tablat	equ	0xFF5
  1484                           intcon	equ	0xFF2
  1485                           intcon3	equ	0xFF0
  1486                           postinc0	equ	0xFEE
  1487                           wreg	equ	0xFE8
  1488                           postdec1	equ	0xFE5
  1489                           fsr1l	equ	0xFE1
  1490                           status	equ	0xFD8
  1491                           
  1492 ;; *************** function _setInterruptConfig *****************
  1493 ;; Defined at:
  1494 ;;		line 262 in file "main.c"
  1495 ;; Parameters:    Size  Location     Type
  1496 ;;		None
  1497 ;; Auto vars:     Size  Location     Type
  1498 ;;		None
  1499 ;; Return value:  Size  Location     Type
  1500 ;;                  1    wreg      void 
  1501 ;; Registers used:
  1502 ;;		wreg, status,2
  1503 ;; Tracked objects:
  1504 ;;		On entry : 0/0
  1505 ;;		On exit  : 0/0
  1506 ;;		Unchanged: 0/0
  1507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1508 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1509 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1510 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1511 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1512 ;;Total ram usage:        0 bytes
  1513 ;; Hardware stack levels used:    1
  1514 ;; Hardware stack levels required when called:    1
  1515 ;; This function calls:
  1516 ;;		Nothing
  1517 ;; This function is called by:
  1518 ;;		_main
  1519 ;; This function uses a non-reentrant model
  1520 ;;
  1521                           
  1522                           	psect	text7
  1523  001794                     __ptext7:
  1524                           	opt stack 0
  1525  001794                     _setInterruptConfig:
  1526                           	opt stack 29
  1527                           
  1528                           ;main.c: 266: INTCONbits.TMR0IF = 0;
  1529                           
  1530                           ;incstack = 0
  1531  001794  94F2               	bcf	intcon,2,c	;volatile
  1532                           
  1533                           ;main.c: 267: INTCONbits.TMR0IE = 1;
  1534  001796  8AF2               	bsf	intcon,5,c	;volatile
  1535                           
  1536                           ;main.c: 270: IPR1bits.RC1IP = 0;
  1537  001798  9A9F               	bcf	3999,5,c	;volatile
  1538                           
  1539                           ;main.c: 271: PIE1bits.RC1IE = 1;
  1540  00179A  8A9D               	bsf	3997,5,c	;volatile
  1541                           
  1542                           ;main.c: 274: RPINR26_27 = 0xC1;
  1543  00179C  0EC1               	movlw	193
  1544  00179E  010E               	movlb	14	; () banked
  1545  0017A0  6F37               	movwf	55,b	;volatile
  1546                           
  1547                           ; BSR set to: 14
  1548                           ;main.c: 275: TRISAbits.TRISA5 = 1;
  1549  0017A2  8A92               	bsf	3986,5,c	;volatile
  1550                           
  1551                           ; BSR set to: 14
  1552                           ;main.c: 276: INTCON2bits.INTEDG1 = 1;
  1553  0017A4  8AF1               	bsf	intcon2,5,c	;volatile
  1554                           
  1555                           ; BSR set to: 14
  1556                           ;main.c: 277: INTCON3bits.INT1F = 0;
  1557  0017A6  90F0               	bcf	intcon3,0,c	;volatile
  1558                           
  1559                           ; BSR set to: 14
  1560                           ;main.c: 278: INTCON3bits.INT1P = 0;
  1561  0017A8  9CF0               	bcf	intcon3,6,c	;volatile
  1562                           
  1563                           ; BSR set to: 14
  1564                           ;main.c: 279: INTCON3bits.INT1E = 1;
  1565  0017AA  86F0               	bsf	intcon3,3,c	;volatile
  1566                           
  1567                           ; BSR set to: 14
  1568                           ;main.c: 281: RCONbits.IPEN = 1;
  1569  0017AC  8ED0               	bsf	4048,7,c	;volatile
  1570                           
  1571                           ; BSR set to: 14
  1572                           ;main.c: 282: INTCONbits.GIE = 1;
  1573  0017AE  8EF2               	bsf	intcon,7,c	;volatile
  1574                           
  1575                           ; BSR set to: 14
  1576                           ;main.c: 283: INTCONbits.PEIE = 1;
  1577  0017B0  8CF2               	bsf	intcon,6,c	;volatile
  1578                           
  1579                           ; BSR set to: 14
  1580  0017B2  0012               	return		;funcret
  1581  0017B4                     __end_of_setInterruptConfig:
  1582                           	opt stack 0
  1583                           tblptru	equ	0xFF8
  1584                           tblptrh	equ	0xFF7
  1585                           tblptrl	equ	0xFF6
  1586                           tablat	equ	0xFF5
  1587                           intcon	equ	0xFF2
  1588                           intcon2	equ	0xFF1
  1589                           intcon3	equ	0xFF0
  1590                           postinc0	equ	0xFEE
  1591                           wreg	equ	0xFE8
  1592                           postdec1	equ	0xFE5
  1593                           fsr1l	equ	0xFE1
  1594                           status	equ	0xFD8
  1595                           
  1596 ;; *************** function _printStartGame *****************
  1597 ;; Defined at:
  1598 ;;		line 12 in file "LCD_Game_Printer.c"
  1599 ;; Parameters:    Size  Location     Type
  1600 ;;		None
  1601 ;; Auto vars:     Size  Location     Type
  1602 ;;		None
  1603 ;; Return value:  Size  Location     Type
  1604 ;;                  1    wreg      void 
  1605 ;; Registers used:
  1606 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1607 ;; Tracked objects:
  1608 ;;		On entry : 0/0
  1609 ;;		On exit  : 0/0
  1610 ;;		Unchanged: 0/0
  1611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1612 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1613 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1614 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1615 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1616 ;;Total ram usage:        0 bytes
  1617 ;; Hardware stack levels used:    1
  1618 ;; Hardware stack levels required when called:    5
  1619 ;; This function calls:
  1620 ;;		_clearDisplay
  1621 ;;		_moveCursor
  1622 ;;		_putStringLCD
  1623 ;;		_waitASec
  1624 ;; This function is called by:
  1625 ;;		_main
  1626 ;; This function uses a non-reentrant model
  1627 ;;
  1628                           
  1629                           	psect	text8
  1630  0015A8                     __ptext8:
  1631                           	opt stack 0
  1632  0015A8                     _printStartGame:
  1633                           	opt stack 25
  1634                           
  1635                           ;LCD_Game_Printer.c: 13: moveCursor(1,3);
  1636                           
  1637                           ; BSR set to: 14
  1638                           ;incstack = 0
  1639  0015A8  0E00               	movlw	0
  1640  0015AA  6E17               	movwf	moveCursor@row+1,c
  1641  0015AC  0E01               	movlw	1
  1642  0015AE  6E16               	movwf	moveCursor@row,c
  1643  0015B0  0E00               	movlw	0
  1644  0015B2  6E19               	movwf	moveCursor@col+1,c
  1645  0015B4  0E03               	movlw	3
  1646  0015B6  6E18               	movwf	moveCursor@col,c
  1647  0015B8  EC2C  F00A         	call	_moveCursor	;wreg free
  1648                           
  1649                           ;LCD_Game_Printer.c: 14: putStringLCD("S  T  A  R  T !");
  1650  0015BC  0E49               	movlw	low STR_2
  1651  0015BE  6E17               	movwf	putStringLCD@input,c
  1652  0015C0  0E0E               	movlw	high STR_2
  1653  0015C2  6E18               	movwf	putStringLCD@input+1,c
  1654  0015C4  EC3E  F009         	call	_putStringLCD	;wreg free
  1655                           
  1656                           ;LCD_Game_Printer.c: 15: waitASec();
  1657  0015C8  EC3B  F00B         	call	_waitASec	;wreg free
  1658                           
  1659                           ;LCD_Game_Printer.c: 16: waitASec();
  1660  0015CC  EC3B  F00B         	call	_waitASec	;wreg free
  1661                           
  1662                           ;LCD_Game_Printer.c: 17: clearDisplay();
  1663  0015D0  ECA9  F00B         	call	_clearDisplay	;wreg free
  1664                           
  1665                           ;LCD_Game_Printer.c: 18: putStringLCD("POINTS BULLETS TIME");
  1666  0015D4  0E21               	movlw	low STR_3
  1667  0015D6  6E17               	movwf	putStringLCD@input,c
  1668  0015D8  0E0E               	movlw	high STR_3
  1669  0015DA  6E18               	movwf	putStringLCD@input+1,c
  1670  0015DC  EC3E  F009         	call	_putStringLCD	;wreg free
  1671  0015E0  0012               	return		;funcret
  1672  0015E2                     __end_of_printStartGame:
  1673                           	opt stack 0
  1674                           tblptru	equ	0xFF8
  1675                           tblptrh	equ	0xFF7
  1676                           tblptrl	equ	0xFF6
  1677                           tablat	equ	0xFF5
  1678                           intcon	equ	0xFF2
  1679                           intcon2	equ	0xFF1
  1680                           intcon3	equ	0xFF0
  1681                           postinc0	equ	0xFEE
  1682                           wreg	equ	0xFE8
  1683                           postdec1	equ	0xFE5
  1684                           fsr1l	equ	0xFE1
  1685                           status	equ	0xFD8
  1686                           
  1687 ;; *************** function _printRemTime *****************
  1688 ;; Defined at:
  1689 ;;		line 26 in file "LCD_Game_Printer.c"
  1690 ;; Parameters:    Size  Location     Type
  1691 ;;  nbSeconds       2    0[BANK0 ] unsigned int 
  1692 ;; Auto vars:     Size  Location     Type
  1693 ;;		None
  1694 ;; Return value:  Size  Location     Type
  1695 ;;                  1    wreg      void 
  1696 ;; Registers used:
  1697 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1698 ;; Tracked objects:
  1699 ;;		On entry : 0/0
  1700 ;;		On exit  : 0/0
  1701 ;;		Unchanged: 0/0
  1702 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1703 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1704 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1705 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1706 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1707 ;;Total ram usage:        2 bytes
  1708 ;; Hardware stack levels used:    1
  1709 ;; Hardware stack levels required when called:    6
  1710 ;; This function calls:
  1711 ;;		_moveCursor
  1712 ;;		_printStat
  1713 ;; This function is called by:
  1714 ;;		_main
  1715 ;; This function uses a non-reentrant model
  1716 ;;
  1717                           
  1718                           	psect	text9
  1719  0016EC                     __ptext9:
  1720                           	opt stack 0
  1721  0016EC                     _printRemTime:
  1722                           	opt stack 24
  1723                           
  1724                           ;LCD_Game_Printer.c: 27: moveCursor(2,16);
  1725                           
  1726                           ;incstack = 0
  1727  0016EC  0E00               	movlw	0
  1728  0016EE  6E17               	movwf	moveCursor@row+1,c
  1729  0016F0  0E02               	movlw	2
  1730  0016F2  6E16               	movwf	moveCursor@row,c
  1731  0016F4  0E00               	movlw	0
  1732  0016F6  6E19               	movwf	moveCursor@col+1,c
  1733  0016F8  0E10               	movlw	16
  1734  0016FA  6E18               	movwf	moveCursor@col,c
  1735  0016FC  EC2C  F00A         	call	_moveCursor	;wreg free
  1736                           
  1737                           ;LCD_Game_Printer.c: 28: printStat(nbSeconds);
  1738  001700  C060  F02D         	movff	printRemTime@nbSeconds,printStat@stat
  1739  001704  C061  F02E         	movff	printRemTime@nbSeconds+1,printStat@stat+1
  1740  001708  EC79  F009         	call	_printStat	;wreg free
  1741  00170C  0012               	return		;funcret
  1742  00170E                     __end_of_printRemTime:
  1743                           	opt stack 0
  1744                           tblptru	equ	0xFF8
  1745                           tblptrh	equ	0xFF7
  1746                           tblptrl	equ	0xFF6
  1747                           tablat	equ	0xFF5
  1748                           intcon	equ	0xFF2
  1749                           intcon2	equ	0xFF1
  1750                           intcon3	equ	0xFF0
  1751                           postinc0	equ	0xFEE
  1752                           wreg	equ	0xFE8
  1753                           postdec1	equ	0xFE5
  1754                           fsr1l	equ	0xFE1
  1755                           status	equ	0xFD8
  1756                           
  1757 ;; *************** function _printRemBullets *****************
  1758 ;; Defined at:
  1759 ;;		line 21 in file "LCD_Game_Printer.c"
  1760 ;; Parameters:    Size  Location     Type
  1761 ;;  nbBullets       2    0[BANK0 ] unsigned int 
  1762 ;; Auto vars:     Size  Location     Type
  1763 ;;		None
  1764 ;; Return value:  Size  Location     Type
  1765 ;;                  1    wreg      void 
  1766 ;; Registers used:
  1767 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1768 ;; Tracked objects:
  1769 ;;		On entry : 0/0
  1770 ;;		On exit  : 0/0
  1771 ;;		Unchanged: 0/0
  1772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1773 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1774 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1775 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1776 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1777 ;;Total ram usage:        2 bytes
  1778 ;; Hardware stack levels used:    1
  1779 ;; Hardware stack levels required when called:    6
  1780 ;; This function calls:
  1781 ;;		_moveCursor
  1782 ;;		_printStat
  1783 ;; This function is called by:
  1784 ;;		_main
  1785 ;; This function uses a non-reentrant model
  1786 ;;
  1787                           
  1788                           	psect	text10
  1789  00170E                     __ptext10:
  1790                           	opt stack 0
  1791  00170E                     _printRemBullets:
  1792                           	opt stack 24
  1793                           
  1794                           ;LCD_Game_Printer.c: 22: moveCursor(2,9);
  1795                           
  1796                           ;incstack = 0
  1797  00170E  0E00               	movlw	0
  1798  001710  6E17               	movwf	moveCursor@row+1,c
  1799  001712  0E02               	movlw	2
  1800  001714  6E16               	movwf	moveCursor@row,c
  1801  001716  0E00               	movlw	0
  1802  001718  6E19               	movwf	moveCursor@col+1,c
  1803  00171A  0E09               	movlw	9
  1804  00171C  6E18               	movwf	moveCursor@col,c
  1805  00171E  EC2C  F00A         	call	_moveCursor	;wreg free
  1806                           
  1807                           ;LCD_Game_Printer.c: 23: printStat(nbBullets);
  1808  001722  C060  F02D         	movff	printRemBullets@nbBullets,printStat@stat
  1809  001726  C061  F02E         	movff	printRemBullets@nbBullets+1,printStat@stat+1
  1810  00172A  EC79  F009         	call	_printStat	;wreg free
  1811  00172E  0012               	return		;funcret
  1812  001730                     __end_of_printRemBullets:
  1813                           	opt stack 0
  1814                           tblptru	equ	0xFF8
  1815                           tblptrh	equ	0xFF7
  1816                           tblptrl	equ	0xFF6
  1817                           tablat	equ	0xFF5
  1818                           intcon	equ	0xFF2
  1819                           intcon2	equ	0xFF1
  1820                           intcon3	equ	0xFF0
  1821                           postinc0	equ	0xFEE
  1822                           wreg	equ	0xFE8
  1823                           postdec1	equ	0xFE5
  1824                           fsr1l	equ	0xFE1
  1825                           status	equ	0xFD8
  1826                           
  1827 ;; *************** function _printPoints *****************
  1828 ;; Defined at:
  1829 ;;		line 31 in file "LCD_Game_Printer.c"
  1830 ;; Parameters:    Size  Location     Type
  1831 ;;  nbPoints        2    0[BANK0 ] unsigned int 
  1832 ;; Auto vars:     Size  Location     Type
  1833 ;;		None
  1834 ;; Return value:  Size  Location     Type
  1835 ;;                  1    wreg      void 
  1836 ;; Registers used:
  1837 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1838 ;; Tracked objects:
  1839 ;;		On entry : 0/0
  1840 ;;		On exit  : 0/0
  1841 ;;		Unchanged: 0/0
  1842 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1843 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1844 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1845 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1846 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1847 ;;Total ram usage:        2 bytes
  1848 ;; Hardware stack levels used:    1
  1849 ;; Hardware stack levels required when called:    6
  1850 ;; This function calls:
  1851 ;;		_moveCursor
  1852 ;;		_printStat
  1853 ;; This function is called by:
  1854 ;;		_main
  1855 ;; This function uses a non-reentrant model
  1856 ;;
  1857                           
  1858                           	psect	text11
  1859  001730                     __ptext11:
  1860                           	opt stack 0
  1861  001730                     _printPoints:
  1862                           	opt stack 24
  1863                           
  1864                           ;LCD_Game_Printer.c: 32: moveCursor(2,1);
  1865                           
  1866                           ;incstack = 0
  1867  001730  0E00               	movlw	0
  1868  001732  6E17               	movwf	moveCursor@row+1,c
  1869  001734  0E02               	movlw	2
  1870  001736  6E16               	movwf	moveCursor@row,c
  1871  001738  0E00               	movlw	0
  1872  00173A  6E19               	movwf	moveCursor@col+1,c
  1873  00173C  0E01               	movlw	1
  1874  00173E  6E18               	movwf	moveCursor@col,c
  1875  001740  EC2C  F00A         	call	_moveCursor	;wreg free
  1876                           
  1877                           ;LCD_Game_Printer.c: 33: printStat(nbPoints);
  1878  001744  C060  F02D         	movff	printPoints@nbPoints,printStat@stat
  1879  001748  C061  F02E         	movff	printPoints@nbPoints+1,printStat@stat+1
  1880  00174C  EC79  F009         	call	_printStat	;wreg free
  1881  001750  0012               	return		;funcret
  1882  001752                     __end_of_printPoints:
  1883                           	opt stack 0
  1884                           tblptru	equ	0xFF8
  1885                           tblptrh	equ	0xFF7
  1886                           tblptrl	equ	0xFF6
  1887                           tablat	equ	0xFF5
  1888                           intcon	equ	0xFF2
  1889                           intcon2	equ	0xFF1
  1890                           intcon3	equ	0xFF0
  1891                           postinc0	equ	0xFEE
  1892                           wreg	equ	0xFE8
  1893                           postdec1	equ	0xFE5
  1894                           fsr1l	equ	0xFE1
  1895                           status	equ	0xFD8
  1896                           
  1897 ;; *************** function _printStat *****************
  1898 ;; Defined at:
  1899 ;;		line 36 in file "LCD_Game_Printer.c"
  1900 ;; Parameters:    Size  Location     Type
  1901 ;;  stat            2   44[COMRAM] unsigned int 
  1902 ;; Auto vars:     Size  Location     Type
  1903 ;;  statArray       3   46[COMRAM] unsigned char [3]
  1904 ;; Return value:  Size  Location     Type
  1905 ;;                  1    wreg      void 
  1906 ;; Registers used:
  1907 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1908 ;; Tracked objects:
  1909 ;;		On entry : 0/0
  1910 ;;		On exit  : 0/0
  1911 ;;		Unchanged: 0/0
  1912 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1913 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1914 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1915 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1916 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1917 ;;Total ram usage:        5 bytes
  1918 ;; Hardware stack levels used:    1
  1919 ;; Hardware stack levels required when called:    5
  1920 ;; This function calls:
  1921 ;;		_putStringLCD
  1922 ;;		_sprintf
  1923 ;; This function is called by:
  1924 ;;		_printRemBullets
  1925 ;;		_printRemTime
  1926 ;;		_printPoints
  1927 ;; This function uses a non-reentrant model
  1928 ;;
  1929                           
  1930                           	psect	text12
  1931  0012F2                     __ptext12:
  1932                           	opt stack 0
  1933  0012F2                     _printStat:
  1934                           	opt stack 24
  1935                           
  1936                           ;LCD_Game_Printer.c: 37: unsigned char statArray[3];
  1937                           ;LCD_Game_Printer.c: 38: sprintf(statArray, "%d", stat);
  1938                           
  1939                           ;incstack = 0
  1940  0012F2  0E2F               	movlw	low printStat@statArray
  1941  0012F4  6E1F               	movwf	sprintf@sp,c
  1942  0012F6  0E00               	movlw	high printStat@statArray
  1943  0012F8  6E20               	movwf	sprintf@sp+1,c
  1944  0012FA  0E64               	movlw	low STR_4
  1945  0012FC  6E21               	movwf	sprintf@f,c
  1946  0012FE  0E0E               	movlw	high STR_4
  1947  001300  6E22               	movwf	sprintf@f+1,c
  1948  001302  C02D  F023         	movff	printStat@stat,?_sprintf+4
  1949  001306  C02E  F024         	movff	printStat@stat+1,?_sprintf+5
  1950  00130A  EC25  F008         	call	_sprintf	;wreg free
  1951                           
  1952                           ;LCD_Game_Printer.c: 40: if(stat < 100 && stat >= 10){
  1953  00130E  502E               	movf	printStat@stat+1,w,c
  1954  001310  E111               	bnz	l2084
  1955  001312  0E64               	movlw	100
  1956  001314  5C2D               	subwf	printStat@stat,w,c
  1957  001316  B0D8               	btfsc	status,0,c
  1958  001318  D00D               	goto	l256
  1959  00131A  502E               	movf	printStat@stat+1,w,c
  1960  00131C  E104               	bnz	u1190
  1961  00131E  0E0A               	movlw	10
  1962  001320  5C2D               	subwf	printStat@stat,w,c
  1963  001322  A0D8               	btfss	status,0,c
  1964  001324  D007               	goto	l256
  1965  001326                     u1190:
  1966                           
  1967                           ;LCD_Game_Printer.c: 41: putStringLCD(" ");
  1968  001326  0E62               	movlw	low (STR_6+1)
  1969  001328  6E17               	movwf	putStringLCD@input,c
  1970  00132A  0E0E               	movlw	high (STR_6+1)
  1971  00132C  6E18               	movwf	putStringLCD@input+1,c
  1972  00132E  EC3E  F009         	call	_putStringLCD	;wreg free
  1973                           
  1974                           ;LCD_Game_Printer.c: 42: }
  1975  001332  D00C               	goto	l258
  1976  001334                     l256:
  1977  001334                     l2084:
  1978                           
  1979                           ;LCD_Game_Printer.c: 43: else if(stat < 10){
  1980  001334  502E               	movf	printStat@stat+1,w,c
  1981  001336  E10A               	bnz	l257
  1982  001338  0E0A               	movlw	10
  1983  00133A  5C2D               	subwf	printStat@stat,w,c
  1984  00133C  B0D8               	btfsc	status,0,c
  1985  00133E  D006               	goto	l258
  1986                           
  1987                           ;LCD_Game_Printer.c: 44: putStringLCD("  ");
  1988  001340  0E61               	movlw	low STR_6
  1989  001342  6E17               	movwf	putStringLCD@input,c
  1990  001344  0E0E               	movlw	high STR_6
  1991  001346  6E18               	movwf	putStringLCD@input+1,c
  1992  001348  EC3E  F009         	call	_putStringLCD	;wreg free
  1993  00134C                     l258:
  1994  00134C                     l257:
  1995                           
  1996                           ;LCD_Game_Printer.c: 45: }
  1997                           ;LCD_Game_Printer.c: 47: putStringLCD(statArray);
  1998  00134C  0E2F               	movlw	low printStat@statArray
  1999  00134E  6E17               	movwf	putStringLCD@input,c
  2000  001350  0E00               	movlw	high printStat@statArray
  2001  001352  6E18               	movwf	putStringLCD@input+1,c
  2002  001354  EC3E  F009         	call	_putStringLCD	;wreg free
  2003  001358  0012               	return		;funcret
  2004  00135A                     __end_of_printStat:
  2005                           	opt stack 0
  2006                           tblptru	equ	0xFF8
  2007                           tblptrh	equ	0xFF7
  2008                           tblptrl	equ	0xFF6
  2009                           tablat	equ	0xFF5
  2010                           intcon	equ	0xFF2
  2011                           intcon2	equ	0xFF1
  2012                           intcon3	equ	0xFF0
  2013                           postinc0	equ	0xFEE
  2014                           wreg	equ	0xFE8
  2015                           postdec1	equ	0xFE5
  2016                           fsr1l	equ	0xFE1
  2017                           status	equ	0xFD8
  2018                           
  2019 ;; *************** function _printMBED *****************
  2020 ;; Defined at:
  2021 ;;		line 4 in file "LCD_Game_Printer.c"
  2022 ;; Parameters:    Size  Location     Type
  2023 ;;		None
  2024 ;; Auto vars:     Size  Location     Type
  2025 ;;		None
  2026 ;; Return value:  Size  Location     Type
  2027 ;;                  1    wreg      void 
  2028 ;; Registers used:
  2029 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2030 ;; Tracked objects:
  2031 ;;		On entry : 0/0
  2032 ;;		On exit  : 0/0
  2033 ;;		Unchanged: 0/0
  2034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2035 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2036 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2037 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2038 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2039 ;;Total ram usage:        0 bytes
  2040 ;; Hardware stack levels used:    1
  2041 ;; Hardware stack levels required when called:    5
  2042 ;; This function calls:
  2043 ;;		_clearDisplay
  2044 ;;		_moveCursor
  2045 ;;		_putStringLCD
  2046 ;;		_waitASec
  2047 ;; This function is called by:
  2048 ;;		_main
  2049 ;; This function uses a non-reentrant model
  2050 ;;
  2051                           
  2052                           	psect	text13
  2053  001648                     __ptext13:
  2054                           	opt stack 0
  2055  001648                     _printMBED:
  2056                           	opt stack 25
  2057                           
  2058                           ;LCD_Game_Printer.c: 5: moveCursor(1,0);
  2059                           
  2060                           ;incstack = 0
  2061  001648  0E00               	movlw	0
  2062  00164A  6E17               	movwf	moveCursor@row+1,c
  2063  00164C  0E01               	movlw	1
  2064  00164E  6E16               	movwf	moveCursor@row,c
  2065  001650  0E00               	movlw	0
  2066  001652  6E19               	movwf	moveCursor@col+1,c
  2067  001654  0E00               	movlw	0
  2068  001656  6E18               	movwf	moveCursor@col,c
  2069  001658  EC2C  F00A         	call	_moveCursor	;wreg free
  2070                           
  2071                           ;LCD_Game_Printer.c: 6: putStringLCD("  EMBEDDED UNIVERSE");
  2072  00165C  0E35               	movlw	low STR_1
  2073  00165E  6E17               	movwf	putStringLCD@input,c
  2074  001660  0E0E               	movlw	high STR_1
  2075  001662  6E18               	movwf	putStringLCD@input+1,c
  2076  001664  EC3E  F009         	call	_putStringLCD	;wreg free
  2077                           
  2078                           ;LCD_Game_Printer.c: 7: waitASec();
  2079  001668  EC3B  F00B         	call	_waitASec	;wreg free
  2080                           
  2081                           ;LCD_Game_Printer.c: 8: waitASec();
  2082  00166C  EC3B  F00B         	call	_waitASec	;wreg free
  2083                           
  2084                           ;LCD_Game_Printer.c: 9: clearDisplay();
  2085  001670  ECA9  F00B         	call	_clearDisplay	;wreg free
  2086  001674  0012               	return		;funcret
  2087  001676                     __end_of_printMBED:
  2088                           	opt stack 0
  2089                           tblptru	equ	0xFF8
  2090                           tblptrh	equ	0xFF7
  2091                           tblptrl	equ	0xFF6
  2092                           tablat	equ	0xFF5
  2093                           intcon	equ	0xFF2
  2094                           intcon2	equ	0xFF1
  2095                           intcon3	equ	0xFF0
  2096                           postinc0	equ	0xFEE
  2097                           wreg	equ	0xFE8
  2098                           postdec1	equ	0xFE5
  2099                           fsr1l	equ	0xFE1
  2100                           status	equ	0xFD8
  2101                           
  2102 ;; *************** function _waitASec *****************
  2103 ;; Defined at:
  2104 ;;		line 62 in file "LCD_Game_Printer.c"
  2105 ;; Parameters:    Size  Location     Type
  2106 ;;		None
  2107 ;; Auto vars:     Size  Location     Type
  2108 ;;  i               2   19[COMRAM] int 
  2109 ;; Return value:  Size  Location     Type
  2110 ;;                  1    wreg      void 
  2111 ;; Registers used:
  2112 ;;		wreg, status,2, status,0
  2113 ;; Tracked objects:
  2114 ;;		On entry : 0/0
  2115 ;;		On exit  : 0/0
  2116 ;;		Unchanged: 0/0
  2117 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2118 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2119 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2120 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2121 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2122 ;;Total ram usage:        3 bytes
  2123 ;; Hardware stack levels used:    1
  2124 ;; Hardware stack levels required when called:    1
  2125 ;; This function calls:
  2126 ;;		Nothing
  2127 ;; This function is called by:
  2128 ;;		_printMBED
  2129 ;;		_printStartGame
  2130 ;; This function uses a non-reentrant model
  2131 ;;
  2132                           
  2133                           	psect	text14
  2134  001676                     __ptext14:
  2135                           	opt stack 0
  2136  001676                     _waitASec:
  2137                           	opt stack 28
  2138                           
  2139                           ;LCD_Game_Printer.c: 63: for(int i = 0; i < 20; i++)
  2140                           
  2141                           ;incstack = 0
  2142  001676  0E00               	movlw	0
  2143  001678  6E15               	movwf	waitASec@i+1,c
  2144  00167A  0E00               	movlw	0
  2145  00167C  6E14               	movwf	waitASec@i,c
  2146  00167E                     l2060:
  2147  00167E  BE15               	btfsc	waitASec@i+1,7,c
  2148  001680  D006               	goto	l265
  2149  001682  5015               	movf	waitASec@i+1,w,c
  2150  001684  E10E               	bnz	l267
  2151  001686  0E14               	movlw	20
  2152  001688  5C14               	subwf	waitASec@i,w,c
  2153  00168A  B0D8               	btfsc	status,0,c
  2154  00168C  0012               	return	
  2155  00168E                     l265:
  2156                           
  2157                           ;LCD_Game_Printer.c: 64: _delay((unsigned long)((50)*(8000000/4000.0)));
  2158  00168E  0E82               	movlw	130
  2159  001690  6E13               	movwf	??_waitASec& (0+255),c
  2160  001692  0EDE               	movlw	222
  2161  001694                     u1397:
  2162  001694  2EE8               	decfsz	wreg,f,c
  2163  001696  D7FE               	bra	u1397
  2164  001698  2E13               	decfsz	??_waitASec& (0+255),f,c
  2165  00169A  D7FC               	bra	u1397
  2166  00169C  4A14               	infsnz	waitASec@i,f,c
  2167  00169E  2A15               	incf	waitASec@i+1,f,c
  2168  0016A0  D7EE               	goto	l2060
  2169  0016A2                     l267:
  2170  0016A2  0012               	return		;funcret
  2171  0016A4                     __end_of_waitASec:
  2172                           	opt stack 0
  2173                           tblptru	equ	0xFF8
  2174                           tblptrh	equ	0xFF7
  2175                           tblptrl	equ	0xFF6
  2176                           tablat	equ	0xFF5
  2177                           intcon	equ	0xFF2
  2178                           intcon2	equ	0xFF1
  2179                           intcon3	equ	0xFF0
  2180                           postinc0	equ	0xFEE
  2181                           wreg	equ	0xFE8
  2182                           postdec1	equ	0xFE5
  2183                           fsr1l	equ	0xFE1
  2184                           status	equ	0xFD8
  2185                           
  2186 ;; *************** function _printEndGame *****************
  2187 ;; Defined at:
  2188 ;;		line 50 in file "LCD_Game_Printer.c"
  2189 ;; Parameters:    Size  Location     Type
  2190 ;;  nbPoints        2   44[COMRAM] unsigned int 
  2191 ;; Auto vars:     Size  Location     Type
  2192 ;;  statArray       3   46[COMRAM] unsigned char [3]
  2193 ;; Return value:  Size  Location     Type
  2194 ;;                  1    wreg      void 
  2195 ;; Registers used:
  2196 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2197 ;; Tracked objects:
  2198 ;;		On entry : 0/0
  2199 ;;		On exit  : 0/0
  2200 ;;		Unchanged: 0/0
  2201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2202 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2203 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2204 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2205 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2206 ;;Total ram usage:        5 bytes
  2207 ;; Hardware stack levels used:    1
  2208 ;; Hardware stack levels required when called:    5
  2209 ;; This function calls:
  2210 ;;		_clearDisplay
  2211 ;;		_moveCursor
  2212 ;;		_putStringLCD
  2213 ;;		_sprintf
  2214 ;; This function is called by:
  2215 ;;		_main
  2216 ;; This function uses a non-reentrant model
  2217 ;;
  2218                           
  2219                           	psect	text15
  2220  00135A                     __ptext15:
  2221                           	opt stack 0
  2222  00135A                     _printEndGame:
  2223                           	opt stack 25
  2224                           
  2225                           ;LCD_Game_Printer.c: 51: clearDisplay();
  2226                           
  2227                           ;incstack = 0
  2228  00135A  ECA9  F00B         	call	_clearDisplay	;wreg free
  2229                           
  2230                           ;LCD_Game_Printer.c: 53: unsigned char statArray[3];
  2231                           ;LCD_Game_Printer.c: 54: sprintf(statArray, "%d", nbPoints);
  2232  00135E  0E2F               	movlw	low printEndGame@statArray
  2233  001360  6E1F               	movwf	sprintf@sp,c
  2234  001362  0E00               	movlw	high printEndGame@statArray
  2235  001364  6E20               	movwf	sprintf@sp+1,c
  2236  001366  0E64               	movlw	low STR_4
  2237  001368  6E21               	movwf	sprintf@f,c
  2238  00136A  0E0E               	movlw	high STR_4
  2239  00136C  6E22               	movwf	sprintf@f+1,c
  2240  00136E  C02D  F023         	movff	printEndGame@nbPoints,?_sprintf+4
  2241  001372  C02E  F024         	movff	printEndGame@nbPoints+1,?_sprintf+5
  2242  001376  EC25  F008         	call	_sprintf	;wreg free
  2243                           
  2244                           ;LCD_Game_Printer.c: 55: putStringLCD("E  N  D   G  A  M  E ");
  2245  00137A  0E0B               	movlw	low STR_8
  2246  00137C  6E17               	movwf	putStringLCD@input,c
  2247  00137E  0E0E               	movlw	high STR_8
  2248  001380  6E18               	movwf	putStringLCD@input+1,c
  2249  001382  EC3E  F009         	call	_putStringLCD	;wreg free
  2250                           
  2251                           ;LCD_Game_Printer.c: 56: moveCursor(1,0);
  2252  001386  0E00               	movlw	0
  2253  001388  6E17               	movwf	moveCursor@row+1,c
  2254  00138A  0E01               	movlw	1
  2255  00138C  6E16               	movwf	moveCursor@row,c
  2256  00138E  0E00               	movlw	0
  2257  001390  6E19               	movwf	moveCursor@col+1,c
  2258  001392  0E00               	movlw	0
  2259  001394  6E18               	movwf	moveCursor@col,c
  2260  001396  EC2C  F00A         	call	_moveCursor	;wreg free
  2261                           
  2262                           ;LCD_Game_Printer.c: 58: putStringLCD("POINTS ");
  2263  00139A  0E59               	movlw	low STR_9
  2264  00139C  6E17               	movwf	putStringLCD@input,c
  2265  00139E  0E0E               	movlw	high STR_9
  2266  0013A0  6E18               	movwf	putStringLCD@input+1,c
  2267  0013A2  EC3E  F009         	call	_putStringLCD	;wreg free
  2268                           
  2269                           ;LCD_Game_Printer.c: 59: putStringLCD(statArray);
  2270  0013A6  0E2F               	movlw	low printEndGame@statArray
  2271  0013A8  6E17               	movwf	putStringLCD@input,c
  2272  0013AA  0E00               	movlw	high printEndGame@statArray
  2273  0013AC  6E18               	movwf	putStringLCD@input+1,c
  2274  0013AE  EC3E  F009         	call	_putStringLCD	;wreg free
  2275  0013B2  0012               	return		;funcret
  2276  0013B4                     __end_of_printEndGame:
  2277                           	opt stack 0
  2278                           tblptru	equ	0xFF8
  2279                           tblptrh	equ	0xFF7
  2280                           tblptrl	equ	0xFF6
  2281                           tablat	equ	0xFF5
  2282                           intcon	equ	0xFF2
  2283                           intcon2	equ	0xFF1
  2284                           intcon3	equ	0xFF0
  2285                           postinc0	equ	0xFEE
  2286                           wreg	equ	0xFE8
  2287                           postdec1	equ	0xFE5
  2288                           fsr1l	equ	0xFE1
  2289                           status	equ	0xFD8
  2290                           
  2291 ;; *************** function _sprintf *****************
  2292 ;; Defined at:
  2293 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\doprnt.c"
  2294 ;; Parameters:    Size  Location     Type
  2295 ;;  sp              2   30[COMRAM] PTR unsigned char 
  2296 ;;		 -> printEndGame@statArray(3), printStat@statArray(3), 
  2297 ;;  f               2   32[COMRAM] PTR const unsigned char 
  2298 ;;		 -> STR_7(3), STR_4(3), 
  2299 ;; Auto vars:     Size  Location     Type
  2300 ;;  tmpval          4    0        struct .
  2301 ;;  cp              3    0        PTR const unsigned char 
  2302 ;;  val             2   41[COMRAM] unsigned int 
  2303 ;;  ap              2   37[COMRAM] PTR void [1]
  2304 ;;		 -> ?_sprintf(2), 
  2305 ;;  len             2    0        unsigned int 
  2306 ;;  c               1   43[COMRAM] char 
  2307 ;;  prec            1   40[COMRAM] char 
  2308 ;;  flag            1   39[COMRAM] unsigned char 
  2309 ;; Return value:  Size  Location     Type
  2310 ;;                  2   30[COMRAM] int 
  2311 ;; Registers used:
  2312 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2313 ;; Tracked objects:
  2314 ;;		On entry : 0/0
  2315 ;;		On exit  : 0/0
  2316 ;;		Unchanged: 0/0
  2317 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2318 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2319 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2320 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2321 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2322 ;;Total ram usage:       14 bytes
  2323 ;; Hardware stack levels used:    1
  2324 ;; Hardware stack levels required when called:    2
  2325 ;; This function calls:
  2326 ;;		___lwdiv
  2327 ;;		___lwmod
  2328 ;; This function is called by:
  2329 ;;		_printStat
  2330 ;;		_printEndGame
  2331 ;; This function uses a non-reentrant model
  2332 ;;
  2333                           
  2334                           	psect	text16
  2335  00104A                     __ptext16:
  2336                           	opt stack 0
  2337  00104A                     _sprintf:
  2338                           	opt stack 26
  2339                           
  2340                           ;doprnt.c: 494: va_list ap;
  2341                           ;doprnt.c: 499: signed char c;
  2342                           ;doprnt.c: 506: signed char prec;
  2343                           ;doprnt.c: 508: unsigned char flag;
  2344                           ;doprnt.c: 523: union {
  2345                           ;doprnt.c: 524: unsigned long vd;
  2346                           ;doprnt.c: 525: double integ;
  2347                           ;doprnt.c: 526: } tmpval;
  2348                           ;doprnt.c: 528: unsigned int val;
  2349                           ;doprnt.c: 529: unsigned len;
  2350                           ;doprnt.c: 530: const char * cp;
  2351                           ;doprnt.c: 533: *ap = __va_start();
  2352                           
  2353                           ;incstack = 0
  2354  00104A  0E23               	movlw	low (?_sprintf+4)
  2355  00104C  6E26               	movwf	sprintf@ap,c
  2356  00104E  0E00               	movlw	high (?_sprintf+4)
  2357  001050  6E27               	movwf	sprintf@ap+1,c
  2358                           
  2359                           ;doprnt.c: 536: while(c = *f++) {
  2360  001052  D094               	goto	u1110
  2361  001054                     
  2362                           ;doprnt.c: 538: if(c != '%')
  2363  001054  0E25               	movlw	37
  2364  001056  182C               	xorwf	sprintf@c,w,c
  2365  001058  B4D8               	btfsc	status,2,c
  2366  00105A  D009               	goto	l369
  2367                           
  2368                           ;doprnt.c: 540: {
  2369                           ;doprnt.c: 541: ((*sp++ = (c)));
  2370  00105C  C01F  FFD9         	movff	sprintf@sp,fsr2l
  2371  001060  C020  FFDA         	movff	sprintf@sp+1,fsr2h
  2372  001064  C02C  FFDF         	movff	sprintf@c,indf2
  2373  001068  4A1F               	infsnz	sprintf@sp,f,c
  2374  00106A  2A20               	incf	sprintf@sp+1,f,c
  2375                           
  2376                           ;doprnt.c: 542: continue;
  2377  00106C  D087               	goto	u1110
  2378  00106E                     l369:
  2379                           
  2380                           ;doprnt.c: 543: }
  2381                           ;doprnt.c: 548: flag = 0;
  2382  00106E  0E00               	movlw	0
  2383  001070  6E28               	movwf	sprintf@flag,c
  2384                           
  2385                           ;doprnt.c: 822: }
  2386                           
  2387                           ;doprnt.c: 813: continue;
  2388                           
  2389                           ;doprnt.c: 802: default:
  2390                           
  2391                           ;doprnt.c: 698: case 'i':
  2392                           ;doprnt.c: 699: break;
  2393                           
  2394                           ;doprnt.c: 697: case 'd':
  2395                           
  2396                           ;doprnt.c: 638: goto alldone;
  2397                           
  2398                           ;doprnt.c: 637: case 0:
  2399                           
  2400                           ;doprnt.c: 635: switch(c = *f++) {
  2401  001072  C021  FFF6         	movff	sprintf@f,tblptrl
  2402  001076  C022  FFF7         	movff	sprintf@f+1,tblptrh
  2403  00107A  4A21               	infsnz	sprintf@f,f,c
  2404  00107C  2A22               	incf	sprintf@f+1,f,c
  2405  00107E                     	if	0	;tblptru may be non-zero
  2406  00107E                     	endif
  2407  00107E                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2408  00107E  0E00               	movlw	low (__mediumconst shr (0+16))
  2409  001080  6EF8               	movwf	tblptru,c
  2410  001082                     	endif
  2411  001082  0008               	tblrd		*
  2412  001084  CFF5 F02C          	movff	tablat,sprintf@c
  2413  001088  502C               	movf	sprintf@c,w,c
  2414                           
  2415                           ; Switch size 1, requested type "space"
  2416                           ; Number of cases is 3, Range of values is 0 to 105
  2417                           ; switch strategies available:
  2418                           ; Name         Instructions Cycles
  2419                           ; simple_byte           10     6 (average)
  2420                           ;	Chosen strategy is simple_byte
  2421  00108A  0A00               	xorlw	0	; case 0
  2422  00108C  B4D8               	btfsc	status,2,c
  2423  00108E  D084               	goto	u1120
  2424  001090  0A64               	xorlw	100	; case 100
  2425  001092  B4D8               	btfsc	status,2,c
  2426  001094  D003               	goto	l375
  2427  001096  0A0D               	xorlw	13	; case 105
  2428  001098  A4D8               	btfss	status,2,c
  2429  00109A  D070               	goto	u1110
  2430  00109C                     l375:
  2431                           
  2432                           ;doprnt.c: 1253: {
  2433                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2434  00109C  C026  FFD9         	movff	sprintf@ap,fsr2l
  2435  0010A0  C027  FFDA         	movff	sprintf@ap+1,fsr2h
  2436  0010A4  CFDE F02A          	movff	postinc2,sprintf@val
  2437  0010A8  CFDD F02B          	movff	postdec2,sprintf@val+1
  2438  0010AC  0E02               	movlw	2
  2439  0010AE  2626               	addwf	sprintf@ap,f,c
  2440  0010B0  0E00               	movlw	0
  2441  0010B2  2227               	addwfc	sprintf@ap+1,f,c
  2442                           
  2443                           ;doprnt.c: 1261: if((int)val < 0) {
  2444  0010B4  AE2B               	btfss	sprintf@val+1,7,c
  2445  0010B6  D006               	goto	l377
  2446                           
  2447                           ;doprnt.c: 1262: flag |= 0x03;
  2448  0010B8  0E03               	movlw	3
  2449  0010BA  1228               	iorwf	sprintf@flag,f,c
  2450                           
  2451                           ;doprnt.c: 1263: val = -val;
  2452  0010BC  6C2A               	negf	sprintf@val,c
  2453  0010BE  1E2B               	comf	sprintf@val+1,f,c
  2454  0010C0  B0D8               	btfsc	status,0,c
  2455  0010C2  2A2B               	incf	sprintf@val+1,f,c
  2456  0010C4                     l377:
  2457                           
  2458                           ;doprnt.c: 1264: }
  2459                           ;doprnt.c: 1266: }
  2460                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2461  0010C4  0E01               	movlw	1
  2462  0010C6  6E2C               	movwf	sprintf@c,c
  2463  0010C8                     l2008:
  2464  0010C8  0E05               	movlw	5
  2465  0010CA  182C               	xorwf	sprintf@c,w,c
  2466  0010CC  B4D8               	btfsc	status,2,c
  2467  0010CE  D015               	goto	u1090
  2468                           
  2469                           ;doprnt.c: 1306: if(val < dpowers[c])
  2470  0010D0  502C               	movf	sprintf@c,w,c
  2471  0010D2  0D02               	mullw	2
  2472  0010D4  0E01               	movlw	low _dpowers
  2473  0010D6  24F3               	addwf	prodl,w,c
  2474  0010D8  6EF6               	movwf	tblptrl,c
  2475  0010DA  0E0E               	movlw	high _dpowers
  2476  0010DC  20F4               	addwfc	prodh,w,c
  2477  0010DE  6EF7               	movwf	tblptrh,c
  2478  0010E0                     	if	1	;There are 3 active tblptr bytes
  2479  0010E0  6AF8               	clrf	tblptru,c
  2480  0010E2  0E00               	movlw	low (__mediumconst shr (0+16))
  2481  0010E4  22F8               	addwfc	tblptru,f,c
  2482  0010E6                     	endif
  2483  0010E6  0009               	tblrd		*+
  2484  0010E8  50F5               	movf	tablat,w,c
  2485  0010EA  5C2A               	subwf	sprintf@val,w,c
  2486  0010EC  0009               	tblrd		*+
  2487  0010EE  50F5               	movf	tablat,w,c
  2488  0010F0  582B               	subwfb	sprintf@val+1,w,c
  2489  0010F2  A0D8               	btfss	status,0,c
  2490  0010F4  D002               	goto	u1090
  2491                           
  2492                           ;doprnt.c: 1307: break;
  2493  0010F6  2A2C               	incf	sprintf@c,f,c
  2494  0010F8  D7E7               	goto	l2008
  2495  0010FA                     u1090:
  2496                           
  2497                           ;doprnt.c: 1422: {
  2498                           ;doprnt.c: 1438: if(flag & 0x03)
  2499  0010FA  C028  F025         	movff	sprintf@flag,??_sprintf
  2500  0010FE  0E03               	movlw	3
  2501  001100  1625               	andwf	??_sprintf,f,c
  2502  001102  B4D8               	btfsc	status,2,c
  2503  001104  D008               	goto	l381
  2504                           
  2505                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  2506  001106  C01F  FFD9         	movff	sprintf@sp,fsr2l
  2507  00110A  C020  FFDA         	movff	sprintf@sp+1,fsr2h
  2508  00110E  0E2D               	movlw	45
  2509  001110  6EDF               	movwf	indf2,c
  2510  001112  4A1F               	infsnz	sprintf@sp,f,c
  2511  001114  2A20               	incf	sprintf@sp+1,f,c
  2512  001116                     l381:
  2513                           
  2514                           ;doprnt.c: 1469: }
  2515                           ;doprnt.c: 1472: prec = c;
  2516  001116  C02C  F029         	movff	sprintf@c,sprintf@prec
  2517                           
  2518                           ;doprnt.c: 1474: while(prec--) {
  2519  00111A  D02C               	goto	l382
  2520  00111C                     
  2521                           ;doprnt.c: 1478: {
  2522                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2523  00111C  5029               	movf	sprintf@prec,w,c
  2524  00111E  0D02               	mullw	2
  2525  001120  0E01               	movlw	low _dpowers
  2526  001122  24F3               	addwf	prodl,w,c
  2527  001124  6EF6               	movwf	tblptrl,c
  2528  001126  0E0E               	movlw	high _dpowers
  2529  001128  20F4               	addwfc	prodh,w,c
  2530  00112A  6EF7               	movwf	tblptrh,c
  2531  00112C                     	if	1	;There are 3 active tblptr bytes
  2532  00112C  6AF8               	clrf	tblptru,c
  2533  00112E  0E00               	movlw	low (__mediumconst shr (0+16))
  2534  001130  22F8               	addwfc	tblptru,f,c
  2535  001132                     	endif
  2536  001132  0009               	tblrd		*+
  2537  001134  CFF5 F015          	movff	tablat,___lwdiv@divisor
  2538  001138  000A               	tblrd		*-
  2539  00113A  CFF5 F016          	movff	tablat,___lwdiv@divisor+1
  2540  00113E  C02A  F013         	movff	sprintf@val,___lwdiv@dividend
  2541  001142  C02B  F014         	movff	sprintf@val+1,___lwdiv@dividend+1
  2542  001146  ECDA  F009         	call	___lwdiv	;wreg free
  2543  00114A  C013  F01A         	movff	?___lwdiv,___lwmod@dividend
  2544  00114E  C014  F01B         	movff	?___lwdiv+1,___lwmod@dividend+1
  2545  001152  0E00               	movlw	0
  2546  001154  6E1D               	movwf	___lwmod@divisor+1,c
  2547  001156  0E0A               	movlw	10
  2548  001158  6E1C               	movwf	___lwmod@divisor,c
  2549  00115A  EC74  F00A         	call	___lwmod	;wreg free
  2550  00115E  501A               	movf	?___lwmod,w,c
  2551  001160  0F30               	addlw	48
  2552  001162  6E2C               	movwf	sprintf@c,c
  2553                           
  2554                           ;doprnt.c: 1523: }
  2555                           ;doprnt.c: 1524: ((*sp++ = (c)));
  2556  001164  C01F  FFD9         	movff	sprintf@sp,fsr2l
  2557  001168  C020  FFDA         	movff	sprintf@sp+1,fsr2h
  2558  00116C  C02C  FFDF         	movff	sprintf@c,indf2
  2559  001170  4A1F               	infsnz	sprintf@sp,f,c
  2560  001172  2A20               	incf	sprintf@sp+1,f,c
  2561  001174                     l382:
  2562  001174  0629               	decf	sprintf@prec,f,c
  2563  001176  2829               	incf	sprintf@prec,w,c
  2564  001178  A4D8               	btfss	status,2,c
  2565  00117A  D7D0               	goto	l383
  2566  00117C                     u1110:
  2567  00117C  C021  FFF6         	movff	sprintf@f,tblptrl
  2568  001180  C022  FFF7         	movff	sprintf@f+1,tblptrh
  2569  001184  4A21               	infsnz	sprintf@f,f,c
  2570  001186  2A22               	incf	sprintf@f+1,f,c
  2571  001188                     	if	0	;tblptru may be non-zero
  2572  001188                     	endif
  2573  001188                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2574  001188  0E00               	movlw	low (__mediumconst shr (0+16))
  2575  00118A  6EF8               	movwf	tblptru,c
  2576  00118C                     	endif
  2577  00118C  0008               	tblrd		*
  2578  00118E  CFF5 F02C          	movff	tablat,sprintf@c
  2579  001192  502C               	movf	sprintf@c,w,c
  2580  001194  A4D8               	btfss	status,2,c
  2581  001196  D75E               	goto	l368
  2582  001198                     u1120:
  2583                           
  2584                           ;doprnt.c: 1538: *sp = 0;
  2585                           
  2586                           ;doprnt.c: 1525: }
  2587                           ;doprnt.c: 1533: }
  2588                           ;doprnt.c: 1535: alldone:
  2589  001198  C01F  FFD9         	movff	sprintf@sp,fsr2l
  2590  00119C  C020  FFDA         	movff	sprintf@sp+1,fsr2h
  2591  0011A0  0E00               	movlw	0
  2592  0011A2  6EDF               	movwf	indf2,c
  2593  0011A4  0012               	return	
  2594  0011A6                     __end_of_sprintf:
  2595                           	opt stack 0
  2596                           tblptru	equ	0xFF8
  2597                           tblptrh	equ	0xFF7
  2598                           tblptrl	equ	0xFF6
  2599                           tablat	equ	0xFF5
  2600                           prodh	equ	0xFF4
  2601                           prodl	equ	0xFF3
  2602                           intcon	equ	0xFF2
  2603                           intcon2	equ	0xFF1
  2604                           intcon3	equ	0xFF0
  2605                           postinc0	equ	0xFEE
  2606                           wreg	equ	0xFE8
  2607                           postdec1	equ	0xFE5
  2608                           fsr1l	equ	0xFE1
  2609                           indf2	equ	0xFDF
  2610                           postinc2	equ	0xFDE
  2611                           postdec2	equ	0xFDD
  2612                           fsr2h	equ	0xFDA
  2613                           fsr2l	equ	0xFD9
  2614                           status	equ	0xFD8
  2615                           
  2616 ;; *************** function ___lwmod *****************
  2617 ;; Defined at:
  2618 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lwmod.c"
  2619 ;; Parameters:    Size  Location     Type
  2620 ;;  dividend        2   25[COMRAM] unsigned int 
  2621 ;;  divisor         2   27[COMRAM] unsigned int 
  2622 ;; Auto vars:     Size  Location     Type
  2623 ;;  counter         1   29[COMRAM] unsigned char 
  2624 ;; Return value:  Size  Location     Type
  2625 ;;                  2   25[COMRAM] unsigned int 
  2626 ;; Registers used:
  2627 ;;		wreg, status,2, status,0
  2628 ;; Tracked objects:
  2629 ;;		On entry : 0/0
  2630 ;;		On exit  : 0/0
  2631 ;;		Unchanged: 0/0
  2632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2633 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2634 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2635 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2636 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2637 ;;Total ram usage:        5 bytes
  2638 ;; Hardware stack levels used:    1
  2639 ;; Hardware stack levels required when called:    1
  2640 ;; This function calls:
  2641 ;;		Nothing
  2642 ;; This function is called by:
  2643 ;;		_sprintf
  2644 ;; This function uses a non-reentrant model
  2645 ;;
  2646                           
  2647                           	psect	text17
  2648  0014E8                     __ptext17:
  2649                           	opt stack 0
  2650  0014E8                     ___lwmod:
  2651                           	opt stack 26
  2652                           
  2653                           ;incstack = 0
  2654  0014E8  501C               	movf	___lwmod@divisor,w,c
  2655  0014EA  101D               	iorwf	___lwmod@divisor+1,w,c
  2656  0014EC  B4D8               	btfsc	status,2,c
  2657  0014EE  D018               	goto	l805
  2658  0014F0  0E01               	movlw	1
  2659  0014F2  6E1E               	movwf	___lwmod@counter,c
  2660  0014F4  D004               	goto	l800
  2661  0014F6  90D8               	bcf	status,0,c
  2662  0014F8  361C               	rlcf	___lwmod@divisor,f,c
  2663  0014FA  361D               	rlcf	___lwmod@divisor+1,f,c
  2664  0014FC  2A1E               	incf	___lwmod@counter,f,c
  2665  0014FE                     l800:
  2666  0014FE  AE1D               	btfss	___lwmod@divisor+1,7,c
  2667  001500  D7FA               	goto	l801
  2668  001502                     u1000:
  2669  001502  501C               	movf	___lwmod@divisor,w,c
  2670  001504  5C1A               	subwf	___lwmod@dividend,w,c
  2671  001506  501D               	movf	___lwmod@divisor+1,w,c
  2672  001508  581B               	subwfb	___lwmod@dividend+1,w,c
  2673  00150A  A0D8               	btfss	status,0,c
  2674  00150C  D004               	goto	l804
  2675  00150E  501C               	movf	___lwmod@divisor,w,c
  2676  001510  5E1A               	subwf	___lwmod@dividend,f,c
  2677  001512  501D               	movf	___lwmod@divisor+1,w,c
  2678  001514  5A1B               	subwfb	___lwmod@dividend+1,f,c
  2679  001516                     l804:
  2680  001516  90D8               	bcf	status,0,c
  2681  001518  321D               	rrcf	___lwmod@divisor+1,f,c
  2682  00151A  321C               	rrcf	___lwmod@divisor,f,c
  2683  00151C  2E1E               	decfsz	___lwmod@counter,f,c
  2684  00151E  D7F1               	goto	u1000
  2685  001520                     l805:
  2686  001520  C01A  F01A         	movff	___lwmod@dividend,?___lwmod
  2687  001524  C01B  F01B         	movff	___lwmod@dividend+1,?___lwmod+1
  2688  001528  0012               	return		;funcret
  2689  00152A                     __end_of___lwmod:
  2690                           	opt stack 0
  2691                           tblptru	equ	0xFF8
  2692                           tblptrh	equ	0xFF7
  2693                           tblptrl	equ	0xFF6
  2694                           tablat	equ	0xFF5
  2695                           prodh	equ	0xFF4
  2696                           prodl	equ	0xFF3
  2697                           intcon	equ	0xFF2
  2698                           intcon2	equ	0xFF1
  2699                           intcon3	equ	0xFF0
  2700                           postinc0	equ	0xFEE
  2701                           wreg	equ	0xFE8
  2702                           postdec1	equ	0xFE5
  2703                           fsr1l	equ	0xFE1
  2704                           indf2	equ	0xFDF
  2705                           postinc2	equ	0xFDE
  2706                           postdec2	equ	0xFDD
  2707                           fsr2h	equ	0xFDA
  2708                           fsr2l	equ	0xFD9
  2709                           status	equ	0xFD8
  2710                           
  2711 ;; *************** function ___lwdiv *****************
  2712 ;; Defined at:
  2713 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lwdiv.c"
  2714 ;; Parameters:    Size  Location     Type
  2715 ;;  dividend        2   18[COMRAM] unsigned int 
  2716 ;;  divisor         2   20[COMRAM] unsigned int 
  2717 ;; Auto vars:     Size  Location     Type
  2718 ;;  quotient        2   23[COMRAM] unsigned int 
  2719 ;;  counter         1   22[COMRAM] unsigned char 
  2720 ;; Return value:  Size  Location     Type
  2721 ;;                  2   18[COMRAM] unsigned int 
  2722 ;; Registers used:
  2723 ;;		wreg, status,2, status,0
  2724 ;; Tracked objects:
  2725 ;;		On entry : 0/0
  2726 ;;		On exit  : 0/0
  2727 ;;		Unchanged: 0/0
  2728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2729 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2730 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2731 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2732 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2733 ;;Total ram usage:        7 bytes
  2734 ;; Hardware stack levels used:    1
  2735 ;; Hardware stack levels required when called:    1
  2736 ;; This function calls:
  2737 ;;		Nothing
  2738 ;; This function is called by:
  2739 ;;		_sprintf
  2740 ;; This function uses a non-reentrant model
  2741 ;;
  2742                           
  2743                           	psect	text18
  2744  0013B4                     __ptext18:
  2745                           	opt stack 0
  2746  0013B4                     ___lwdiv:
  2747                           	opt stack 26
  2748                           
  2749                           ;incstack = 0
  2750  0013B4  0E00               	movlw	0
  2751  0013B6  6E19               	movwf	___lwdiv@quotient+1,c
  2752  0013B8  0E00               	movlw	0
  2753  0013BA  6E18               	movwf	___lwdiv@quotient,c
  2754  0013BC  5015               	movf	___lwdiv@divisor,w,c
  2755  0013BE  1016               	iorwf	___lwdiv@divisor+1,w,c
  2756  0013C0  B4D8               	btfsc	status,2,c
  2757  0013C2  D01C               	goto	l795
  2758  0013C4  0E01               	movlw	1
  2759  0013C6  6E17               	movwf	___lwdiv@counter,c
  2760  0013C8  D004               	goto	l790
  2761  0013CA  90D8               	bcf	status,0,c
  2762  0013CC  3615               	rlcf	___lwdiv@divisor,f,c
  2763  0013CE  3616               	rlcf	___lwdiv@divisor+1,f,c
  2764  0013D0  2A17               	incf	___lwdiv@counter,f,c
  2765  0013D2                     l790:
  2766  0013D2  AE16               	btfss	___lwdiv@divisor+1,7,c
  2767  0013D4  D7FA               	goto	l791
  2768  0013D6                     u970:
  2769  0013D6  90D8               	bcf	status,0,c
  2770  0013D8  3618               	rlcf	___lwdiv@quotient,f,c
  2771  0013DA  3619               	rlcf	___lwdiv@quotient+1,f,c
  2772  0013DC  5015               	movf	___lwdiv@divisor,w,c
  2773  0013DE  5C13               	subwf	___lwdiv@dividend,w,c
  2774  0013E0  5016               	movf	___lwdiv@divisor+1,w,c
  2775  0013E2  5814               	subwfb	___lwdiv@dividend+1,w,c
  2776  0013E4  A0D8               	btfss	status,0,c
  2777  0013E6  D005               	goto	l794
  2778  0013E8  5015               	movf	___lwdiv@divisor,w,c
  2779  0013EA  5E13               	subwf	___lwdiv@dividend,f,c
  2780  0013EC  5016               	movf	___lwdiv@divisor+1,w,c
  2781  0013EE  5A14               	subwfb	___lwdiv@dividend+1,f,c
  2782  0013F0  8018               	bsf	___lwdiv@quotient,0,c
  2783  0013F2                     l794:
  2784  0013F2  90D8               	bcf	status,0,c
  2785  0013F4  3216               	rrcf	___lwdiv@divisor+1,f,c
  2786  0013F6  3215               	rrcf	___lwdiv@divisor,f,c
  2787  0013F8  2E17               	decfsz	___lwdiv@counter,f,c
  2788  0013FA  D7ED               	goto	u970
  2789  0013FC                     l795:
  2790  0013FC  C018  F013         	movff	___lwdiv@quotient,?___lwdiv
  2791  001400  C019  F014         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2792  001404  0012               	return		;funcret
  2793  001406                     __end_of___lwdiv:
  2794                           	opt stack 0
  2795                           tblptru	equ	0xFF8
  2796                           tblptrh	equ	0xFF7
  2797                           tblptrl	equ	0xFF6
  2798                           tablat	equ	0xFF5
  2799                           prodh	equ	0xFF4
  2800                           prodl	equ	0xFF3
  2801                           intcon	equ	0xFF2
  2802                           intcon2	equ	0xFF1
  2803                           intcon3	equ	0xFF0
  2804                           postinc0	equ	0xFEE
  2805                           wreg	equ	0xFE8
  2806                           postdec1	equ	0xFE5
  2807                           fsr1l	equ	0xFE1
  2808                           indf2	equ	0xFDF
  2809                           postinc2	equ	0xFDE
  2810                           postdec2	equ	0xFDD
  2811                           fsr2h	equ	0xFDA
  2812                           fsr2l	equ	0xFD9
  2813                           status	equ	0xFD8
  2814                           
  2815 ;; *************** function _putStringLCD *****************
  2816 ;; Defined at:
  2817 ;;		line 49 in file "LCD_SPI.c"
  2818 ;; Parameters:    Size  Location     Type
  2819 ;;  input           2   22[COMRAM] PTR const unsigned char 
  2820 ;;		 -> STR_9(8), STR_8(22), printEndGame@statArray(3), STR_6(3), 
  2821 ;;		 -> STR_5(2), printStat@statArray(3), STR_3(20), STR_2(16), 
  2822 ;;		 -> STR_1(20), 
  2823 ;; Auto vars:     Size  Location     Type
  2824 ;;  i               2   26[COMRAM] int 
  2825 ;; Return value:  Size  Location     Type
  2826 ;;                  1    wreg      void 
  2827 ;; Registers used:
  2828 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2829 ;; Tracked objects:
  2830 ;;		On entry : 0/0
  2831 ;;		On exit  : 0/0
  2832 ;;		Unchanged: 0/0
  2833 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2834 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2835 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2836 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2837 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2838 ;;Total ram usage:        6 bytes
  2839 ;; Hardware stack levels used:    1
  2840 ;; Hardware stack levels required when called:    4
  2841 ;; This function calls:
  2842 ;;		_putchLCD
  2843 ;; This function is called by:
  2844 ;;		_printMBED
  2845 ;;		_printStartGame
  2846 ;;		_printStat
  2847 ;;		_printEndGame
  2848 ;; This function uses a non-reentrant model
  2849 ;;
  2850                           
  2851                           	psect	text19
  2852  00127C                     __ptext19:
  2853                           	opt stack 0
  2854  00127C                     _putStringLCD:
  2855                           	opt stack 25
  2856                           
  2857                           ;LCD_SPI.c: 51: int i;
  2858                           ;LCD_SPI.c: 52: for (i = 0; input[i] != '\0'; i++)
  2859                           
  2860                           ;incstack = 0
  2861  00127C  0E00               	movlw	0
  2862  00127E  6E1C               	movwf	putStringLCD@i+1,c
  2863  001280  0E00               	movlw	0
  2864  001282  6E1B               	movwf	putStringLCD@i,c
  2865  001284  D01B               	goto	l322
  2866  001286                     
  2867                           ;LCD_SPI.c: 53: {
  2868                           ;LCD_SPI.c: 54: putchLCD(input[i]);
  2869  001286  501B               	movf	putStringLCD@i,w,c
  2870  001288  2417               	addwf	putStringLCD@input,w,c
  2871  00128A  6E19               	movwf	??_putStringLCD& (0+255),c
  2872  00128C  501C               	movf	putStringLCD@i+1,w,c
  2873  00128E  2018               	addwfc	putStringLCD@input+1,w,c
  2874  001290  6E1A               	movwf	(??_putStringLCD+1)& (0+255),c
  2875  001292  C019  FFF6         	movff	??_putStringLCD,tblptrl
  2876  001296  C01A  FFF7         	movff	??_putStringLCD+1,tblptrh
  2877  00129A  0E00               	movlw	low (__smallconst shr (0+16))
  2878  00129C  6EF8               	movwf	tblptru,c
  2879  00129E  0E0D               	movlw	(high __ramtop+-1)
  2880  0012A0  64F7               	cpfsgt	tblptrh,c
  2881  0012A2  D003               	bra	u1027
  2882  0012A4  0008               	tblrd		*
  2883  0012A6  50F5               	movf	tablat,w,c
  2884  0012A8  D005               	bra	u1020
  2885  0012AA                     u1027:
  2886  0012AA  CFF6 FFE9          	movff	tblptrl,fsr0l
  2887  0012AE  CFF7 FFEA          	movff	tblptrh,fsr0h
  2888  0012B2  50EF               	movf	indf0,w,c
  2889  0012B4                     u1020:
  2890  0012B4  EC0C  F00B         	call	_putchLCD
  2891  0012B8  4A1B               	infsnz	putStringLCD@i,f,c
  2892  0012BA  2A1C               	incf	putStringLCD@i+1,f,c
  2893  0012BC                     l322:
  2894  0012BC  501B               	movf	putStringLCD@i,w,c
  2895  0012BE  2417               	addwf	putStringLCD@input,w,c
  2896  0012C0  6E19               	movwf	??_putStringLCD& (0+255),c
  2897  0012C2  501C               	movf	putStringLCD@i+1,w,c
  2898  0012C4  2018               	addwfc	putStringLCD@input+1,w,c
  2899  0012C6  6E1A               	movwf	(??_putStringLCD+1)& (0+255),c
  2900  0012C8  C019  FFF6         	movff	??_putStringLCD,tblptrl
  2901  0012CC  C01A  FFF7         	movff	??_putStringLCD+1,tblptrh
  2902  0012D0  0E00               	movlw	low (__smallconst shr (0+16))
  2903  0012D2  6EF8               	movwf	tblptru,c
  2904  0012D4  0E0D               	movlw	(high __ramtop+-1)
  2905  0012D6  64F7               	cpfsgt	tblptrh,c
  2906  0012D8  D003               	bra	u1037
  2907  0012DA  0008               	tblrd		*
  2908  0012DC  50F5               	movf	tablat,w,c
  2909  0012DE  D005               	bra	u1030
  2910  0012E0                     u1037:
  2911  0012E0  CFF6 FFE9          	movff	tblptrl,fsr0l
  2912  0012E4  CFF7 FFEA          	movff	tblptrh,fsr0h
  2913  0012E8  50EF               	movf	indf0,w,c
  2914  0012EA                     u1030:
  2915  0012EA  0900               	iorlw	0
  2916  0012EC  B4D8               	btfsc	status,2,c
  2917  0012EE  0012               	return	
  2918  0012F0  D7CA               	goto	l323
  2919  0012F2                     __end_of_putStringLCD:
  2920                           	opt stack 0
  2921                           tblptru	equ	0xFF8
  2922                           tblptrh	equ	0xFF7
  2923                           tblptrl	equ	0xFF6
  2924                           tablat	equ	0xFF5
  2925                           prodh	equ	0xFF4
  2926                           prodl	equ	0xFF3
  2927                           intcon	equ	0xFF2
  2928                           intcon2	equ	0xFF1
  2929                           intcon3	equ	0xFF0
  2930                           indf0	equ	0xFEF
  2931                           postinc0	equ	0xFEE
  2932                           fsr0h	equ	0xFEA
  2933                           fsr0l	equ	0xFE9
  2934                           wreg	equ	0xFE8
  2935                           postdec1	equ	0xFE5
  2936                           fsr1l	equ	0xFE1
  2937                           indf2	equ	0xFDF
  2938                           postinc2	equ	0xFDE
  2939                           postdec2	equ	0xFDD
  2940                           fsr2h	equ	0xFDA
  2941                           fsr2l	equ	0xFD9
  2942                           status	equ	0xFD8
  2943                           
  2944 ;; *************** function _putchLCD *****************
  2945 ;; Defined at:
  2946 ;;		line 58 in file "LCD_SPI.c"
  2947 ;; Parameters:    Size  Location     Type
  2948 ;;  input           1    wreg     unsigned char 
  2949 ;; Auto vars:     Size  Location     Type
  2950 ;;  input           1   21[COMRAM] unsigned char 
  2951 ;; Return value:  Size  Location     Type
  2952 ;;                  1    wreg      void 
  2953 ;; Registers used:
  2954 ;;		wreg, status,2, status,0, cstack
  2955 ;; Tracked objects:
  2956 ;;		On entry : 0/0
  2957 ;;		On exit  : 0/0
  2958 ;;		Unchanged: 0/0
  2959 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2960 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2961 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2962 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2963 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2964 ;;Total ram usage:        1 bytes
  2965 ;; Hardware stack levels used:    1
  2966 ;; Hardware stack levels required when called:    3
  2967 ;; This function calls:
  2968 ;;		_fliplr
  2969 ;;		_readBusyFlag
  2970 ;;		_spi_Send_Read
  2971 ;; This function is called by:
  2972 ;;		_putStringLCD
  2973 ;; This function uses a non-reentrant model
  2974 ;;
  2975                           
  2976                           	psect	text20
  2977  001618                     __ptext20:
  2978                           	opt stack 0
  2979  001618                     _putchLCD:
  2980                           	opt stack 25
  2981                           
  2982                           ;incstack = 0
  2983                           ;putchLCD@input stored from wreg
  2984  001618  6E16               	movwf	putchLCD@input,c
  2985                           
  2986                           ;LCD_SPI.c: 60: input = fliplr(input);
  2987  00161A  5016               	movf	putchLCD@input,w,c
  2988  00161C  EC03  F00A         	call	_fliplr
  2989  001620  6E16               	movwf	putchLCD@input,c
  2990  001622  ECF5  F00B         	call	_readBusyFlag	;wreg free
  2991  001626  0900               	iorlw	0
  2992  001628  A4D8               	btfss	status,2,c
  2993  00162A  D7FB               	goto	l329
  2994                           
  2995                           ;LCD_SPI.c: 63: LATDbits.LATD3 = 0;
  2996  00162C  968C               	bcf	3980,3,c	;volatile
  2997                           
  2998                           ;LCD_SPI.c: 64: spi_Send_Read(0xFA);
  2999  00162E  0EFA               	movlw	250
  3000  001630  EC0C  F00C         	call	_spi_Send_Read
  3001                           
  3002                           ;LCD_SPI.c: 65: spi_Send_Read(input & 0xF0);
  3003  001634  5016               	movf	putchLCD@input,w,c
  3004  001636  0BF0               	andlw	240
  3005  001638  EC0C  F00C         	call	_spi_Send_Read
  3006                           
  3007                           ;LCD_SPI.c: 66: spi_Send_Read(input << 4);
  3008  00163C  3816               	swapf	putchLCD@input,w,c
  3009  00163E  0BF0               	andlw	240
  3010  001640  EC0C  F00C         	call	_spi_Send_Read
  3011                           
  3012                           ;LCD_SPI.c: 67: LATDbits.LATD3 = 1;
  3013  001644  868C               	bsf	3980,3,c	;volatile
  3014  001646  0012               	return		;funcret
  3015  001648                     __end_of_putchLCD:
  3016                           	opt stack 0
  3017                           tblptru	equ	0xFF8
  3018                           tblptrh	equ	0xFF7
  3019                           tblptrl	equ	0xFF6
  3020                           tablat	equ	0xFF5
  3021                           prodh	equ	0xFF4
  3022                           prodl	equ	0xFF3
  3023                           intcon	equ	0xFF2
  3024                           intcon2	equ	0xFF1
  3025                           intcon3	equ	0xFF0
  3026                           indf0	equ	0xFEF
  3027                           postinc0	equ	0xFEE
  3028                           fsr0h	equ	0xFEA
  3029                           fsr0l	equ	0xFE9
  3030                           wreg	equ	0xFE8
  3031                           postdec1	equ	0xFE5
  3032                           fsr1l	equ	0xFE1
  3033                           indf2	equ	0xFDF
  3034                           postinc2	equ	0xFDE
  3035                           postdec2	equ	0xFDD
  3036                           fsr2h	equ	0xFDA
  3037                           fsr2l	equ	0xFD9
  3038                           status	equ	0xFD8
  3039                           
  3040 ;; *************** function _moveCursor *****************
  3041 ;; Defined at:
  3042 ;;		line 79 in file "LCD_SPI.c"
  3043 ;; Parameters:    Size  Location     Type
  3044 ;;  row             2   21[COMRAM] int 
  3045 ;;  col             2   23[COMRAM] int 
  3046 ;; Auto vars:     Size  Location     Type
  3047 ;;  address         1   25[COMRAM] unsigned char 
  3048 ;; Return value:  Size  Location     Type
  3049 ;;                  1    wreg      void 
  3050 ;; Registers used:
  3051 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3052 ;; Tracked objects:
  3053 ;;		On entry : 0/0
  3054 ;;		On exit  : 0/0
  3055 ;;		Unchanged: 0/0
  3056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3057 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3058 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3059 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3060 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3061 ;;Total ram usage:        5 bytes
  3062 ;; Hardware stack levels used:    1
  3063 ;; Hardware stack levels required when called:    3
  3064 ;; This function calls:
  3065 ;;		_fliplr
  3066 ;;		_readBusyFlag
  3067 ;;		_spi_Send_Read
  3068 ;; This function is called by:
  3069 ;;		_printMBED
  3070 ;;		_printStartGame
  3071 ;;		_printRemBullets
  3072 ;;		_printRemTime
  3073 ;;		_printPoints
  3074 ;;		_printEndGame
  3075 ;; This function uses a non-reentrant model
  3076 ;;
  3077                           
  3078                           	psect	text21
  3079  001458                     __ptext21:
  3080                           	opt stack 0
  3081  001458                     _moveCursor:
  3082                           	opt stack 26
  3083                           
  3084                           ;LCD_SPI.c: 81: char address = row * 20 + col;
  3085                           
  3086                           ;incstack = 0
  3087  001458  5016               	movf	moveCursor@row,w,c
  3088  00145A  0D14               	mullw	20
  3089  00145C  50F3               	movf	prodl,w,c
  3090  00145E  2418               	addwf	moveCursor@col,w,c
  3091  001460  6E1A               	movwf	moveCursor@address,c
  3092                           
  3093                           ;LCD_SPI.c: 82: if (row >= 2)
  3094  001462  BE17               	btfsc	moveCursor@row+1,7,c
  3095  001464  D008               	goto	l337
  3096  001466  5017               	movf	moveCursor@row+1,w,c
  3097  001468  E104               	bnz	u1130
  3098  00146A  0E02               	movlw	2
  3099  00146C  5C16               	subwf	moveCursor@row,w,c
  3100  00146E  A0D8               	btfss	status,0,c
  3101  001470  D002               	goto	l337
  3102  001472                     u1130:
  3103                           
  3104                           ;LCD_SPI.c: 83: {
  3105                           ;LCD_SPI.c: 84: address += 24;
  3106  001472  0E18               	movlw	24
  3107  001474  261A               	addwf	moveCursor@address,f,c
  3108  001476                     l337:
  3109                           
  3110                           ;LCD_SPI.c: 85: }
  3111                           ;LCD_SPI.c: 86: address = fliplr(address);
  3112  001476  501A               	movf	moveCursor@address,w,c
  3113  001478  EC03  F00A         	call	_fliplr
  3114  00147C  6E1A               	movwf	moveCursor@address,c
  3115  00147E  ECF5  F00B         	call	_readBusyFlag	;wreg free
  3116  001482  0900               	iorlw	0
  3117  001484  A4D8               	btfss	status,2,c
  3118  001486  D7FB               	goto	l339
  3119                           
  3120                           ;LCD_SPI.c: 88: LATDbits.LATD3 = 0;
  3121  001488  968C               	bcf	3980,3,c	;volatile
  3122                           
  3123                           ;LCD_SPI.c: 89: spi_Send_Read(0xF8);
  3124  00148A  0EF8               	movlw	248
  3125  00148C  EC0C  F00C         	call	_spi_Send_Read
  3126                           
  3127                           ;LCD_SPI.c: 90: spi_Send_Read(address & 0xF0);
  3128  001490  501A               	movf	moveCursor@address,w,c
  3129  001492  0BF0               	andlw	240
  3130  001494  EC0C  F00C         	call	_spi_Send_Read
  3131                           
  3132                           ;LCD_SPI.c: 91: spi_Send_Read((address << 4) | 0x10);
  3133  001498  381A               	swapf	moveCursor@address,w,c
  3134  00149A  0BF0               	andlw	240
  3135  00149C  0910               	iorlw	16
  3136  00149E  EC0C  F00C         	call	_spi_Send_Read
  3137  0014A2  0012               	return		;funcret
  3138  0014A4                     __end_of_moveCursor:
  3139                           	opt stack 0
  3140                           tblptru	equ	0xFF8
  3141                           tblptrh	equ	0xFF7
  3142                           tblptrl	equ	0xFF6
  3143                           tablat	equ	0xFF5
  3144                           prodh	equ	0xFF4
  3145                           prodl	equ	0xFF3
  3146                           intcon	equ	0xFF2
  3147                           intcon2	equ	0xFF1
  3148                           intcon3	equ	0xFF0
  3149                           indf0	equ	0xFEF
  3150                           postinc0	equ	0xFEE
  3151                           fsr0h	equ	0xFEA
  3152                           fsr0l	equ	0xFE9
  3153                           wreg	equ	0xFE8
  3154                           postdec1	equ	0xFE5
  3155                           fsr1l	equ	0xFE1
  3156                           indf2	equ	0xFDF
  3157                           postinc2	equ	0xFDE
  3158                           postdec2	equ	0xFDD
  3159                           fsr2h	equ	0xFDA
  3160                           fsr2l	equ	0xFD9
  3161                           status	equ	0xFD8
  3162                           
  3163 ;; *************** function _fliplr *****************
  3164 ;; Defined at:
  3165 ;;		line 70 in file "LCD_SPI.c"
  3166 ;; Parameters:    Size  Location     Type
  3167 ;;  input           1    wreg     unsigned char 
  3168 ;; Auto vars:     Size  Location     Type
  3169 ;;  input           1   20[COMRAM] unsigned char 
  3170 ;; Return value:  Size  Location     Type
  3171 ;;                  1    wreg      unsigned char 
  3172 ;; Registers used:
  3173 ;;		wreg, status,2, status,0
  3174 ;; Tracked objects:
  3175 ;;		On entry : 0/0
  3176 ;;		On exit  : 0/0
  3177 ;;		Unchanged: 0/0
  3178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3179 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3180 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3181 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3182 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3183 ;;Total ram usage:        3 bytes
  3184 ;; Hardware stack levels used:    1
  3185 ;; Hardware stack levels required when called:    1
  3186 ;; This function calls:
  3187 ;;		Nothing
  3188 ;; This function is called by:
  3189 ;;		_putchLCD
  3190 ;;		_moveCursor
  3191 ;; This function uses a non-reentrant model
  3192 ;;
  3193                           
  3194                           	psect	text22
  3195  001406                     __ptext22:
  3196                           	opt stack 0
  3197  001406                     _fliplr:
  3198                           	opt stack 26
  3199                           
  3200                           ;incstack = 0
  3201                           ;fliplr@input stored from wreg
  3202  001406  6E15               	movwf	fliplr@input,c
  3203                           
  3204                           ;LCD_SPI.c: 73: input = (input & 0xF0) >> 4 | (input & 0x0F) << 4;
  3205  001408  C015  F013         	movff	fliplr@input,??_fliplr
  3206  00140C  0E0F               	movlw	15
  3207  00140E  1613               	andwf	??_fliplr,f,c
  3208  001410  3A13               	swapf	??_fliplr,f,c
  3209  001412  0EF0               	movlw	240
  3210  001414  1613               	andwf	??_fliplr,f,c
  3211  001416  3815               	swapf	fliplr@input,w,c
  3212  001418  0B0F               	andlw	15
  3213  00141A  0B0F               	andlw	15
  3214  00141C  1013               	iorwf	??_fliplr,w,c
  3215  00141E  6E15               	movwf	fliplr@input,c
  3216                           
  3217                           ;LCD_SPI.c: 74: input = (input & 0xCC) >> 2 | (input & 0x33) << 2;
  3218  001420  C015  F013         	movff	fliplr@input,??_fliplr
  3219  001424  0E33               	movlw	51
  3220  001426  1613               	andwf	??_fliplr,f,c
  3221  001428  90D8               	bcf	status,0,c
  3222  00142A  3613               	rlcf	??_fliplr,f,c
  3223  00142C  90D8               	bcf	status,0,c
  3224  00142E  3613               	rlcf	??_fliplr,f,c
  3225  001430  4015               	rrncf	fliplr@input,w,c
  3226  001432  42E8               	rrncf	wreg,f,c
  3227  001434  0B3F               	andlw	63
  3228  001436  0B33               	andlw	51
  3229  001438  1013               	iorwf	??_fliplr,w,c
  3230  00143A  6E15               	movwf	fliplr@input,c
  3231                           
  3232                           ;LCD_SPI.c: 75: input = (input & 0xAA) >> 1 | (input & 0x55) << 1;
  3233  00143C  C015  F013         	movff	fliplr@input,??_fliplr
  3234  001440  0E55               	movlw	85
  3235  001442  1613               	andwf	??_fliplr,f,c
  3236  001444  90D8               	bcf	status,0,c
  3237  001446  3413               	rlcf	??_fliplr,w,c
  3238  001448  6E14               	movwf	(??_fliplr+1)& (0+255),c
  3239  00144A  90D8               	bcf	status,0,c
  3240  00144C  3015               	rrcf	fliplr@input,w,c
  3241  00144E  0B55               	andlw	85
  3242  001450  1014               	iorwf	??_fliplr+1,w,c
  3243  001452  6E15               	movwf	fliplr@input,c
  3244                           
  3245                           ;LCD_SPI.c: 77: return input;
  3246  001454  5015               	movf	fliplr@input,w,c
  3247  001456  0012               	return	
  3248  001458                     __end_of_fliplr:
  3249                           	opt stack 0
  3250                           tblptru	equ	0xFF8
  3251                           tblptrh	equ	0xFF7
  3252                           tblptrl	equ	0xFF6
  3253                           tablat	equ	0xFF5
  3254                           prodh	equ	0xFF4
  3255                           prodl	equ	0xFF3
  3256                           intcon	equ	0xFF2
  3257                           intcon2	equ	0xFF1
  3258                           intcon3	equ	0xFF0
  3259                           indf0	equ	0xFEF
  3260                           postinc0	equ	0xFEE
  3261                           fsr0h	equ	0xFEA
  3262                           fsr0l	equ	0xFE9
  3263                           wreg	equ	0xFE8
  3264                           postdec1	equ	0xFE5
  3265                           fsr1l	equ	0xFE1
  3266                           indf2	equ	0xFDF
  3267                           postinc2	equ	0xFDE
  3268                           postdec2	equ	0xFDD
  3269                           fsr2h	equ	0xFDA
  3270                           fsr2l	equ	0xFD9
  3271                           status	equ	0xFD8
  3272                           
  3273 ;; *************** function _initialisation_LCD *****************
  3274 ;; Defined at:
  3275 ;;		line 150 in file "LCD_SPI.c"
  3276 ;; Parameters:    Size  Location     Type
  3277 ;;		None
  3278 ;; Auto vars:     Size  Location     Type
  3279 ;;		None
  3280 ;; Return value:  Size  Location     Type
  3281 ;;                  1    wreg      void 
  3282 ;; Registers used:
  3283 ;;		wreg, status,2, status,0, cstack
  3284 ;; Tracked objects:
  3285 ;;		On entry : 0/0
  3286 ;;		On exit  : 0/0
  3287 ;;		Unchanged: 0/0
  3288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3289 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3290 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3291 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3292 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3293 ;;Total ram usage:        0 bytes
  3294 ;; Hardware stack levels used:    1
  3295 ;; Hardware stack levels required when called:    4
  3296 ;; This function calls:
  3297 ;;		_clearDisplay
  3298 ;;		_displayCtrl
  3299 ;;		_initialisation_PORT
  3300 ;;		_initialisation_SPI
  3301 ;; This function is called by:
  3302 ;;		_main
  3303 ;; This function uses a non-reentrant model
  3304 ;;
  3305                           
  3306                           	psect	text23
  3307  0017B4                     __ptext23:
  3308                           	opt stack 0
  3309  0017B4                     _initialisation_LCD:
  3310                           	opt stack 26
  3311                           
  3312                           ;LCD_SPI.c: 152: initialisation_PORT();
  3313                           
  3314                           ;incstack = 0
  3315  0017B4  EC95  F00A         	call	_initialisation_PORT	;wreg free
  3316                           
  3317                           ;LCD_SPI.c: 153: initialisation_SPI();
  3318  0017B8  ECB5  F00A         	call	_initialisation_SPI	;wreg free
  3319                           
  3320                           ;LCD_SPI.c: 154: clearDisplay();
  3321  0017BC  ECA9  F00B         	call	_clearDisplay	;wreg free
  3322                           
  3323                           ;LCD_SPI.c: 155: displayCtrl(1,1,0);
  3324  0017C0  0E01               	movlw	1
  3325  0017C2  6E15               	movwf	displayCtrl@cursor,c
  3326  0017C4  0E00               	movlw	0
  3327  0017C6  6E16               	movwf	displayCtrl@blink,c
  3328  0017C8  0E01               	movlw	1
  3329  0017CA  EC52  F00A         	call	_displayCtrl
  3330  0017CE  0012               	return		;funcret
  3331  0017D0                     __end_of_initialisation_LCD:
  3332                           	opt stack 0
  3333                           tblptru	equ	0xFF8
  3334                           tblptrh	equ	0xFF7
  3335                           tblptrl	equ	0xFF6
  3336                           tablat	equ	0xFF5
  3337                           prodh	equ	0xFF4
  3338                           prodl	equ	0xFF3
  3339                           intcon	equ	0xFF2
  3340                           intcon2	equ	0xFF1
  3341                           intcon3	equ	0xFF0
  3342                           indf0	equ	0xFEF
  3343                           postinc0	equ	0xFEE
  3344                           fsr0h	equ	0xFEA
  3345                           fsr0l	equ	0xFE9
  3346                           wreg	equ	0xFE8
  3347                           postdec1	equ	0xFE5
  3348                           fsr1l	equ	0xFE1
  3349                           indf2	equ	0xFDF
  3350                           postinc2	equ	0xFDE
  3351                           postdec2	equ	0xFDD
  3352                           fsr2h	equ	0xFDA
  3353                           fsr2l	equ	0xFD9
  3354                           status	equ	0xFD8
  3355                           
  3356 ;; *************** function _initialisation_SPI *****************
  3357 ;; Defined at:
  3358 ;;		line 113 in file "LCD_SPI.c"
  3359 ;; Parameters:    Size  Location     Type
  3360 ;;		None
  3361 ;; Auto vars:     Size  Location     Type
  3362 ;;		None
  3363 ;; Return value:  Size  Location     Type
  3364 ;;                  1    wreg      void 
  3365 ;; Registers used:
  3366 ;;		wreg, status,2, status,0
  3367 ;; Tracked objects:
  3368 ;;		On entry : 0/0
  3369 ;;		On exit  : 0/0
  3370 ;;		Unchanged: 0/0
  3371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3372 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3373 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3374 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3375 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3376 ;;Total ram usage:        0 bytes
  3377 ;; Hardware stack levels used:    1
  3378 ;; Hardware stack levels required when called:    1
  3379 ;; This function calls:
  3380 ;;		Nothing
  3381 ;; This function is called by:
  3382 ;;		_initialisation_LCD
  3383 ;; This function uses a non-reentrant model
  3384 ;;
  3385                           
  3386                           	psect	text24
  3387  00156A                     __ptext24:
  3388                           	opt stack 0
  3389  00156A                     _initialisation_SPI:
  3390                           	opt stack 28
  3391                           
  3392                           ;LCD_SPI.c: 117: RPOR24_25 |= 0x04;
  3393                           
  3394                           ;incstack = 0
  3395  00156A  010E               	movlb	14	; () banked
  3396  00156C  851E               	bsf	30,2,b	;volatile
  3397                           
  3398                           ; BSR set to: 14
  3399                           ;LCD_SPI.c: 118: RPOR24_25 &= 0xF4;
  3400  00156E  0EF4               	movlw	244
  3401  001570  010E               	movlb	14	; () banked
  3402  001572  171E               	andwf	30,f,b	;volatile
  3403                           
  3404                           ; BSR set to: 14
  3405                           ;LCD_SPI.c: 120: RPOR22_23 |= 0x05;
  3406  001574  0E05               	movlw	5
  3407  001576  010E               	movlb	14	; () banked
  3408  001578  131D               	iorwf	29,f,b	;volatile
  3409                           
  3410                           ; BSR set to: 14
  3411                           ;LCD_SPI.c: 121: RPOR22_23 &= 0xF5;
  3412  00157A  0EF5               	movlw	245
  3413  00157C  010E               	movlb	14	; () banked
  3414  00157E  171D               	andwf	29,f,b	;volatile
  3415                           
  3416                           ; BSR set to: 14
  3417                           ;LCD_SPI.c: 123: RPINR12_13 |= 0x50;
  3418  001580  0E50               	movlw	80
  3419  001582  010E               	movlb	14	; () banked
  3420  001584  1330               	iorwf	48,f,b	;volatile
  3421                           
  3422                           ; BSR set to: 14
  3423                           ;LCD_SPI.c: 124: RPINR12_13 &= 0x5F;
  3424  001586  0E5F               	movlw	95
  3425  001588  010E               	movlb	14	; () banked
  3426  00158A  1730               	andwf	48,f,b	;volatile
  3427                           
  3428                           ; BSR set to: 14
  3429                           ;LCD_SPI.c: 127: SSP2CON1 &= 0xF1;
  3430  00158C  0EF1               	movlw	241
  3431  00158E  010F               	movlb	15	; () banked
  3432  001590  1719               	andwf	25,f,b	;volatile
  3433                           
  3434                           ; BSR set to: 15
  3435                           ;LCD_SPI.c: 128: SSP2CON1 |= 0x31;
  3436  001592  0E31               	movlw	49
  3437  001594  010F               	movlb	15	; () banked
  3438  001596  1319               	iorwf	25,f,b	;volatile
  3439                           
  3440                           ; BSR set to: 15
  3441                           ;LCD_SPI.c: 129: SSP2STAT |= 0x80;
  3442  001598  010F               	movlb	15	; () banked
  3443  00159A  8F1A               	bsf	26,7,b	;volatile
  3444                           
  3445                           ; BSR set to: 15
  3446                           ;LCD_SPI.c: 130: SSP2STAT &= ~0x40;
  3447  00159C  010F               	movlb	15	; () banked
  3448  00159E  9D1A               	bcf	26,6,b	;volatile
  3449                           
  3450                           ; BSR set to: 15
  3451                           ;LCD_SPI.c: 131: SSP2CON3 &= 0x8F;
  3452  0015A0  0E8F               	movlw	143
  3453  0015A2  010F               	movlb	15	; () banked
  3454  0015A4  1739               	andwf	57,f,b	;volatile
  3455                           
  3456                           ; BSR set to: 15
  3457  0015A6  0012               	return		;funcret
  3458  0015A8                     __end_of_initialisation_SPI:
  3459                           	opt stack 0
  3460                           tblptru	equ	0xFF8
  3461                           tblptrh	equ	0xFF7
  3462                           tblptrl	equ	0xFF6
  3463                           tablat	equ	0xFF5
  3464                           prodh	equ	0xFF4
  3465                           prodl	equ	0xFF3
  3466                           intcon	equ	0xFF2
  3467                           intcon2	equ	0xFF1
  3468                           intcon3	equ	0xFF0
  3469                           indf0	equ	0xFEF
  3470                           postinc0	equ	0xFEE
  3471                           fsr0h	equ	0xFEA
  3472                           fsr0l	equ	0xFE9
  3473                           wreg	equ	0xFE8
  3474                           postdec1	equ	0xFE5
  3475                           fsr1l	equ	0xFE1
  3476                           indf2	equ	0xFDF
  3477                           postinc2	equ	0xFDE
  3478                           postdec2	equ	0xFDD
  3479                           fsr2h	equ	0xFDA
  3480                           fsr2l	equ	0xFD9
  3481                           status	equ	0xFD8
  3482                           
  3483 ;; *************** function _initialisation_PORT *****************
  3484 ;; Defined at:
  3485 ;;		line 135 in file "LCD_SPI.c"
  3486 ;; Parameters:    Size  Location     Type
  3487 ;;		None
  3488 ;; Auto vars:     Size  Location     Type
  3489 ;;		None
  3490 ;; Return value:  Size  Location     Type
  3491 ;;                  1    wreg      void 
  3492 ;; Registers used:
  3493 ;;		wreg, status,2, status,0
  3494 ;; Tracked objects:
  3495 ;;		On entry : 0/0
  3496 ;;		On exit  : 0/0
  3497 ;;		Unchanged: 0/0
  3498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3499 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3500 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3501 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3502 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3503 ;;Total ram usage:        1 bytes
  3504 ;; Hardware stack levels used:    1
  3505 ;; Hardware stack levels required when called:    1
  3506 ;; This function calls:
  3507 ;;		Nothing
  3508 ;; This function is called by:
  3509 ;;		_initialisation_LCD
  3510 ;; This function uses a non-reentrant model
  3511 ;;
  3512                           
  3513                           	psect	text25
  3514  00152A                     __ptext25:
  3515                           	opt stack 0
  3516  00152A                     _initialisation_PORT:
  3517                           	opt stack 28
  3518                           
  3519                           ;LCD_SPI.c: 137: OSCCON = OSCCON | 0b01110000;
  3520                           
  3521                           ; BSR set to: 15
  3522                           ;incstack = 0
  3523  00152A  50D3               	movf	4051,w,c	;volatile
  3524  00152C  0970               	iorlw	112
  3525  00152E  6ED3               	movwf	4051,c	;volatile
  3526                           
  3527                           ;LCD_SPI.c: 138: TRISDbits.TRISD4 = 0;
  3528  001530  9895               	bcf	3989,4,c	;volatile
  3529                           
  3530                           ;LCD_SPI.c: 139: TRISDbits.TRISD2 = 0;
  3531  001532  9495               	bcf	3989,2,c	;volatile
  3532                           
  3533                           ;LCD_SPI.c: 140: TRISDbits.TRISD3 = 0;
  3534  001534  9695               	bcf	3989,3,c	;volatile
  3535                           
  3536                           ;LCD_SPI.c: 141: TRISDbits.TRISD1 = 1;
  3537  001536  8295               	bsf	3989,1,c	;volatile
  3538                           
  3539                           ;LCD_SPI.c: 142: TRISCbits.TRISC0 = 0;
  3540  001538  9094               	bcf	3988,0,c	;volatile
  3541                           
  3542                           ;LCD_SPI.c: 143: LATDbits.LATD3 = 1;
  3543  00153A  868C               	bsf	3980,3,c	;volatile
  3544                           
  3545                           ;LCD_SPI.c: 144: __nop();
  3546  00153C  F000               	nop	
  3547                           
  3548                           ;LCD_SPI.c: 145: _delay((unsigned long)((33)*(8000000/4000.0)));
  3549  00153E  0E56               	movlw	86
  3550  001540  6E13               	movwf	??_initialisation_PORT& (0+255),c
  3551  001542  0EB6               	movlw	182
  3552  001544                     u1407:
  3553  001544  2EE8               	decfsz	wreg,f,c
  3554  001546  D7FE               	bra	u1407
  3555  001548  2E13               	decfsz	??_initialisation_PORT& (0+255),f,c
  3556  00154A  D7FC               	bra	u1407
  3557                           
  3558                           ;LCD_SPI.c: 146: _delay((unsigned long)((33)*(8000000/4000.0)));
  3559  00154C  0E56               	movlw	86
  3560  00154E  6E13               	movwf	??_initialisation_PORT& (0+255),c
  3561  001550  0EB6               	movlw	182
  3562  001552                     u1417:
  3563  001552  2EE8               	decfsz	wreg,f,c
  3564  001554  D7FE               	bra	u1417
  3565  001556  2E13               	decfsz	??_initialisation_PORT& (0+255),f,c
  3566  001558  D7FC               	bra	u1417
  3567                           
  3568                           ;LCD_SPI.c: 147: _delay((unsigned long)((33)*(8000000/4000.0)));
  3569  00155A  0E56               	movlw	86
  3570  00155C  6E13               	movwf	??_initialisation_PORT& (0+255),c
  3571  00155E  0EB6               	movlw	182
  3572  001560                     u1427:
  3573  001560  2EE8               	decfsz	wreg,f,c
  3574  001562  D7FE               	bra	u1427
  3575  001564  2E13               	decfsz	??_initialisation_PORT& (0+255),f,c
  3576  001566  D7FC               	bra	u1427
  3577  001568  0012               	return		;funcret
  3578  00156A                     __end_of_initialisation_PORT:
  3579                           	opt stack 0
  3580                           tblptru	equ	0xFF8
  3581                           tblptrh	equ	0xFF7
  3582                           tblptrl	equ	0xFF6
  3583                           tablat	equ	0xFF5
  3584                           prodh	equ	0xFF4
  3585                           prodl	equ	0xFF3
  3586                           intcon	equ	0xFF2
  3587                           intcon2	equ	0xFF1
  3588                           intcon3	equ	0xFF0
  3589                           indf0	equ	0xFEF
  3590                           postinc0	equ	0xFEE
  3591                           fsr0h	equ	0xFEA
  3592                           fsr0l	equ	0xFE9
  3593                           wreg	equ	0xFE8
  3594                           postdec1	equ	0xFE5
  3595                           fsr1l	equ	0xFE1
  3596                           indf2	equ	0xFDF
  3597                           postinc2	equ	0xFDE
  3598                           postdec2	equ	0xFDD
  3599                           fsr2h	equ	0xFDA
  3600                           fsr2l	equ	0xFD9
  3601                           status	equ	0xFD8
  3602                           
  3603 ;; *************** function _displayCtrl *****************
  3604 ;; Defined at:
  3605 ;;		line 31 in file "LCD_SPI.c"
  3606 ;; Parameters:    Size  Location     Type
  3607 ;;  display         1    wreg     unsigned char 
  3608 ;;  cursor          1   20[COMRAM] unsigned char 
  3609 ;;  blink           1   21[COMRAM] unsigned char 
  3610 ;; Auto vars:     Size  Location     Type
  3611 ;;  display         1   22[COMRAM] unsigned char 
  3612 ;;  BCD             1   23[COMRAM] unsigned char 
  3613 ;; Return value:  Size  Location     Type
  3614 ;;                  1    wreg      void 
  3615 ;; Registers used:
  3616 ;;		wreg, status,2, status,0, cstack
  3617 ;; Tracked objects:
  3618 ;;		On entry : 0/0
  3619 ;;		On exit  : 0/0
  3620 ;;		Unchanged: 0/0
  3621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3622 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3623 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3624 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3625 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3626 ;;Total ram usage:        4 bytes
  3627 ;; Hardware stack levels used:    1
  3628 ;; Hardware stack levels required when called:    3
  3629 ;; This function calls:
  3630 ;;		_readBusyFlag
  3631 ;;		_spi_Send_Read
  3632 ;; This function is called by:
  3633 ;;		_initialisation_LCD
  3634 ;; This function uses a non-reentrant model
  3635 ;;
  3636                           
  3637                           	psect	text26
  3638  0014A4                     __ptext26:
  3639                           	opt stack 0
  3640  0014A4                     _displayCtrl:
  3641                           	opt stack 26
  3642                           
  3643                           ;incstack = 0
  3644                           ;displayCtrl@display stored from wreg
  3645  0014A4  6E17               	movwf	displayCtrl@display,c
  3646                           
  3647                           ;LCD_SPI.c: 33: char BCD = blink;
  3648  0014A6  C016  F018         	movff	displayCtrl@blink,displayCtrl@BCD
  3649                           
  3650                           ;LCD_SPI.c: 34: BCD <<= 1;
  3651  0014AA  90D8               	bcf	status,0,c
  3652  0014AC  3618               	rlcf	displayCtrl@BCD,f,c
  3653                           
  3654                           ;LCD_SPI.c: 35: BCD += cursor;
  3655  0014AE  5015               	movf	displayCtrl@cursor,w,c
  3656  0014B0  2618               	addwf	displayCtrl@BCD,f,c
  3657                           
  3658                           ;LCD_SPI.c: 36: BCD <<= 1;
  3659  0014B2  90D8               	bcf	status,0,c
  3660  0014B4  3618               	rlcf	displayCtrl@BCD,f,c
  3661                           
  3662                           ;LCD_SPI.c: 37: BCD += display;
  3663  0014B6  5017               	movf	displayCtrl@display,w,c
  3664  0014B8  2618               	addwf	displayCtrl@BCD,f,c
  3665                           
  3666                           ;LCD_SPI.c: 38: BCD <<= 1;
  3667  0014BA  90D8               	bcf	status,0,c
  3668  0014BC  3618               	rlcf	displayCtrl@BCD,f,c
  3669                           
  3670                           ;LCD_SPI.c: 39: BCD += 1;
  3671  0014BE  2A18               	incf	displayCtrl@BCD,f,c
  3672                           
  3673                           ;LCD_SPI.c: 40: BCD <<= 4;
  3674  0014C0  3A18               	swapf	displayCtrl@BCD,f,c
  3675  0014C2  0EF0               	movlw	240
  3676  0014C4  1618               	andwf	displayCtrl@BCD,f,c
  3677  0014C6  ECF5  F00B         	call	_readBusyFlag	;wreg free
  3678  0014CA  0900               	iorlw	0
  3679  0014CC  A4D8               	btfss	status,2,c
  3680  0014CE  D7FB               	goto	l317
  3681                           
  3682                           ;LCD_SPI.c: 43: LATDbits.LATD3 = 0;
  3683  0014D0  968C               	bcf	3980,3,c	;volatile
  3684                           
  3685                           ;LCD_SPI.c: 44: spi_Send_Read(0xF8);
  3686  0014D2  0EF8               	movlw	248
  3687  0014D4  EC0C  F00C         	call	_spi_Send_Read
  3688                           
  3689                           ;LCD_SPI.c: 45: spi_Send_Read(BCD);
  3690  0014D8  5018               	movf	displayCtrl@BCD,w,c
  3691  0014DA  EC0C  F00C         	call	_spi_Send_Read
  3692                           
  3693                           ;LCD_SPI.c: 46: spi_Send_Read(0x00);
  3694  0014DE  0E00               	movlw	0
  3695  0014E0  EC0C  F00C         	call	_spi_Send_Read
  3696                           
  3697                           ;LCD_SPI.c: 47: LATDbits.LATD3 = 1;
  3698  0014E4  868C               	bsf	3980,3,c	;volatile
  3699  0014E6  0012               	return		;funcret
  3700  0014E8                     __end_of_displayCtrl:
  3701                           	opt stack 0
  3702                           tblptru	equ	0xFF8
  3703                           tblptrh	equ	0xFF7
  3704                           tblptrl	equ	0xFF6
  3705                           tablat	equ	0xFF5
  3706                           prodh	equ	0xFF4
  3707                           prodl	equ	0xFF3
  3708                           intcon	equ	0xFF2
  3709                           intcon2	equ	0xFF1
  3710                           intcon3	equ	0xFF0
  3711                           indf0	equ	0xFEF
  3712                           postinc0	equ	0xFEE
  3713                           fsr0h	equ	0xFEA
  3714                           fsr0l	equ	0xFE9
  3715                           wreg	equ	0xFE8
  3716                           postdec1	equ	0xFE5
  3717                           fsr1l	equ	0xFE1
  3718                           indf2	equ	0xFDF
  3719                           postinc2	equ	0xFDE
  3720                           postdec2	equ	0xFDD
  3721                           fsr2h	equ	0xFDA
  3722                           fsr2l	equ	0xFD9
  3723                           status	equ	0xFD8
  3724                           
  3725 ;; *************** function _clearDisplay *****************
  3726 ;; Defined at:
  3727 ;;		line 19 in file "LCD_SPI.c"
  3728 ;; Parameters:    Size  Location     Type
  3729 ;;		None
  3730 ;; Auto vars:     Size  Location     Type
  3731 ;;		None
  3732 ;; Return value:  Size  Location     Type
  3733 ;;                  1    wreg      void 
  3734 ;; Registers used:
  3735 ;;		wreg, status,2, status,0, cstack
  3736 ;; Tracked objects:
  3737 ;;		On entry : 0/0
  3738 ;;		On exit  : 0/0
  3739 ;;		Unchanged: 0/0
  3740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3741 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3742 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3743 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3744 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3745 ;;Total ram usage:        0 bytes
  3746 ;; Hardware stack levels used:    1
  3747 ;; Hardware stack levels required when called:    3
  3748 ;; This function calls:
  3749 ;;		_readBusyFlag
  3750 ;;		_spi_Send_Read
  3751 ;; This function is called by:
  3752 ;;		_printMBED
  3753 ;;		_printStartGame
  3754 ;;		_printEndGame
  3755 ;;		_initialisation_LCD
  3756 ;; This function uses a non-reentrant model
  3757 ;;
  3758                           
  3759                           	psect	text27
  3760  001752                     __ptext27:
  3761                           	opt stack 0
  3762  001752                     _clearDisplay:
  3763                           	opt stack 26
  3764                           
  3765                           ;LCD_SPI.c: 21: while(readBusyFlag());
  3766                           
  3767                           ;incstack = 0
  3768  001752  ECF5  F00B         	call	_readBusyFlag	;wreg free
  3769  001756  0900               	iorlw	0
  3770  001758  A4D8               	btfss	status,2,c
  3771  00175A  D7FB               	goto	_clearDisplay
  3772                           
  3773                           ;LCD_SPI.c: 23: LATDbits.LATD3 = 0;
  3774  00175C  968C               	bcf	3980,3,c	;volatile
  3775                           
  3776                           ;LCD_SPI.c: 24: spi_Send_Read(0xF8);
  3777  00175E  0EF8               	movlw	248
  3778  001760  EC0C  F00C         	call	_spi_Send_Read
  3779                           
  3780                           ;LCD_SPI.c: 25: spi_Send_Read(0x80);
  3781  001764  0E80               	movlw	128
  3782  001766  EC0C  F00C         	call	_spi_Send_Read
  3783                           
  3784                           ;LCD_SPI.c: 26: spi_Send_Read(0x00);
  3785  00176A  0E00               	movlw	0
  3786  00176C  EC0C  F00C         	call	_spi_Send_Read
  3787                           
  3788                           ;LCD_SPI.c: 27: LATDbits.LATD3 = 1;
  3789  001770  868C               	bsf	3980,3,c	;volatile
  3790  001772  0012               	return		;funcret
  3791  001774                     __end_of_clearDisplay:
  3792                           	opt stack 0
  3793                           tblptru	equ	0xFF8
  3794                           tblptrh	equ	0xFF7
  3795                           tblptrl	equ	0xFF6
  3796                           tablat	equ	0xFF5
  3797                           prodh	equ	0xFF4
  3798                           prodl	equ	0xFF3
  3799                           intcon	equ	0xFF2
  3800                           intcon2	equ	0xFF1
  3801                           intcon3	equ	0xFF0
  3802                           indf0	equ	0xFEF
  3803                           postinc0	equ	0xFEE
  3804                           fsr0h	equ	0xFEA
  3805                           fsr0l	equ	0xFE9
  3806                           wreg	equ	0xFE8
  3807                           postdec1	equ	0xFE5
  3808                           fsr1l	equ	0xFE1
  3809                           indf2	equ	0xFDF
  3810                           postinc2	equ	0xFDE
  3811                           postdec2	equ	0xFDD
  3812                           fsr2h	equ	0xFDA
  3813                           fsr2l	equ	0xFD9
  3814                           status	equ	0xFD8
  3815                           
  3816 ;; *************** function _readBusyFlag *****************
  3817 ;; Defined at:
  3818 ;;		line 94 in file "LCD_SPI.c"
  3819 ;; Parameters:    Size  Location     Type
  3820 ;;		None
  3821 ;; Auto vars:     Size  Location     Type
  3822 ;;  retValue        1   19[COMRAM] unsigned char 
  3823 ;; Return value:  Size  Location     Type
  3824 ;;                  1    wreg      unsigned char 
  3825 ;; Registers used:
  3826 ;;		wreg, status,2, status,0, cstack
  3827 ;; Tracked objects:
  3828 ;;		On entry : 0/0
  3829 ;;		On exit  : 0/0
  3830 ;;		Unchanged: 0/0
  3831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3832 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3833 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3834 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3835 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3836 ;;Total ram usage:        1 bytes
  3837 ;; Hardware stack levels used:    1
  3838 ;; Hardware stack levels required when called:    2
  3839 ;; This function calls:
  3840 ;;		_spi_Send_Read
  3841 ;; This function is called by:
  3842 ;;		_clearDisplay
  3843 ;;		_displayCtrl
  3844 ;;		_putchLCD
  3845 ;;		_moveCursor
  3846 ;; This function uses a non-reentrant model
  3847 ;;
  3848                           
  3849                           	psect	text28
  3850  0017EA                     __ptext28:
  3851                           	opt stack 0
  3852  0017EA                     _readBusyFlag:
  3853                           	opt stack 25
  3854                           
  3855                           ;LCD_SPI.c: 96: unsigned char retValue;
  3856                           ;LCD_SPI.c: 98: LATDbits.LATD3 = 0;
  3857                           
  3858                           ;incstack = 0
  3859  0017EA  968C               	bcf	3980,3,c	;volatile
  3860                           
  3861                           ;LCD_SPI.c: 99: spi_Send_Read(0xFC);
  3862  0017EC  0EFC               	movlw	252
  3863  0017EE  EC0C  F00C         	call	_spi_Send_Read
  3864                           
  3865                           ;LCD_SPI.c: 100: retValue = spi_Send_Read(0x00);
  3866  0017F2  0E00               	movlw	0
  3867  0017F4  EC0C  F00C         	call	_spi_Send_Read
  3868  0017F8  6E14               	movwf	readBusyFlag@retValue,c
  3869                           
  3870                           ;LCD_SPI.c: 101: LATDbits.LATD3 = 1;
  3871  0017FA  868C               	bsf	3980,3,c	;volatile
  3872                           
  3873                           ;LCD_SPI.c: 102: _delay((unsigned long)((1)*(8000000/4000000.0)));
  3874  0017FC  D000               	nop2		;2 cycle nop
  3875                           
  3876                           ;LCD_SPI.c: 103: return (retValue & 1);
  3877  0017FE  5014               	movf	readBusyFlag@retValue,w,c
  3878  001800  0B01               	andlw	1
  3879  001802  0012               	return	
  3880  001804                     __end_of_readBusyFlag:
  3881                           	opt stack 0
  3882                           tblptru	equ	0xFF8
  3883                           tblptrh	equ	0xFF7
  3884                           tblptrl	equ	0xFF6
  3885                           tablat	equ	0xFF5
  3886                           prodh	equ	0xFF4
  3887                           prodl	equ	0xFF3
  3888                           intcon	equ	0xFF2
  3889                           intcon2	equ	0xFF1
  3890                           intcon3	equ	0xFF0
  3891                           indf0	equ	0xFEF
  3892                           postinc0	equ	0xFEE
  3893                           fsr0h	equ	0xFEA
  3894                           fsr0l	equ	0xFE9
  3895                           wreg	equ	0xFE8
  3896                           postdec1	equ	0xFE5
  3897                           fsr1l	equ	0xFE1
  3898                           indf2	equ	0xFDF
  3899                           postinc2	equ	0xFDE
  3900                           postdec2	equ	0xFDD
  3901                           fsr2h	equ	0xFDA
  3902                           fsr2l	equ	0xFD9
  3903                           status	equ	0xFD8
  3904                           
  3905 ;; *************** function _spi_Send_Read *****************
  3906 ;; Defined at:
  3907 ;;		line 12 in file "LCD_SPI.c"
  3908 ;; Parameters:    Size  Location     Type
  3909 ;;  byte            1    wreg     unsigned char 
  3910 ;; Auto vars:     Size  Location     Type
  3911 ;;  byte            1   18[COMRAM] unsigned char 
  3912 ;; Return value:  Size  Location     Type
  3913 ;;                  1    wreg      unsigned char 
  3914 ;; Registers used:
  3915 ;;		wreg, status,2
  3916 ;; Tracked objects:
  3917 ;;		On entry : 0/0
  3918 ;;		On exit  : 0/0
  3919 ;;		Unchanged: 0/0
  3920 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3921 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3922 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3923 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3924 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3925 ;;Total ram usage:        1 bytes
  3926 ;; Hardware stack levels used:    1
  3927 ;; Hardware stack levels required when called:    1
  3928 ;; This function calls:
  3929 ;;		Nothing
  3930 ;; This function is called by:
  3931 ;;		_clearDisplay
  3932 ;;		_displayCtrl
  3933 ;;		_putchLCD
  3934 ;;		_moveCursor
  3935 ;;		_readBusyFlag
  3936 ;; This function uses a non-reentrant model
  3937 ;;
  3938                           
  3939                           	psect	text29
  3940  001818                     __ptext29:
  3941                           	opt stack 0
  3942  001818                     _spi_Send_Read:
  3943                           	opt stack 26
  3944                           
  3945                           ;incstack = 0
  3946                           ;spi_Send_Read@byte stored from wreg
  3947  001818  6E13               	movwf	spi_Send_Read@byte,c
  3948                           
  3949                           ;LCD_SPI.c: 14: SSP2BUF = byte;
  3950  00181A  C013  FF03         	movff	spi_Send_Read@byte,3843	;volatile
  3951  00181E  010F               	movlb	15	; () banked
  3952  001820  A11A               	btfss	26,0,b	;volatile
  3953  001822  D7FD               	goto	l305
  3954                           
  3955                           ; BSR set to: 15
  3956                           ;LCD_SPI.c: 16: return SSP2BUF;
  3957  001824  010F               	movlb	15	; () banked
  3958  001826  5103               	movf	3,w,b	;volatile
  3959                           
  3960                           ; BSR set to: 15
  3961  001828  0012               	return		;funcret
  3962  00182A                     __end_of_spi_Send_Read:
  3963                           	opt stack 0
  3964                           tblptru	equ	0xFF8
  3965                           tblptrh	equ	0xFF7
  3966                           tblptrl	equ	0xFF6
  3967                           tablat	equ	0xFF5
  3968                           prodh	equ	0xFF4
  3969                           prodl	equ	0xFF3
  3970                           intcon	equ	0xFF2
  3971                           intcon2	equ	0xFF1
  3972                           intcon3	equ	0xFF0
  3973                           indf0	equ	0xFEF
  3974                           postinc0	equ	0xFEE
  3975                           fsr0h	equ	0xFEA
  3976                           fsr0l	equ	0xFE9
  3977                           wreg	equ	0xFE8
  3978                           postdec1	equ	0xFE5
  3979                           fsr1l	equ	0xFE1
  3980                           indf2	equ	0xFDF
  3981                           postinc2	equ	0xFDE
  3982                           postdec2	equ	0xFDD
  3983                           fsr2h	equ	0xFDA
  3984                           fsr2l	equ	0xFD9
  3985                           status	equ	0xFD8
  3986                           
  3987 ;; *************** function _getRandomTarget *****************
  3988 ;; Defined at:
  3989 ;;		line 304 in file "main.c"
  3990 ;; Parameters:    Size  Location     Type
  3991 ;;  Target          2   18[COMRAM] PTR short 
  3992 ;;		 -> nextTarget(4), 
  3993 ;; Auto vars:     Size  Location     Type
  3994 ;;		None
  3995 ;; Return value:  Size  Location     Type
  3996 ;;                  1    wreg      void 
  3997 ;; Registers used:
  3998 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3999 ;; Tracked objects:
  4000 ;;		On entry : 0/0
  4001 ;;		On exit  : 0/0
  4002 ;;		Unchanged: 0/0
  4003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4004 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4005 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4006 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4007 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4008 ;;Total ram usage:        2 bytes
  4009 ;; Hardware stack levels used:    1
  4010 ;; Hardware stack levels required when called:    1
  4011 ;; This function calls:
  4012 ;;		Nothing
  4013 ;; This function is called by:
  4014 ;;		_main
  4015 ;; This function uses a non-reentrant model
  4016 ;;
  4017                           
  4018                           	psect	text30
  4019  0016A4                     __ptext30:
  4020                           	opt stack 0
  4021  0016A4                     _getRandomTarget:
  4022                           	opt stack 29
  4023                           
  4024                           ;main.c: 305: Target[0] = 0;
  4025                           
  4026                           ; BSR set to: 15
  4027                           ;incstack = 0
  4028  0016A4  C013  FFD9         	movff	getRandomTarget@Target,fsr2l
  4029  0016A8  C014  FFDA         	movff	getRandomTarget@Target+1,fsr2h
  4030  0016AC  0E00               	movlw	0
  4031  0016AE  6EDE               	movwf	postinc2,c
  4032  0016B0  0E00               	movlw	0
  4033  0016B2  6EDD               	movwf	postdec2,c
  4034                           
  4035                           ;main.c: 306: Target[1] = 0;
  4036  0016B4  EE20 F002          	lfsr	2,2
  4037  0016B8  5013               	movf	getRandomTarget@Target,w,c
  4038  0016BA  26D9               	addwf	fsr2l,f,c
  4039  0016BC  5014               	movf	getRandomTarget@Target+1,w,c
  4040  0016BE  22DA               	addwfc	fsr2h,f,c
  4041  0016C0  0E00               	movlw	0
  4042  0016C2  6EDE               	movwf	postinc2,c
  4043  0016C4  0E00               	movlw	0
  4044  0016C6  6EDD               	movwf	postdec2,c
  4045  0016C8  0012               	return		;funcret
  4046  0016CA                     __end_of_getRandomTarget:
  4047                           	opt stack 0
  4048                           tblptru	equ	0xFF8
  4049                           tblptrh	equ	0xFF7
  4050                           tblptrl	equ	0xFF6
  4051                           tablat	equ	0xFF5
  4052                           prodh	equ	0xFF4
  4053                           prodl	equ	0xFF3
  4054                           intcon	equ	0xFF2
  4055                           intcon2	equ	0xFF1
  4056                           intcon3	equ	0xFF0
  4057                           indf0	equ	0xFEF
  4058                           postinc0	equ	0xFEE
  4059                           fsr0h	equ	0xFEA
  4060                           fsr0l	equ	0xFE9
  4061                           wreg	equ	0xFE8
  4062                           postdec1	equ	0xFE5
  4063                           fsr1l	equ	0xFE1
  4064                           indf2	equ	0xFDF
  4065                           postinc2	equ	0xFDE
  4066                           postdec2	equ	0xFDD
  4067                           fsr2h	equ	0xFDA
  4068                           fsr2l	equ	0xFD9
  4069                           status	equ	0xFD8
  4070                           
  4071 ;; *************** function _fireShot *****************
  4072 ;; Defined at:
  4073 ;;		line 337 in file "main.c"
  4074 ;; Parameters:    Size  Location     Type
  4075 ;;		None
  4076 ;; Auto vars:     Size  Location     Type
  4077 ;;		None
  4078 ;; Return value:  Size  Location     Type
  4079 ;;                  1    wreg      void 
  4080 ;; Registers used:
  4081 ;;		None
  4082 ;; Tracked objects:
  4083 ;;		On entry : 0/0
  4084 ;;		On exit  : 0/0
  4085 ;;		Unchanged: 0/0
  4086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4087 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4088 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4089 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4090 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4091 ;;Total ram usage:        0 bytes
  4092 ;; Hardware stack levels used:    1
  4093 ;; Hardware stack levels required when called:    1
  4094 ;; This function calls:
  4095 ;;		Nothing
  4096 ;; This function is called by:
  4097 ;;		_main
  4098 ;; This function uses a non-reentrant model
  4099 ;;
  4100                           
  4101                           	psect	text31
  4102  00185C                     __ptext31:
  4103                           	opt stack 0
  4104  00185C                     _fireShot:
  4105                           	opt stack 29
  4106                           
  4107                           ;main.c: 338: LATBbits.LATB1 = 1;
  4108                           
  4109                           ;incstack = 0
  4110  00185C  828A               	bsf	3978,1,c	;volatile
  4111  00185E  0012               	return		;funcret
  4112  001860                     __end_of_fireShot:
  4113                           	opt stack 0
  4114                           tblptru	equ	0xFF8
  4115                           tblptrh	equ	0xFF7
  4116                           tblptrl	equ	0xFF6
  4117                           tablat	equ	0xFF5
  4118                           prodh	equ	0xFF4
  4119                           prodl	equ	0xFF3
  4120                           intcon	equ	0xFF2
  4121                           intcon2	equ	0xFF1
  4122                           intcon3	equ	0xFF0
  4123                           indf0	equ	0xFEF
  4124                           postinc0	equ	0xFEE
  4125                           fsr0h	equ	0xFEA
  4126                           fsr0l	equ	0xFE9
  4127                           wreg	equ	0xFE8
  4128                           postdec1	equ	0xFE5
  4129                           fsr1l	equ	0xFE1
  4130                           indf2	equ	0xFDF
  4131                           postinc2	equ	0xFDE
  4132                           postdec2	equ	0xFDD
  4133                           fsr2h	equ	0xFDA
  4134                           fsr2l	equ	0xFD9
  4135                           status	equ	0xFD8
  4136                           
  4137 ;; *************** function _changeMode *****************
  4138 ;; Defined at:
  4139 ;;		line 309 in file "main.c"
  4140 ;; Parameters:    Size  Location     Type
  4141 ;;		None
  4142 ;; Auto vars:     Size  Location     Type
  4143 ;;		None
  4144 ;; Return value:  Size  Location     Type
  4145 ;;                  1    wreg      void 
  4146 ;; Registers used:
  4147 ;;		wreg, status,2
  4148 ;; Tracked objects:
  4149 ;;		On entry : 0/0
  4150 ;;		On exit  : 0/0
  4151 ;;		Unchanged: 0/0
  4152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4153 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4154 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4155 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4156 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4157 ;;Total ram usage:        0 bytes
  4158 ;; Hardware stack levels used:    1
  4159 ;; Hardware stack levels required when called:    1
  4160 ;; This function calls:
  4161 ;;		Nothing
  4162 ;; This function is called by:
  4163 ;;		_main
  4164 ;; This function uses a non-reentrant model
  4165 ;;
  4166                           
  4167                           	psect	text32
  4168  00182A                     __ptext32:
  4169                           	opt stack 0
  4170  00182A                     _changeMode:
  4171                           	opt stack 29
  4172                           
  4173                           ;main.c: 310: if (myModeState == MODE0){
  4174                           
  4175                           ;incstack = 0
  4176  00182A  5042               	movf	_myModeState,w,c
  4177  00182C  A4D8               	btfss	status,2,c
  4178  00182E  D003               	goto	l196
  4179                           
  4180                           ;main.c: 311: myModeState=MODE1;
  4181  001830  0E01               	movlw	1
  4182  001832  6E42               	movwf	_myModeState,c
  4183                           
  4184                           ;main.c: 312: }
  4185  001834  0012               	return	
  4186  001836                     l196:
  4187                           
  4188                           ;main.c: 313: else{
  4189                           ;main.c: 314: myModeState=MODE0;
  4190  001836  0E00               	movlw	0
  4191  001838  6E42               	movwf	_myModeState,c
  4192  00183A  0012               	return	
  4193  00183C                     __end_of_changeMode:
  4194                           	opt stack 0
  4195                           tblptru	equ	0xFF8
  4196                           tblptrh	equ	0xFF7
  4197                           tblptrl	equ	0xFF6
  4198                           tablat	equ	0xFF5
  4199                           prodh	equ	0xFF4
  4200                           prodl	equ	0xFF3
  4201                           intcon	equ	0xFF2
  4202                           intcon2	equ	0xFF1
  4203                           intcon3	equ	0xFF0
  4204                           indf0	equ	0xFEF
  4205                           postinc0	equ	0xFEE
  4206                           fsr0h	equ	0xFEA
  4207                           fsr0l	equ	0xFE9
  4208                           wreg	equ	0xFE8
  4209                           postdec1	equ	0xFE5
  4210                           fsr1l	equ	0xFE1
  4211                           indf2	equ	0xFDF
  4212                           postinc2	equ	0xFDE
  4213                           postdec2	equ	0xFDD
  4214                           fsr2h	equ	0xFDA
  4215                           fsr2l	equ	0xFD9
  4216                           status	equ	0xFD8
  4217                           
  4218 ;; *************** function _activateTarget *****************
  4219 ;; Defined at:
  4220 ;;		line 318 in file "main.c"
  4221 ;; Parameters:    Size  Location     Type
  4222 ;;  targetNbr       2   18[COMRAM] short 
  4223 ;; Auto vars:     Size  Location     Type
  4224 ;;		None
  4225 ;; Return value:  Size  Location     Type
  4226 ;;                  1    wreg      void 
  4227 ;; Registers used:
  4228 ;;		wreg, status,2, status,0
  4229 ;; Tracked objects:
  4230 ;;		On entry : 0/0
  4231 ;;		On exit  : 0/0
  4232 ;;		Unchanged: 0/0
  4233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4234 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4235 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4236 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4237 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4238 ;;Total ram usage:        2 bytes
  4239 ;; Hardware stack levels used:    1
  4240 ;; Hardware stack levels required when called:    1
  4241 ;; This function calls:
  4242 ;;		Nothing
  4243 ;; This function is called by:
  4244 ;;		_main
  4245 ;; This function uses a non-reentrant model
  4246 ;;
  4247                           
  4248                           	psect	text33
  4249  00184C                     __ptext33:
  4250                           	opt stack 0
  4251  00184C                     _activateTarget:
  4252                           	opt stack 29
  4253                           
  4254                           ;main.c: 320: LATA=targetNbr+2;
  4255                           
  4256                           ;incstack = 0
  4257  00184C  5013               	movf	activateTarget@targetNbr,w,c
  4258  00184E  0F02               	addlw	2
  4259  001850  6E89               	movwf	3977,c	;volatile
  4260  001852  0012               	return		;funcret
  4261  001854                     __end_of_activateTarget:
  4262                           	opt stack 0
  4263                           tblptru	equ	0xFF8
  4264                           tblptrh	equ	0xFF7
  4265                           tblptrl	equ	0xFF6
  4266                           tablat	equ	0xFF5
  4267                           prodh	equ	0xFF4
  4268                           prodl	equ	0xFF3
  4269                           intcon	equ	0xFF2
  4270                           intcon2	equ	0xFF1
  4271                           intcon3	equ	0xFF0
  4272                           indf0	equ	0xFEF
  4273                           postinc0	equ	0xFEE
  4274                           fsr0h	equ	0xFEA
  4275                           fsr0l	equ	0xFE9
  4276                           wreg	equ	0xFE8
  4277                           postdec1	equ	0xFE5
  4278                           fsr1l	equ	0xFE1
  4279                           indf2	equ	0xFDF
  4280                           postinc2	equ	0xFDE
  4281                           postdec2	equ	0xFDD
  4282                           fsr2h	equ	0xFDA
  4283                           fsr2l	equ	0xFD9
  4284                           status	equ	0xFD8
  4285                           
  4286 ;; *************** function _activateLEDTarget *****************
  4287 ;; Defined at:
  4288 ;;		line 323 in file "main.c"
  4289 ;; Parameters:    Size  Location     Type
  4290 ;;  targetLED       2   18[COMRAM] PTR short 
  4291 ;;		 -> nextTarget(4), 
  4292 ;; Auto vars:     Size  Location     Type
  4293 ;;  ledNBR          2   26[COMRAM] short 
  4294 ;; Return value:  Size  Location     Type
  4295 ;;                  1    wreg      void 
  4296 ;; Registers used:
  4297 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4298 ;; Tracked objects:
  4299 ;;		On entry : 0/0
  4300 ;;		On exit  : 0/0
  4301 ;;		Unchanged: 0/0
  4302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4303 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4304 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4305 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4306 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4307 ;;Total ram usage:       10 bytes
  4308 ;; Hardware stack levels used:    1
  4309 ;; Hardware stack levels required when called:    1
  4310 ;; This function calls:
  4311 ;;		Nothing
  4312 ;; This function is called by:
  4313 ;;		_main
  4314 ;; This function uses a non-reentrant model
  4315 ;;
  4316                           
  4317                           	psect	text34
  4318  0011A6                     __ptext34:
  4319                           	opt stack 0
  4320  0011A6                     _activateLEDTarget:
  4321                           	opt stack 29
  4322                           
  4323                           ;main.c: 324: short ledNBR = 0;
  4324                           
  4325                           ;incstack = 0
  4326  0011A6  0E00               	movlw	0
  4327  0011A8  6E1C               	movwf	activateLEDTarget@ledNBR+1,c
  4328  0011AA  0E00               	movlw	0
  4329  0011AC  6E1B               	movwf	activateLEDTarget@ledNBR,c
  4330                           
  4331                           ;main.c: 325: if (targetLED[0]<3){
  4332  0011AE  C013  FFD9         	movff	activateLEDTarget@targetLED,fsr2l
  4333  0011B2  C014  FFDA         	movff	activateLEDTarget@targetLED+1,fsr2h
  4334  0011B6  0E01               	movlw	1
  4335  0011B8  BEDB               	btfsc	plusw2,7,c
  4336  0011BA  D007               	goto	u1220
  4337  0011BC  0E01               	movlw	1
  4338  0011BE  50DB               	movf	plusw2,w,c
  4339  0011C0  E128               	bnz	l2238
  4340  0011C2  0E03               	movlw	3
  4341  0011C4  5CDE               	subwf	postinc2,w,c
  4342  0011C6  B0D8               	btfsc	status,0,c
  4343  0011C8  D024               	goto	l204
  4344  0011CA                     u1220:
  4345                           
  4346                           ;main.c: 326: ledNBR += (2*targetLED[0]+targetLED[1]);
  4347  0011CA  EE20 F002          	lfsr	2,2
  4348  0011CE  5013               	movf	activateLEDTarget@targetLED,w,c
  4349  0011D0  26D9               	addwf	fsr2l,f,c
  4350  0011D2  5014               	movf	activateLEDTarget@targetLED+1,w,c
  4351  0011D4  22DA               	addwfc	fsr2h,f,c
  4352  0011D6  CFDE F015          	movff	postinc2,??_activateLEDTarget
  4353  0011DA  CFDD F016          	movff	postdec2,??_activateLEDTarget+1
  4354  0011DE  C013  FFD9         	movff	activateLEDTarget@targetLED,fsr2l
  4355  0011E2  C014  FFDA         	movff	activateLEDTarget@targetLED+1,fsr2h
  4356  0011E6  CFDE F017          	movff	postinc2,??_activateLEDTarget+2
  4357  0011EA  CFDD F018          	movff	postdec2,??_activateLEDTarget+3
  4358  0011EE  90D8               	bcf	status,0,c
  4359  0011F0  3617               	rlcf	??_activateLEDTarget+2,f,c
  4360  0011F2  3618               	rlcf	??_activateLEDTarget+3,f,c
  4361  0011F4  5015               	movf	??_activateLEDTarget,w,c
  4362  0011F6  2617               	addwf	??_activateLEDTarget+2,f,c
  4363  0011F8  5016               	movf	??_activateLEDTarget+1,w,c
  4364  0011FA  2218               	addwfc	??_activateLEDTarget+3,f,c
  4365  0011FC  5017               	movf	??_activateLEDTarget+2,w,c
  4366  0011FE  261B               	addwf	activateLEDTarget@ledNBR,f,c
  4367  001200  5018               	movf	??_activateLEDTarget+3,w,c
  4368  001202  221C               	addwfc	activateLEDTarget@ledNBR+1,f,c
  4369                           
  4370                           ;main.c: 327: ledNBR += 240;
  4371  001204  0EF0               	movlw	240
  4372  001206  261B               	addwf	activateLEDTarget@ledNBR,f,c
  4373  001208  0E00               	movlw	0
  4374  00120A  221C               	addwfc	activateLEDTarget@ledNBR+1,f,c
  4375                           
  4376                           ;main.c: 328: LATC = ledNBR;
  4377  00120C  C01B  FF8B         	movff	activateLEDTarget@ledNBR,3979	;volatile
  4378                           
  4379                           ;main.c: 329: }
  4380  001210  0012               	return	
  4381  001212                     l204:
  4382  001212                     l2238:
  4383                           
  4384                           ;main.c: 330: else{
  4385                           ;main.c: 331: ledNBR += ((2*(targetLED[0]-3)+targetLED[1])<<4);
  4386  001212  0EA0               	movlw	160
  4387  001214  6E15               	movwf	??_activateLEDTarget& (0+255),c
  4388  001216  0EFF               	movlw	255
  4389  001218  6E16               	movwf	(??_activateLEDTarget+1)& (0+255),c
  4390  00121A  EE20 F002          	lfsr	2,2
  4391  00121E  5013               	movf	activateLEDTarget@targetLED,w,c
  4392  001220  26D9               	addwf	fsr2l,f,c
  4393  001222  5014               	movf	activateLEDTarget@targetLED+1,w,c
  4394  001224  22DA               	addwfc	fsr2h,f,c
  4395  001226  CFDE F017          	movff	postinc2,??_activateLEDTarget+2
  4396  00122A  CFDD F018          	movff	postdec2,??_activateLEDTarget+3
  4397  00122E  C013  FFD9         	movff	activateLEDTarget@targetLED,fsr2l
  4398  001232  C014  FFDA         	movff	activateLEDTarget@targetLED+1,fsr2h
  4399  001236  CFDE F019          	movff	postinc2,??_activateLEDTarget+4
  4400  00123A  CFDD F01A          	movff	postdec2,??_activateLEDTarget+5
  4401  00123E  90D8               	bcf	status,0,c
  4402  001240  3619               	rlcf	??_activateLEDTarget+4,f,c
  4403  001242  361A               	rlcf	??_activateLEDTarget+5,f,c
  4404  001244  5017               	movf	??_activateLEDTarget+2,w,c
  4405  001246  2619               	addwf	??_activateLEDTarget+4,f,c
  4406  001248  5018               	movf	??_activateLEDTarget+3,w,c
  4407  00124A  221A               	addwfc	??_activateLEDTarget+5,f,c
  4408  00124C  3A19               	swapf	??_activateLEDTarget+4,f,c
  4409  00124E  3A1A               	swapf	??_activateLEDTarget+5,f,c
  4410  001250  0EF0               	movlw	240
  4411  001252  161A               	andwf	??_activateLEDTarget+5,f,c
  4412  001254  5019               	movf	??_activateLEDTarget+4,w,c
  4413  001256  0B0F               	andlw	15
  4414  001258  121A               	iorwf	??_activateLEDTarget+5,f,c
  4415  00125A  0EF0               	movlw	240
  4416  00125C  1619               	andwf	??_activateLEDTarget+4,f,c
  4417  00125E  5015               	movf	??_activateLEDTarget,w,c
  4418  001260  2619               	addwf	??_activateLEDTarget+4,f,c
  4419  001262  5016               	movf	??_activateLEDTarget+1,w,c
  4420  001264  221A               	addwfc	??_activateLEDTarget+5,f,c
  4421  001266  5019               	movf	??_activateLEDTarget+4,w,c
  4422  001268  261B               	addwf	activateLEDTarget@ledNBR,f,c
  4423  00126A  501A               	movf	??_activateLEDTarget+5,w,c
  4424  00126C  221C               	addwfc	activateLEDTarget@ledNBR+1,f,c
  4425                           
  4426                           ;main.c: 332: ledNBR += 15;
  4427  00126E  0E0F               	movlw	15
  4428  001270  261B               	addwf	activateLEDTarget@ledNBR,f,c
  4429  001272  0E00               	movlw	0
  4430  001274  221C               	addwfc	activateLEDTarget@ledNBR+1,f,c
  4431                           
  4432                           ;main.c: 333: LATC = ledNBR;
  4433  001276  C01B  FF8B         	movff	activateLEDTarget@ledNBR,3979	;volatile
  4434  00127A  0012               	return	
  4435  00127C                     __end_of_activateLEDTarget:
  4436                           	opt stack 0
  4437                           tblptru	equ	0xFF8
  4438                           tblptrh	equ	0xFF7
  4439                           tblptrl	equ	0xFF6
  4440                           tablat	equ	0xFF5
  4441                           prodh	equ	0xFF4
  4442                           prodl	equ	0xFF3
  4443                           intcon	equ	0xFF2
  4444                           intcon2	equ	0xFF1
  4445                           intcon3	equ	0xFF0
  4446                           indf0	equ	0xFEF
  4447                           postinc0	equ	0xFEE
  4448                           fsr0h	equ	0xFEA
  4449                           fsr0l	equ	0xFE9
  4450                           wreg	equ	0xFE8
  4451                           postdec1	equ	0xFE5
  4452                           fsr1l	equ	0xFE1
  4453                           indf2	equ	0xFDF
  4454                           postinc2	equ	0xFDE
  4455                           postdec2	equ	0xFDD
  4456                           plusw2	equ	0xFDB
  4457                           fsr2h	equ	0xFDA
  4458                           fsr2l	equ	0xFD9
  4459                           status	equ	0xFD8
  4460                           
  4461 ;; *************** function _rxIsr *****************
  4462 ;; Defined at:
  4463 ;;		line 210 in file "main.c"
  4464 ;; Parameters:    Size  Location     Type
  4465 ;;		None
  4466 ;; Auto vars:     Size  Location     Type
  4467 ;;		None
  4468 ;; Return value:  Size  Location     Type
  4469 ;;                  1    wreg      void 
  4470 ;; Registers used:
  4471 ;;		wreg, status,2, status,0
  4472 ;; Tracked objects:
  4473 ;;		On entry : 0/0
  4474 ;;		On exit  : 0/0
  4475 ;;		Unchanged: 0/0
  4476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4477 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4478 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4479 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4480 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4481 ;;Total ram usage:       18 bytes
  4482 ;; Hardware stack levels used:    1
  4483 ;; This function calls:
  4484 ;;		Nothing
  4485 ;; This function is called by:
  4486 ;;		Interrupt level 2
  4487 ;; This function uses a non-reentrant model
  4488 ;;
  4489                           
  4490                           	psect	intcode
  4491  000008                     __pintcode:
  4492                           	opt stack 0
  4493  000008                     _rxIsr:
  4494                           	opt stack 24
  4495                           
  4496                           ;incstack = 0
  4497  000008  824C               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  4498  00000A  CFFA F001          	movff	pclath,??_rxIsr
  4499  00000E  CFFB F002          	movff	pclatu,??_rxIsr+1
  4500  000012  CFE9 F003          	movff	fsr0l,??_rxIsr+2
  4501  000016  CFEA F004          	movff	fsr0h,??_rxIsr+3
  4502  00001A  CFE1 F005          	movff	fsr1l,??_rxIsr+4
  4503  00001E  CFE2 F006          	movff	fsr1h,??_rxIsr+5
  4504  000022  CFD9 F007          	movff	fsr2l,??_rxIsr+6
  4505  000026  CFDA F008          	movff	fsr2h,??_rxIsr+7
  4506  00002A  CFF3 F009          	movff	prodl,??_rxIsr+8
  4507  00002E  CFF4 F00A          	movff	prodh,??_rxIsr+9
  4508  000032  CFF6 F00B          	movff	tblptrl,??_rxIsr+10
  4509  000036  CFF7 F00C          	movff	tblptrh,??_rxIsr+11
  4510  00003A  CFF8 F00D          	movff	tblptru,??_rxIsr+12
  4511  00003E  CFF5 F00E          	movff	tablat,??_rxIsr+13
  4512  000042  C04C  F00F         	movff	btemp,??_rxIsr+14
  4513  000046  C04D  F010         	movff	btemp+1,??_rxIsr+15
  4514  00004A  C04E  F011         	movff	btemp+2,??_rxIsr+16
  4515  00004E  C04F  F012         	movff	btemp+3,??_rxIsr+17
  4516                           
  4517                           ;main.c: 213: if(PIR1bits.RC1IF && PIE1bits.RC1IE) {
  4518  000052  BA9E               	btfsc	3998,5,c	;volatile
  4519  000054  AA9D               	btfss	3997,5,c	;volatile
  4520  000056  D020               	goto	i2l170
  4521                           
  4522                           ;main.c: 214: if(RCSTAbits.FERR || RCSTAbits.OERR) {
  4523  000058  B4AB               	btfsc	4011,2,c	;volatile
  4524  00005A  D002               	goto	i2u49_40
  4525  00005C  A2AB               	btfss	4011,1,c	;volatile
  4526  00005E  D003               	goto	i2l167
  4527  000060                     i2u49_40:
  4528                           
  4529                           ;main.c: 215: ErrorUART= 1;
  4530  000060  0E01               	movlw	1
  4531  000062  6E3F               	movwf	_ErrorUART,c
  4532                           
  4533                           ;main.c: 216: }
  4534  000064  D019               	goto	i2l170
  4535  000066                     i2l167:
  4536                           
  4537                           ;main.c: 217: else {
  4538                           ;main.c: 218: rxChar = RCREG1;
  4539  000066  CFAE F041          	movff	4014,_rxChar	;volatile
  4540                           
  4541                           ;main.c: 219: rxFlag=1;
  4542  00006A  0E01               	movlw	1
  4543  00006C  6E3E               	movwf	_rxFlag,c
  4544                           
  4545                           ;main.c: 220: switch(rxChar){
  4546  00006E  D009               	goto	i2l171
  4547  000070                     
  4548                           ;main.c: 222: reloadFlag=1;
  4549  000070  0E01               	movlw	1
  4550  000072  6E3D               	movwf	_reloadFlag,c
  4551                           
  4552                           ;main.c: 223: break;
  4553  000074  D010               	goto	i2l173
  4554  000076                     
  4555                           ;main.c: 225: modeFlag=1;
  4556  000076  0E01               	movlw	1
  4557  000078  6E3C               	movwf	_modeFlag,c
  4558                           
  4559                           ;main.c: 226: break;
  4560  00007A  D00D               	goto	i2l173
  4561  00007C                     
  4562                           ;main.c: 228: pewFlag=1;
  4563  00007C  0E01               	movlw	1
  4564  00007E  6E3B               	movwf	_pewFlag,c
  4565                           
  4566                           ;main.c: 230: }
  4567                           
  4568                           ;main.c: 229: break;
  4569  000080  D00A               	goto	i2l173
  4570  000082                     i2l171:
  4571  000082  5041               	movf	_rxChar,w,c
  4572                           
  4573                           ; Switch size 1, requested type "space"
  4574                           ; Number of cases is 3, Range of values is 170 to 204
  4575                           ; switch strategies available:
  4576                           ; Name         Instructions Cycles
  4577                           ; simple_byte           10     6 (average)
  4578                           ;	Chosen strategy is simple_byte
  4579  000084  0AAA               	xorlw	170	; case 170
  4580  000086  B4D8               	btfsc	status,2,c
  4581  000088  D7F3               	goto	i2l172
  4582  00008A  0A11               	xorlw	17	; case 187
  4583  00008C  B4D8               	btfsc	status,2,c
  4584  00008E  D7F3               	goto	i2l174
  4585  000090  0A77               	xorlw	119	; case 204
  4586  000092  B4D8               	btfsc	status,2,c
  4587  000094  D7F3               	goto	i2l175
  4588  000096                     i2l173:
  4589                           
  4590                           ;main.c: 231: PIE1bits.RC1IE = 0;
  4591  000096  9A9D               	bcf	3997,5,c	;volatile
  4592  000098                     i2l170:
  4593                           
  4594                           ;main.c: 232: }
  4595                           ;main.c: 233: }
  4596                           ;main.c: 236: if(INTCON3bits.INT1IF && INTCON3bits.INT1E){
  4597  000098  B0F0               	btfsc	intcon3,0,c	;volatile
  4598  00009A  A6F0               	btfss	intcon3,3,c	;volatile
  4599  00009C  D004               	goto	i2l176
  4600                           
  4601                           ;main.c: 237: capteurFlag= 1;
  4602  00009E  0E01               	movlw	1
  4603  0000A0  6E3A               	movwf	_capteurFlag,c
  4604                           
  4605                           ;main.c: 238: INTCON3bits.INT1E = 0;
  4606  0000A2  96F0               	bcf	intcon3,3,c	;volatile
  4607                           
  4608                           ;main.c: 239: INTCON3bits.INT1F = 0;
  4609  0000A4  90F0               	bcf	intcon3,0,c	;volatile
  4610  0000A6                     i2l176:
  4611                           
  4612                           ;main.c: 240: }
  4613                           ;main.c: 243: if (INTCONbits.TMR0IF && INTCONbits.TMR0IE ){
  4614  0000A6  B4F2               	btfsc	intcon,2,c	;volatile
  4615  0000A8  AAF2               	btfss	intcon,5,c	;volatile
  4616  0000AA  D004               	goto	i2l177
  4617                           
  4618                           ;main.c: 244: timerFlag = 1;
  4619  0000AC  0E01               	movlw	1
  4620  0000AE  6E39               	movwf	_timerFlag,c
  4621                           
  4622                           ;main.c: 245: INTCONbits.TMR0IF = 0;
  4623  0000B0  94F2               	bcf	intcon,2,c	;volatile
  4624                           
  4625                           ;main.c: 246: INTCONbits.TMR0IE = 0;
  4626  0000B2  9AF2               	bcf	intcon,5,c	;volatile
  4627  0000B4                     i2l177:
  4628  0000B4  C012  F04F         	movff	??_rxIsr+17,btemp+3
  4629  0000B8  C011  F04E         	movff	??_rxIsr+16,btemp+2
  4630  0000BC  C010  F04D         	movff	??_rxIsr+15,btemp+1
  4631  0000C0  C00F  F04C         	movff	??_rxIsr+14,btemp
  4632  0000C4  C00E  FFF5         	movff	??_rxIsr+13,tablat
  4633  0000C8  C00D  FFF8         	movff	??_rxIsr+12,tblptru
  4634  0000CC  C00C  FFF7         	movff	??_rxIsr+11,tblptrh
  4635  0000D0  C00B  FFF6         	movff	??_rxIsr+10,tblptrl
  4636  0000D4  C00A  FFF4         	movff	??_rxIsr+9,prodh
  4637  0000D8  C009  FFF3         	movff	??_rxIsr+8,prodl
  4638  0000DC  C008  FFDA         	movff	??_rxIsr+7,fsr2h
  4639  0000E0  C007  FFD9         	movff	??_rxIsr+6,fsr2l
  4640  0000E4  C006  FFE2         	movff	??_rxIsr+5,fsr1h
  4641  0000E8  C005  FFE1         	movff	??_rxIsr+4,fsr1l
  4642  0000EC  C004  FFEA         	movff	??_rxIsr+3,fsr0h
  4643  0000F0  C003  FFE9         	movff	??_rxIsr+2,fsr0l
  4644  0000F4  C002  FFFB         	movff	??_rxIsr+1,pclatu
  4645  0000F8  C001  FFFA         	movff	??_rxIsr,pclath
  4646  0000FC  924C               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4647  0000FE  0011               	retfie		f
  4648  000100                     __end_of_rxIsr:
  4649                           	opt stack 0
  4650                           pclatu	equ	0xFFB
  4651                           pclath	equ	0xFFA
  4652                           tblptru	equ	0xFF8
  4653                           tblptrh	equ	0xFF7
  4654                           tblptrl	equ	0xFF6
  4655                           tablat	equ	0xFF5
  4656                           prodh	equ	0xFF4
  4657                           prodl	equ	0xFF3
  4658                           intcon	equ	0xFF2
  4659                           intcon2	equ	0xFF1
  4660                           intcon3	equ	0xFF0
  4661                           indf0	equ	0xFEF
  4662                           postinc0	equ	0xFEE
  4663                           fsr0h	equ	0xFEA
  4664                           fsr0l	equ	0xFE9
  4665                           wreg	equ	0xFE8
  4666                           postdec1	equ	0xFE5
  4667                           fsr1h	equ	0xFE2
  4668                           fsr1l	equ	0xFE1
  4669                           indf2	equ	0xFDF
  4670                           postinc2	equ	0xFDE
  4671                           postdec2	equ	0xFDD
  4672                           plusw2	equ	0xFDB
  4673                           fsr2h	equ	0xFDA
  4674                           fsr2l	equ	0xFD9
  4675                           status	equ	0xFD8
  4676                           pclatu	equ	0xFFB
  4677                           pclath	equ	0xFFA
  4678                           tblptru	equ	0xFF8
  4679                           tblptrh	equ	0xFF7
  4680                           tblptrl	equ	0xFF6
  4681                           tablat	equ	0xFF5
  4682                           prodh	equ	0xFF4
  4683                           prodl	equ	0xFF3
  4684                           intcon	equ	0xFF2
  4685                           intcon2	equ	0xFF1
  4686                           intcon3	equ	0xFF0
  4687                           indf0	equ	0xFEF
  4688                           postinc0	equ	0xFEE
  4689                           fsr0h	equ	0xFEA
  4690                           fsr0l	equ	0xFE9
  4691                           wreg	equ	0xFE8
  4692                           postdec1	equ	0xFE5
  4693                           fsr1h	equ	0xFE2
  4694                           fsr1l	equ	0xFE1
  4695                           indf2	equ	0xFDF
  4696                           postinc2	equ	0xFDE
  4697                           postdec2	equ	0xFDD
  4698                           plusw2	equ	0xFDB
  4699                           fsr2h	equ	0xFDA
  4700                           fsr2l	equ	0xFD9
  4701                           status	equ	0xFD8
  4702                           
  4703                           	psect	rparam
  4704  0000                     pclatu	equ	0xFFB
  4705                           pclath	equ	0xFFA
  4706                           tblptru	equ	0xFF8
  4707                           tblptrh	equ	0xFF7
  4708                           tblptrl	equ	0xFF6
  4709                           tablat	equ	0xFF5
  4710                           prodh	equ	0xFF4
  4711                           prodl	equ	0xFF3
  4712                           intcon	equ	0xFF2
  4713                           intcon2	equ	0xFF1
  4714                           intcon3	equ	0xFF0
  4715                           indf0	equ	0xFEF
  4716                           postinc0	equ	0xFEE
  4717                           fsr0h	equ	0xFEA
  4718                           fsr0l	equ	0xFE9
  4719                           wreg	equ	0xFE8
  4720                           postdec1	equ	0xFE5
  4721                           fsr1h	equ	0xFE2
  4722                           fsr1l	equ	0xFE1
  4723                           indf2	equ	0xFDF
  4724                           postinc2	equ	0xFDE
  4725                           postdec2	equ	0xFDD
  4726                           plusw2	equ	0xFDB
  4727                           fsr2h	equ	0xFDA
  4728                           fsr2l	equ	0xFD9
  4729                           status	equ	0xFD8
  4730                           
  4731                           	psect	temp
  4732  00004C                     btemp:
  4733                           	opt stack 0
  4734  00004C                     	ds	1
  4735  0000                     int$flags	set	btemp
  4736  0000                     wtemp6	set	btemp+1
  4737                           pclatu	equ	0xFFB
  4738                           pclath	equ	0xFFA
  4739                           tblptru	equ	0xFF8
  4740                           tblptrh	equ	0xFF7
  4741                           tblptrl	equ	0xFF6
  4742                           tablat	equ	0xFF5
  4743                           prodh	equ	0xFF4
  4744                           prodl	equ	0xFF3
  4745                           intcon	equ	0xFF2
  4746                           intcon2	equ	0xFF1
  4747                           intcon3	equ	0xFF0
  4748                           indf0	equ	0xFEF
  4749                           postinc0	equ	0xFEE
  4750                           fsr0h	equ	0xFEA
  4751                           fsr0l	equ	0xFE9
  4752                           wreg	equ	0xFE8
  4753                           postdec1	equ	0xFE5
  4754                           fsr1h	equ	0xFE2
  4755                           fsr1l	equ	0xFE1
  4756                           indf2	equ	0xFDF
  4757                           postinc2	equ	0xFDE
  4758                           postdec2	equ	0xFDD
  4759                           plusw2	equ	0xFDB
  4760                           fsr2h	equ	0xFDA
  4761                           fsr2l	equ	0xFD9
  4762                           status	equ	0xFD8


Data Sizes:
    Strings     92
    Constant    10
    Data        4
    BSS         22
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     49      75
    BANK0           160      6       6
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          250      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_7(CODE[3]), STR_4(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 3
		 -> printEndGame@statArray(COMRAM[3]), printStat@statArray(COMRAM[3]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    putStringLCD@input	PTR const unsigned char  size(2) Largest target is 22
		 -> STR_9(CODE[8]), STR_8(CODE[22]), printEndGame@statArray(COMRAM[3]), STR_6(CODE[3]), 
		 -> STR_5(CODE[2]), printStat@statArray(COMRAM[3]), STR_3(CODE[20]), STR_2(CODE[16]), 
		 -> STR_1(CODE[20]), 

    activateLEDTarget@targetLED	PTR short  size(2) Largest target is 4
		 -> nextTarget(COMRAM[4]), 

    getRandomTarget@Target	PTR short  size(2) Largest target is 4
		 -> nextTarget(COMRAM[4]), 


Critical Paths under _main in COMRAM

    _main->_printEndGame
    _printStartGame->_putStringLCD
    _printRemTime->_printStat
    _printRemBullets->_printStat
    _printPoints->_printStat
    _printStat->_sprintf
    _printMBED->_putStringLCD
    _printEndGame->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _putStringLCD->_putchLCD
    _putchLCD->_fliplr
    _moveCursor->_fliplr
    _initialisation_LCD->_displayCtrl
    _displayCtrl->_readBusyFlag
    _clearDisplay->_readBusyFlag
    _readBusyFlag->_spi_Send_Read

Critical Paths under _rxIsr in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_printPoints
    _main->_printRemBullets
    _main->_printRemTime

Critical Paths under _rxIsr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _rxIsr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _rxIsr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _rxIsr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _rxIsr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _rxIsr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _rxIsr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _rxIsr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _rxIsr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _rxIsr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _rxIsr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _rxIsr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _rxIsr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _rxIsr in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0   27410
                                              2 BANK0      4     4      0
                  _activateLEDTarget
                     _activateTarget
                         _changeMode
                           _fireShot
                    _getRandomTarget
                 _initialisation_LCD
                       _printEndGame
                          _printMBED
                        _printPoints
                    _printRemBullets
                       _printRemTime
                     _printStartGame
                 _setInterruptConfig
                         _setModeLED
                       _setPinConfig
                     _setTimerConfig
                      _setUARTconfig
                           _stopShot
                       _toggleGunLED
 ---------------------------------------------------------------------------------
 (1) _toggleGunLED                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _stopShot                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setUARTconfig                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setTimerConfig                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setPinConfig                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setModeLED                                           1     1      0      22
                                             18 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _setInterruptConfig                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _printStartGame                                       0     0      0    2843
                       _clearDisplay
                         _moveCursor
                       _putStringLCD
                           _waitASec
 ---------------------------------------------------------------------------------
 (1) _printRemTime                                         2     0      2    5226
                                              0 BANK0      2     0      2
                         _moveCursor
                          _printStat
 ---------------------------------------------------------------------------------
 (1) _printRemBullets                                      2     0      2    5226
                                              0 BANK0      2     0      2
                         _moveCursor
                          _printStat
 ---------------------------------------------------------------------------------
 (1) _printPoints                                          2     0      2    5226
                                              0 BANK0      2     0      2
                         _moveCursor
                          _printStat
 ---------------------------------------------------------------------------------
 (2) _printStat                                            5     3      2    3606
                                             44 COMRAM     5     3      2
                       _putStringLCD
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _printMBED                                            0     0      0    2843
                       _clearDisplay
                         _moveCursor
                       _putStringLCD
                           _waitASec
 ---------------------------------------------------------------------------------
 (2) _waitASec                                             3     3      0      46
                                             18 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _printEndGame                                         5     3      2    4899
                                             44 COMRAM     5     3      2
                       _clearDisplay
                         _moveCursor
                       _putStringLCD
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             23    17      6    1889
                                             30 COMRAM    14     8      6
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     412
                                             25 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     421
                                             18 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _putStringLCD                                         6     4      2    1231
                                             22 COMRAM     6     4      2
                           _putchLCD
 ---------------------------------------------------------------------------------
 (3) _putchLCD                                             1     1      0     291
                                             21 COMRAM     1     1      0
                             _fliplr
                       _readBusyFlag
                      _spi_Send_Read
 ---------------------------------------------------------------------------------
 (2) _moveCursor                                           5     1      4    1499
                                             21 COMRAM     5     1      4
                             _fliplr
                       _readBusyFlag
                      _spi_Send_Read
 ---------------------------------------------------------------------------------
 (4) _fliplr                                               3     3      0     157
                                             18 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _initialisation_LCD                                   0     0      0     462
                       _clearDisplay
                        _displayCtrl
                _initialisation_PORT
                 _initialisation_SPI
 ---------------------------------------------------------------------------------
 (2) _initialisation_SPI                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _initialisation_PORT                                  1     1      0       0
                                             18 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _displayCtrl                                          4     2      2     395
                                             20 COMRAM     4     2      2
                       _readBusyFlag
                      _spi_Send_Read
 ---------------------------------------------------------------------------------
 (2) _clearDisplay                                         0     0      0      67
                       _readBusyFlag
                      _spi_Send_Read
 ---------------------------------------------------------------------------------
 (4) _readBusyFlag                                         1     1      0      45
                                             19 COMRAM     1     1      0
                      _spi_Send_Read
 ---------------------------------------------------------------------------------
 (4) _spi_Send_Read                                        1     1      0      22
                                             18 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _getRandomTarget                                      2     0      2     152
                                             18 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _fireShot                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _changeMode                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _activateTarget                                       2     0      2     121
                                             18 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _activateLEDTarget                                   10     8      2     322
                                             18 COMRAM    10     8      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _rxIsr                                               18    18      0       0
                                              0 COMRAM    18    18      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _activateLEDTarget
   _activateTarget
   _changeMode
   _fireShot
   _getRandomTarget
   _initialisation_LCD
     _clearDisplay
       _readBusyFlag
         _spi_Send_Read
       _spi_Send_Read
     _displayCtrl
       _readBusyFlag
         _spi_Send_Read
       _spi_Send_Read
     _initialisation_PORT
     _initialisation_SPI
   _printEndGame
     _clearDisplay
       _readBusyFlag
         _spi_Send_Read
       _spi_Send_Read
     _moveCursor
       _fliplr
       _readBusyFlag
         _spi_Send_Read
       _spi_Send_Read
     _putStringLCD
       _putchLCD
         _fliplr
         _readBusyFlag
           _spi_Send_Read
         _spi_Send_Read
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
   _printMBED
     _clearDisplay
       _readBusyFlag
         _spi_Send_Read
       _spi_Send_Read
     _moveCursor
       _fliplr
       _readBusyFlag
         _spi_Send_Read
       _spi_Send_Read
     _putStringLCD
       _putchLCD
         _fliplr
         _readBusyFlag
           _spi_Send_Read
         _spi_Send_Read
     _waitASec
   _printPoints
     _moveCursor
       _fliplr
       _readBusyFlag
         _spi_Send_Read
       _spi_Send_Read
     _printStat
       _putStringLCD
         _putchLCD
           _fliplr
           _readBusyFlag
             _spi_Send_Read
           _spi_Send_Read
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
   _printRemBullets
     _moveCursor
       _fliplr
       _readBusyFlag
         _spi_Send_Read
       _spi_Send_Read
     _printStat
       _putStringLCD
         _putchLCD
           _fliplr
           _readBusyFlag
             _spi_Send_Read
           _spi_Send_Read
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
   _printRemTime
     _moveCursor
       _fliplr
       _readBusyFlag
         _spi_Send_Read
       _spi_Send_Read
     _printStat
       _putStringLCD
         _putchLCD
           _fliplr
           _readBusyFlag
             _spi_Send_Read
           _spi_Send_Read
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
   _printStartGame
     _clearDisplay
       _readBusyFlag
         _spi_Send_Read
       _spi_Send_Read
     _moveCursor
       _fliplr
       _readBusyFlag
         _spi_Send_Read
       _spi_Send_Read
     _putStringLCD
       _putchLCD
         _fliplr
         _readBusyFlag
           _spi_Send_Read
         _spi_Send_Read
     _waitASec
   _setInterruptConfig
   _setModeLED
   _setPinConfig
   _setTimerConfig
   _setUARTconfig
   _stopShot
   _toggleGunLED

 _rxIsr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DF9      0       0      33        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK13           FA      0       0      31        0.0%
BANK13              FA      0       0      32        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      6       6       5        3.8%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     31      4B       1       79.8%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      51       8        0.0%
DATA                 0      0      51       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.43 build -156212558 
Symbol Table                                                                                   Sun Dec 03 15:04:15 2017

                ?_displayCtrl 0015                  _putStringLCD 127C                           l204 1212  
                         l141 1034                           l222 1846                           l150 0F76  
                         l142 0EEE                           l215 1784                           l143 0F16  
                         l216 1778                           l144 0F1E                           l136 0E88  
                         l305 181E                           l153 0F9A                           l145 0F2E  
                         l137 0E98                           l322 12BC                           l218 177E  
                         l138 0EAA                           l323 1286                           l139 100E  
                         l147 0F44                           l156 0FC6                           l317 14C6  
                         l157 0FE4                           l149 0F8E                           l159 1008  
                         l256 1334                           l337 1476                           l329 1622  
                         l265 168E                           l257 134C                           l258 134C  
                         l339 147E                           l267 16A2                           l196 1836  
                         l381 1116                           l382 1174                           l383 111C  
                         l375 109C                           l800 14FE                           l368 1054  
                         l801 14F6                           l377 10C4                           l369 106E  
                         l804 1516                           l805 1520                           l790 13D2  
                         l791 13CA                           l794 13F2                           l795 13FC  
                         u970 13D6                   _totalPoints 0032                           wreg 000FE8  
                        l2008 10C8                          l2060 167E                          l2304 0EAA  
                        l2400 1034                          l2084 1334                          l2238 1212  
                        l2346 0F60                          l2382 0FE4                          l2392 1004  
                        STR_1 0E35                          STR_2 0E49                          STR_3 0E21  
                        STR_4 0E64                          STR_5 0E62                          STR_6 0E61  
                        STR_7 0E64                          STR_8 0E0B                          STR_9 0E59  
                        u1000 1502                          u1020 12B4                          u1030 12EA  
                        u1110 117C                          u1120 1198                          u1130 1472  
                        u1027 12AA                          u1220 11CA                          u1037 12E0  
                        u1320 0F7E                          u1090 10FA                          _LATA 000F89  
                        u1190 1326                          u1407 1544                          _LATC 000F8B  
                        u1417 1552                          u1427 1560                          u1397 1694  
                        _main 0E68                          fsr0h 000FEA                          fsr1h 000FE2  
                        indf0 000FEF                          fsr2h 000FDA                          fsr0l 000FE9  
                        indf2 000FDF                          fsr1l 000FE1                          fsr2l 000FD9  
                        btemp 004C                          prodh 000FF4                          prodl 000FF3  
                        start 0100                  ___param_bank 000000          __end_of_clearDisplay 1774  
     __size_of_setTimerConfig 0014                   fliplr@input 0015             putStringLCD@input 0017  
                       ?_main 0001               __end_of___lwdiv 1406               __end_of___lwmod 152A  
                       i2l170 0098                         i2l171 0082                         i2l172 0070  
                       i2l173 0096                         i2l174 0076                         i2l175 007C  
                       i2l167 0066                         i2l176 00A6                         i2l177 00B4  
               printStat@stat 002D                         _TRISA 000F92                         _TRISC 000F94  
                       _TRISD 000F95   __size_of_initialisation_LCD 001C               __end_of_dpowers 0E0B  
 __size_of_initialisation_SPI 003E                         _rxIsr 0008               _getRandomTarget 16A4  
                       main@i 0064    __size_of_activateLEDTarget 00D6                         pclath 000FFA  
                       tablat 000FF5                         plusw2 000FDB                         status 000FD8  
                       wtemp6 004D               __end_of_sprintf 11A6               __initialization 15E2  
              _activateTarget 184C                  __end_of_main 104A         getRandomTarget@Target 0013  
              _transferedData 0040                        ??_main 0062                 __activetblptr 000003  
               ?_readBusyFlag 0001                        _ANCON1 000E47                        ?_rxIsr 0001  
    __size_of_printRemBullets 0022             spi_Send_Read@byte 0013                        _RCREG1 000FAE  
                      _RCSTA1 000FAB                        _OSCCON 000FD3                        _SPBRG1 000FAF  
                      _TXREG1 000FAD                        _TXSTA1 000FAC        __end_of_activateTarget 1854  
              __CFG_XINST$OFF 000000                 putchLCD@input 0016              __end_of_fireShot 1860  
            ??_printStartGame 001D                     ??___lwdiv 0017                     ??___lwmod 001E  
__size_of_initialisation_PORT 0040                        _fliplr 1406                        clear_0 1608  
                      _rxChar 0041                        _rxFlag 003E          __size_of_displayCtrl 0044  
              ??_readBusyFlag 0014              __end_of_waitASec 16A4                  __pdataCOMRAM 0048  
     __end_of_getRandomTarget 16CA                  __mediumconst 0000                        tblptrh 000FF7  
                      tblptrl 000FF6                        tblptru 000FF8              __end_of_putchLCD 1648  
                   ??_sprintf 0025              __end_of_stopShot 185C                  ?_printPoints 0060  
       printRemTime@nbSeconds 0060                    __accesstop 0060       __end_of__initialization 160E  
     activateLEDTarget@ledNBR 001B         __size_of_clearDisplay 0022                 ___rparam_used 000001  
             ?_activateTarget 0013                _setTimerConfig 1804                __pcstackCOMRAM 0001  
           moveCursor@address 001A   __size_of_setInterruptConfig 0020                 __end_of_rxIsr 0100  
      __size_of_setUARTconfig 0022                  _clearDisplay 1752                       ??_rxIsr 0001  
                  _changeMode 182A                 putStringLCD@i 001B                 ?_setPinConfig 0001  
           ??_printRemBullets 0032        __end_of_setTimerConfig 1818         __end_of_spi_Send_Read 182A  
                     ?_fliplr 0001             displayCtrl@cursor 0015            __size_of_printMBED 002E  
            ?_getRandomTarget 0013            __size_of_printStat 0068                       i2u49_40 0060  
                     _SSP2BUF 000F03                     ?_fireShot 0001         printEndGame@statArray 002F  
              ??_setPinConfig 0013          __end_of_readBusyFlag 1804               ?_setTimerConfig 0001  
                     __Hparam 0000                     ?_waitASec 0001                       __Lparam 0000  
         printPoints@nbPoints 0060                 _setUARTconfig 16CA                     ?_putchLCD 0001  
                     ___lwdiv 13B4                       ___lwmod 14E8                  __psmallconst 0E00  
             __size_of_fliplr 0052                displayCtrl@BCD 0018                     ?_stopShot 0001  
                     __pcinit 15E2                       _endFlag 0038                       __ramtop 0E00  
                     __ptext0 0E68                       __ptext1 183C                       __ptext2 1858  
                     __ptext3 16CA                       __ptext4 1804                       __ptext5 17D0  
                     __ptext6 1774                       __ptext7 1794                       __ptext8 15A8  
                     __ptext9 16EC                     _T0CONbits 000FD5                       _dpowers 0E01  
                     _pewFlag 003B    __end_of_initialisation_LCD 17D0    __end_of_initialisation_SPI 15A8  
                     _myState 0043                       _sprintf 104A                    ??_fireShot 0013  
                  _nextTarget 0044          end_of_initialization 160E           _initialisation_PORT 152A  
                  _setModeLED 1774                   ?_changeMode 0001                    _reloadFlag 003D  
        __size_of_printPoints 0022                    _moveCursor 1458             __end_of_printMBED 1676  
                  ??_waitASec 0013                ?_setUARTconfig 0001             __end_of_printStat 135A  
               ?_printEndGame 002D                     _RCSTAbits 000FAB                       postdec1 000FE5  
                     postdec2 000FDD                       postinc0 000FEE                       postinc2 000FDE  
                  ??_putchLCD 0016          ?_initialisation_PORT 0001                     _RPOR22_23 000E1D  
                   _RPOR24_25 000E1E                     _RPOR26_27 000E1F                 ?_printRemTime 0060  
                  ??_stopShot 0013          readBusyFlag@retValue 0014                     _TRISAbits 000F92  
    printRemBullets@nbBullets 0060                     _TRISBbits 000F93                     _TRISCbits 000F94  
                   _TRISDbits 000F95                 ?_toggleGunLED 0001              ??_activateTarget 0015  
               moveCursor@col 0018                 moveCursor@row 0016                ??_printEndGame 002F  
               ??_displayCtrl 0017         ??_initialisation_PORT 0013                ??_printRemTime 0032  
               ?_putStringLCD 0017                 __pidataCOMRAM 1854           __size_of_changeMode 0012  
              __end_of_fliplr 1458          __end_of_setPinConfig 17EA           start_initialization 15E2  
                   _ErrorUART 003F                ??_toggleGunLED 0013               _printRemBullets 170E  
       __size_of_readBusyFlag 001A                   ?_setModeLED 0001                _singleGameTime 0048  
                 ?_moveCursor 0016               ??_setUARTconfig 0013    __end_of_setInterruptConfig 17B4  
     activateTarget@targetNbr 0013                ??_putStringLCD 0019                      ??_fliplr 0013  
         __end_of_displayCtrl 14E8                  _readBusyFlag 17EA                   __pbssCOMRAM 0032  
     __size_of_printStartGame 003A                 __pcstackBANK0 0060              ??_setTimerConfig 0013  
           __size_of_fireShot 0004                   sprintf@flag 0028          printEndGame@nbPoints 002D  
                 sprintf@prec 0029                   _capteurFlag 003A              ___lwdiv@dividend 0013  
                   __pintcode 0008             __size_of_waitASec 002E              displayCtrl@blink 0016  
                    ?___lwdiv 0013                      ?___lwmod 001A           __size_of_setModeLED 0020  
           __size_of_putchLCD 0030       __end_of_printRemBullets 1730           __size_of_moveCursor 004C  
           __size_of_stopShot 0004                   __smallconst 0E00                      _BAUDCON1 000F67  
          displayCtrl@display 0017          __end_of_printEndGame 13B4              ___lwdiv@quotient 0018  
                    ?_sprintf 001F        __size_of_spi_Send_Read 0012                __size_of_rxIsr 00F8  
                ??_changeMode 0013          __end_of_printRemTime 170E      __size_of_getRandomTarget 0026  
                    _LATBbits 000F8A                      _LATDbits 000F8C            _initialisation_LCD 17B4  
          _initialisation_SPI 156A                      _IPR1bits 000F9F                      _PIE1bits 000F9D  
                    _PIR1bits 000F9E                      _RCONbits 000FD0           ?_initialisation_LCD 0001  
       __size_of_setPinConfig 001A           ?_initialisation_SPI 0001                     _printMBED 1648  
                   _timerFlag 0039                      _RPINR0_1 000E2A          __end_of_toggleGunLED 184C  
                    _SSP2CON1 000F19                      _SSP2CON3 000F39                   _displayCtrl 14A4  
                    _SSP2STAT 000F1A                     _printStat 12F2                setModeLED@Mode 0013  
          __end_of_changeMode 183C                   _globalTimer 0034          ??_initialisation_LCD 0019  
        ??_initialisation_SPI 0013                 ??_printPoints 0032                   _INTCON2bits 000FF1  
                 _INTCON3bits 000FF0                     copy_data0 15F6          __end_of_putStringLCD 12F2  
                _setPinConfig 17D0                      __Hrparam 0000                      __Lrparam 0000  
                  ?_printMBED 0001                 _spi_Send_Read 1818                    ?_printStat 002D  
            __size_of___lwdiv 0052              __size_of___lwmod 0042              ?_printRemBullets 0060  
                  sprintf@val 002A                _printStartGame 15A8                      _ammoLeft 004A  
             ___lwdiv@divisor 0015               ___lwdiv@counter 0017                 ?_clearDisplay 0001  
                    __ptext10 170E                      __ptext11 1730                      __ptext20 1618  
                    __ptext12 12F2                      __ptext21 1458                      __ptext13 1648  
                    __ptext30 16A4                      __ptext22 1406                      __ptext14 1676  
                    __ptext31 185C                      __ptext23 17B4                      __ptext15 135A  
                    __ptext32 182A                      __ptext24 156A                      __ptext16 104A  
                    __ptext33 184C                      __ptext25 152A                      __ptext17 14E8  
                    __ptext34 11A6                      __ptext26 14A4                      __ptext18 13B4  
                    __ptext27 1752                      __ptext19 127C                      __ptext28 17EA  
                    __ptext29 1818                      _fireShot 185C                  ??_setModeLED 0013  
                   waitASec@i 0014              __size_of_sprintf 015C                  ??_moveCursor 001A  
                    _modeFlag 003C                 __size_of_main 01E2                   _myModeState 0042  
 __end_of_initialisation_PORT 156A           __end_of_printPoints 1752    activateLEDTarget@targetLED 0013  
                    _waitASec 1676             ??_getRandomTarget 0015                ?_spi_Send_Read 0001  
                    int$flags 004C                      _putchLCD 1618                      _stopShot 1858  
                _SSP2STATbits 000F1A         __size_of_printEndGame 005A            __end_of_setModeLED 1794  
      __end_of_printStartGame 15E2            _setInterruptConfig 1794            __end_of_moveCursor 14A4  
                  _INTCONbits 000FF2         __size_of_printRemTime 0022                ??_clearDisplay 0015  
         ?_setInterruptConfig 0001                      intlevel2 0000                     sprintf@ap 0026  
                   sprintf@sp 001F              ___lwmod@dividend 001A             _activateLEDTarget 11A6  
       __size_of_toggleGunLED 0010            ?_activateLEDTarget 0013         __end_of_setUARTconfig 16EC  
                _printEndGame 135A       __size_of_activateTarget 0008            printStat@statArray 002F  
                 ??_printMBED 001D          ??_setInterruptConfig 0013           ??_activateLEDTarget 0015  
                 ??_printStat 002F                  _printRemTime 16EC                    _RPINR12_13 000E30  
                  _RPINR26_27 000E37                 _toggleCounter 0036               ?_printStartGame 0001  
                    sprintf@c 002C                      sprintf@f 0021               ___lwmod@divisor 001C  
       __size_of_putStringLCD 0076               ___lwmod@counter 001E                  _toggleGunLED 183C  
                 _printPoints 1730     __end_of_activateLEDTarget 127C               ??_spi_Send_Read 0013  
