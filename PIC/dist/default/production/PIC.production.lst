

Microchip Technology PIC18 LITE Macro Assembler V1.43 build -156212558 
                                                                                               Sun Dec 03 13:10:06 2017

Microchip Technology Omniscient Code Generator v1.43 (Free mode) build 201707250354
     1                           	processor	18F67J94
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    39                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    40                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    41                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    42  0000                     
    43                           ; Version 1.43
    44                           ; Generated 25/07/2017 GMT
    45                           ; 
    46                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    47                           ; All rights reserved.
    48                           ; 
    49                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    50                           ; 
    51                           ; Redistribution and use in source and binary forms, with or without modification, are
    52                           ; permitted provided that the following conditions are met:
    53                           ; 
    54                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    55                           ;        conditions and the following disclaimer.
    56                           ; 
    57                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    58                           ;        of conditions and the following disclaimer in the documentation and/or other
    59                           ;        materials provided with the distribution.
    60                           ; 
    61                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    62                           ;        software without specific prior written permission.
    63                           ; 
    64                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    65                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    66                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    67                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    68                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    69                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    70                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    71                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    72                           ; 
    73                           ; 
    74                           ; Code-generator required, PIC18F67J94 Definitions
    75                           ; 
    76                           ; SFR Addresses
    77  0000                     
    78                           	psect	idataCOMRAM
    79  0014D6                     __pidataCOMRAM:
    80                           	opt stack 0
    81                           
    82                           ;initializer for _singleGameTime
    83  0014D6  0078               	dw	120
    84                           
    85                           ;initializer for _ammoLeft
    86  0014D8  000C               	dw	12
    87                           
    88                           	psect	smallconst
    89  000E00                     __psmallconst:
    90                           	opt stack 0
    91  000E00  00                 	db	0
    92  000E01  0001               	dw	1
    93  000E03  000A               	dw	10
    94  000E05  0064               	dw	100
    95  000E07  03E8               	dw	1000
    96  000E09  2710               	dw	10000
    97  000E0B                     __end_of_dpowers:
    98                           	opt stack 0
    99  0000                     _RPINR12_13	set	3632
   100  0000                     _RPOR22_23	set	3613
   101  0000                     _RPOR24_25	set	3614
   102  0000                     _ANCON1	set	3655
   103  0000                     _RPINR26_27	set	3639
   104  0000                     _RPOR26_27	set	3615
   105  0000                     _RPINR0_1	set	3626
   106  0000                     _SSP2CON3	set	3897
   107  0000                     _SSP2STAT	set	3866
   108  0000                     _SSP2CON1	set	3865
   109  0000                     _SSP2STATbits	set	3866
   110  0000                     _SSP2BUF	set	3843
   111  0000                     _TRISCbits	set	3988
   112  0000                     _TRISDbits	set	3989
   113  0000                     _OSCCON	set	4051
   114  0000                     _LATDbits	set	3980
   115  0000                     _LATBbits	set	3978
   116  0000                     _LATC	set	3979
   117  0000                     _LATA	set	3977
   118  0000                     _TRISBbits	set	3987
   119  0000                     _TRISD	set	3989
   120  0000                     _TRISC	set	3988
   121  0000                     _TRISA	set	3986
   122  0000                     _RCONbits	set	4048
   123  0000                     _INTCON2bits	set	4081
   124  0000                     _TRISAbits	set	3986
   125  0000                     _IPR1bits	set	3999
   126  0000                     _TXREG1	set	4013
   127  0000                     _SPBRG1	set	4015
   128  0000                     _RCSTA1	set	4011
   129  0000                     _TXSTA1	set	4012
   130  0000                     _BAUDCON1	set	3943
   131  0000                     _RCREG1	set	4014
   132  0000                     _RCSTAbits	set	4011
   133  0000                     _PIR1bits	set	3998
   134  0000                     _INTCON3bits	set	4080
   135  0000                     _PIE1bits	set	3997
   136  0000                     _INTCONbits	set	4082
   137  0000                     _T0CONbits	set	4053
   138  000E0B  45                 	db	69	;'E'
   139  000E0C  20                 	db	32
   140  000E0D  20                 	db	32
   141  000E0E  4E                 	db	78	;'N'
   142  000E0F  20                 	db	32
   143  000E10  20                 	db	32
   144  000E11  44                 	db	68	;'D'
   145  000E12  20                 	db	32
   146  000E13  20                 	db	32
   147  000E14  20                 	db	32
   148  000E15  47                 	db	71	;'G'
   149  000E16  20                 	db	32
   150  000E17  20                 	db	32
   151  000E18  41                 	db	65	;'A'
   152  000E19  20                 	db	32
   153  000E1A  20                 	db	32
   154  000E1B  4D                 	db	77	;'M'
   155  000E1C  20                 	db	32
   156  000E1D  20                 	db	32
   157  000E1E  45                 	db	69	;'E'
   158  000E1F  20                 	db	32
   159  000E20  00                 	db	0
   160  000E21                     STR_3:
   161  000E21  50                 	db	80	;'P'
   162  000E22  4F                 	db	79	;'O'
   163  000E23  49                 	db	73	;'I'
   164  000E24  4E                 	db	78	;'N'
   165  000E25  54                 	db	84	;'T'
   166  000E26  53                 	db	83	;'S'
   167  000E27  20                 	db	32
   168  000E28  42                 	db	66	;'B'
   169  000E29  55                 	db	85	;'U'
   170  000E2A  4C                 	db	76	;'L'
   171  000E2B  4C                 	db	76	;'L'
   172  000E2C  45                 	db	69	;'E'
   173  000E2D  54                 	db	84	;'T'
   174  000E2E  53                 	db	83	;'S'
   175  000E2F  20                 	db	32
   176  000E30  54                 	db	84	;'T'
   177  000E31  49                 	db	73	;'I'
   178  000E32  4D                 	db	77	;'M'
   179  000E33  45                 	db	69	;'E'
   180  000E34  00                 	db	0
   181  000E35                     STR_1:
   182  000E35  20                 	db	32
   183  000E36  20                 	db	32
   184  000E37  45                 	db	69	;'E'
   185  000E38  4D                 	db	77	;'M'
   186  000E39  42                 	db	66	;'B'
   187  000E3A  45                 	db	69	;'E'
   188  000E3B  44                 	db	68	;'D'
   189  000E3C  44                 	db	68	;'D'
   190  000E3D  45                 	db	69	;'E'
   191  000E3E  44                 	db	68	;'D'
   192  000E3F  20                 	db	32
   193  000E40  55                 	db	85	;'U'
   194  000E41  4E                 	db	78	;'N'
   195  000E42  49                 	db	73	;'I'
   196  000E43  56                 	db	86	;'V'
   197  000E44  45                 	db	69	;'E'
   198  000E45  52                 	db	82	;'R'
   199  000E46  53                 	db	83	;'S'
   200  000E47  45                 	db	69	;'E'
   201  000E48  00                 	db	0
   202  000E49                     STR_2:
   203  000E49  53                 	db	83	;'S'
   204  000E4A  20                 	db	32
   205  000E4B  20                 	db	32
   206  000E4C  54                 	db	84	;'T'
   207  000E4D  20                 	db	32
   208  000E4E  20                 	db	32
   209  000E4F  41                 	db	65	;'A'
   210  000E50  20                 	db	32
   211  000E51  20                 	db	32
   212  000E52  52                 	db	82	;'R'
   213  000E53  20                 	db	32
   214  000E54  20                 	db	32
   215  000E55  54                 	db	84	;'T'
   216  000E56  20                 	db	32
   217  000E57  21                 	db	33
   218  000E58  00                 	db	0
   219  000E59                     STR_6:
   220  000E59  20                 	db	32
   221  000E5A  20                 	db	32
   222  000E5B  00                 	db	0
   223  000E5C  25                 	db	37
   224  000E5D  64                 	db	100	;'d'
   225  000E5E  00                 	db	0
   226  0000                     
   227                           ; #config settings
   228  000E5F  00                 	db	0	; dummy byte at the end
   229  0000                     
   230                           	psect	cinit
   231  0012CA                     __pcinit:
   232                           	opt stack 0
   233  0012CA                     start_initialization:
   234                           	opt stack 0
   235  0012CA                     __initialization:
   236                           	opt stack 0
   237                           
   238                           ; Initialize objects allocated to COMRAM (4 bytes)
   239                           ; load TBLPTR registers with __pidataCOMRAM
   240  0012CA  0ED6               	movlw	low __pidataCOMRAM
   241  0012CC  6EF6               	movwf	tblptrl,c
   242  0012CE  0E14               	movlw	high __pidataCOMRAM
   243  0012D0  6EF7               	movwf	tblptrh,c
   244  0012D2  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   245  0012D4  6EF8               	movwf	tblptru,c
   246  0012D6  EE00  F037         	lfsr	0,__pdataCOMRAM
   247  0012DA  EE10 F004          	lfsr	1,4
   248  0012DE                     copy_data0:
   249  0012DE  0009               	tblrd		*+
   250  0012E0  CFF5 FFEE          	movff	tablat,postinc0
   251  0012E4  50E5               	movf	postdec1,w,c
   252  0012E6  50E1               	movf	fsr1l,w,c
   253  0012E8  E1FA               	bnz	copy_data0
   254                           
   255                           ; Clear objects allocated to COMRAM (22 bytes)
   256  0012EA  EE00  F021         	lfsr	0,__pbssCOMRAM
   257  0012EE  0E16               	movlw	22
   258  0012F0                     clear_0:
   259  0012F0  6AEE               	clrf	postinc0,c
   260  0012F2  06E8               	decf	wreg,f,c
   261  0012F4  E1FD               	bnz	clear_0
   262  0012F6                     end_of_initialization:
   263                           	opt stack 0
   264  0012F6                     __end_of__initialization:
   265                           	opt stack 0
   266  0012F6  903B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   267  0012F8  923B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   268  0012FA  0100               	movlb	0
   269  0012FC  EF30  F007         	goto	_main	;jump to C main() function
   270                           tblptru	equ	0xFF8
   271                           tblptrh	equ	0xFF7
   272                           tblptrl	equ	0xFF6
   273                           tablat	equ	0xFF5
   274                           postinc0	equ	0xFEE
   275                           wreg	equ	0xFE8
   276                           postdec1	equ	0xFE5
   277                           fsr1l	equ	0xFE1
   278                           
   279                           	psect	bssCOMRAM
   280  000021                     __pbssCOMRAM:
   281                           	opt stack 0
   282  000021                     _totalPoints:
   283                           	opt stack 0
   284  000021                     	ds	2
   285  000023                     _globalTimer:
   286                           	opt stack 0
   287  000023                     	ds	2
   288  000025                     _toggleCounter:
   289                           	opt stack 0
   290  000025                     	ds	2
   291  000027                     _endFlag:
   292                           	opt stack 0
   293  000027                     	ds	1
   294  000028                     _timerFlag:
   295                           	opt stack 0
   296  000028                     	ds	1
   297  000029                     _capteurFlag:
   298                           	opt stack 0
   299  000029                     	ds	1
   300  00002A                     _pewFlag:
   301                           	opt stack 0
   302  00002A                     	ds	1
   303  00002B                     _modeFlag:
   304                           	opt stack 0
   305  00002B                     	ds	1
   306  00002C                     _reloadFlag:
   307                           	opt stack 0
   308  00002C                     	ds	1
   309  00002D                     _rxFlag:
   310                           	opt stack 0
   311  00002D                     	ds	1
   312  00002E                     _ErrorUART:
   313                           	opt stack 0
   314  00002E                     	ds	1
   315  00002F                     _transferedData:
   316                           	opt stack 0
   317  00002F                     	ds	1
   318  000030                     _rxChar:
   319                           	opt stack 0
   320  000030                     	ds	1
   321  000031                     _myModeState:
   322                           	opt stack 0
   323  000031                     	ds	1
   324  000032                     _myState:
   325                           	opt stack 0
   326  000032                     	ds	1
   327  000033                     _nextTarget:
   328                           	opt stack 0
   329  000033                     	ds	4
   330                           tblptru	equ	0xFF8
   331                           tblptrh	equ	0xFF7
   332                           tblptrl	equ	0xFF6
   333                           tablat	equ	0xFF5
   334                           postinc0	equ	0xFEE
   335                           wreg	equ	0xFE8
   336                           postdec1	equ	0xFE5
   337                           fsr1l	equ	0xFE1
   338                           
   339                           	psect	dataCOMRAM
   340  000037                     __pdataCOMRAM:
   341                           	opt stack 0
   342  000037                     _singleGameTime:
   343                           	opt stack 0
   344  000037                     	ds	2
   345  000039                     _ammoLeft:
   346                           	opt stack 0
   347  000039                     	ds	2
   348                           tblptru	equ	0xFF8
   349                           tblptrh	equ	0xFF7
   350                           tblptrl	equ	0xFF6
   351                           tablat	equ	0xFF5
   352                           postinc0	equ	0xFEE
   353                           wreg	equ	0xFE8
   354                           postdec1	equ	0xFE5
   355                           fsr1l	equ	0xFE1
   356                           
   357                           	psect	cstackCOMRAM
   358  000001                     __pcstackCOMRAM:
   359                           	opt stack 0
   360  000001                     ??_rxIsr:
   361  000001                     
   362                           ; 1 bytes @ 0x0
   363  000001                     	ds	18
   364  000013                     ??_waitASec:
   365  000013                     ??_fliplr:
   366  000013                     ??_initialisation_PORT:
   367  000013                     setModeLED@Mode:
   368                           	opt stack 0
   369  000013                     spi_Send_Read@byte:
   370                           	opt stack 0
   371  000013                     getRandomTarget@Target:
   372                           	opt stack 0
   373  000013                     activateTarget@targetNbr:
   374                           	opt stack 0
   375  000013                     activateLEDTarget@targetLED:
   376                           	opt stack 0
   377                           
   378                           ; 2 bytes @ 0x12
   379  000013                     	ds	1
   380  000014                     readBusyFlag@retValue:
   381                           	opt stack 0
   382  000014                     waitASec@i:
   383                           	opt stack 0
   384                           
   385                           ; 2 bytes @ 0x13
   386  000014                     	ds	1
   387  000015                     ??_activateLEDTarget:
   388  000015                     displayCtrl@cursor:
   389                           	opt stack 0
   390  000015                     fliplr@input:
   391                           	opt stack 0
   392                           
   393                           ; 1 bytes @ 0x14
   394  000015                     	ds	1
   395  000016                     displayCtrl@blink:
   396                           	opt stack 0
   397  000016                     putchLCD@input:
   398                           	opt stack 0
   399  000016                     moveCursor@row:
   400                           	opt stack 0
   401                           
   402                           ; 2 bytes @ 0x15
   403  000016                     	ds	1
   404  000017                     displayCtrl@display:
   405                           	opt stack 0
   406  000017                     putStringLCD@input:
   407                           	opt stack 0
   408                           
   409                           ; 2 bytes @ 0x16
   410  000017                     	ds	1
   411  000018                     displayCtrl@BCD:
   412                           	opt stack 0
   413  000018                     moveCursor@col:
   414                           	opt stack 0
   415                           
   416                           ; 2 bytes @ 0x17
   417  000018                     	ds	1
   418  000019                     ??_putStringLCD:
   419                           
   420                           ; 1 bytes @ 0x18
   421  000019                     	ds	1
   422  00001A                     moveCursor@address:
   423                           	opt stack 0
   424                           
   425                           ; 1 bytes @ 0x19
   426  00001A                     	ds	1
   427  00001B                     activateLEDTarget@ledNBR:
   428                           	opt stack 0
   429  00001B                     putStringLCD@i:
   430                           	opt stack 0
   431                           
   432                           ; 2 bytes @ 0x1A
   433  00001B                     	ds	2
   434  00001D                     ??_main:
   435                           
   436                           ; 1 bytes @ 0x1C
   437  00001D                     	ds	2
   438  00001F                     main@i:
   439                           	opt stack 0
   440                           
   441                           ; 2 bytes @ 0x1E
   442  00001F                     	ds	2
   443                           tblptru	equ	0xFF8
   444                           tblptrh	equ	0xFF7
   445                           tblptrl	equ	0xFF6
   446                           tablat	equ	0xFF5
   447                           postinc0	equ	0xFEE
   448                           wreg	equ	0xFE8
   449                           postdec1	equ	0xFE5
   450                           fsr1l	equ	0xFE1
   451                           
   452 ;;
   453 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   454 ;;
   455 ;; *************** function _main *****************
   456 ;; Defined at:
   457 ;;		line 80 in file "main.c"
   458 ;; Parameters:    Size  Location     Type
   459 ;;		None
   460 ;; Auto vars:     Size  Location     Type
   461 ;;  i               2   30[COMRAM] int 
   462 ;; Return value:  Size  Location     Type
   463 ;;                  1    wreg      void 
   464 ;; Registers used:
   465 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   466 ;; Tracked objects:
   467 ;;		On entry : 0/0
   468 ;;		On exit  : 0/0
   469 ;;		Unchanged: 0/0
   470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   471 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   472 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   473 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   474 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   475 ;;Total ram usage:        4 bytes
   476 ;; Hardware stack levels required when called:    6
   477 ;; This function calls:
   478 ;;		_activateLEDTarget
   479 ;;		_activateTarget
   480 ;;		_changeMode
   481 ;;		_fireShot
   482 ;;		_getRandomTarget
   483 ;;		_initialisation_LCD
   484 ;;		_printMBED
   485 ;;		_printStartGame
   486 ;;		_setInterruptConfig
   487 ;;		_setModeLED
   488 ;;		_setPinConfig
   489 ;;		_setTimerConfig
   490 ;;		_setUARTconfig
   491 ;;		_stopShot
   492 ;;		_toggleGunLED
   493 ;; This function is called by:
   494 ;;		Startup code after reset
   495 ;; This function uses a non-reentrant model
   496 ;;
   497                           
   498                           	psect	text0
   499  000E60                     __ptext0:
   500                           	opt stack 0
   501  000E60                     _main:
   502                           	opt stack 25
   503                           
   504                           ;main.c: 81: setUARTconfig();
   505                           
   506                           ;incstack = 0
   507  000E60  ECD9  F009         	call	_setUARTconfig	;wreg free
   508                           
   509                           ;main.c: 82: setPinConfig();
   510  000E64  EC29  F00A         	call	_setPinConfig	;wreg free
   511                           
   512                           ;main.c: 83: setTimerConfig();
   513  000E68  EC43  F00A         	call	_setTimerConfig	;wreg free
   514                           
   515                           ;main.c: 84: setInterruptConfig();
   516  000E6C  EC0B  F00A         	call	_setInterruptConfig	;wreg free
   517                           
   518                           ;main.c: 85: initialisation_LCD();
   519  000E70  EC1B  F00A         	call	_initialisation_LCD	;wreg free
   520                           
   521                           ;main.c: 86: printMBED();
   522  000E74  EC98  F009         	call	_printMBED	;wreg free
   523                           
   524                           ;main.c: 88: T0CONbits.TMR0ON = 1;
   525  000E78  8ED5               	bsf	4053,7,c	;volatile
   526                           
   527                           ;main.c: 89: printStartGame();
   528  000E7A  EC48  F009         	call	_printStartGame	;wreg free
   529                           
   530                           ;main.c: 116: while(!endFlag){
   531  000E7E  D0AD               	goto	l133
   532  000E80                     
   533                           ;main.c: 118: if(timerFlag){
   534  000E80  5028               	movf	_timerFlag,w,c
   535  000E82  B4D8               	btfsc	status,2,c
   536  000E84  D005               	goto	l129
   537                           
   538                           ;main.c: 119: globalTimer++;
   539  000E86  4A23               	infsnz	_globalTimer,f,c
   540  000E88  2A24               	incf	_globalTimer+1,f,c
   541                           
   542                           ;main.c: 120: timerFlag=0;
   543  000E8A  0E00               	movlw	0
   544  000E8C  6E28               	movwf	_timerFlag,c
   545                           
   546                           ;main.c: 121: INTCONbits.TMR0IE = 1;
   547  000E8E  8AF2               	bsf	intcon,5,c	;volatile
   548  000E90                     l129:
   549                           
   550                           ;main.c: 122: }
   551                           ;main.c: 124: if(globalTimer==singleGameTime ){
   552  000E90  5037               	movf	_singleGameTime,w,c
   553  000E92  1823               	xorwf	_globalTimer,w,c
   554  000E94  E103               	bnz	u501
   555  000E96  5038               	movf	_singleGameTime+1,w,c
   556  000E98  1824               	xorwf	_globalTimer+1,w,c
   557  000E9A  A4D8               	btfss	status,2,c
   558  000E9C                     u501:
   559  000E9C  D08B               	goto	l131
   560                           
   561                           ;main.c: 125: myState= END_GAME;
   562  000E9E  0E05               	movlw	5
   563  000EA0  6E32               	movwf	_myState,c
   564                           
   565                           ;main.c: 126: }
   566                           ;main.c: 134: switch(myState){
   567  000EA2  D088               	goto	l131
   568  000EA4                     
   569                           ;main.c: 141: getRandomTarget(nextTarget);
   570  000EA4  0E33               	movlw	low _nextTarget
   571  000EA6  6E13               	movwf	getRandomTarget@Target,c
   572  000EA8  0E00               	movlw	high _nextTarget
   573  000EAA  6E14               	movwf	getRandomTarget@Target+1,c
   574  000EAC  ECC6  F009         	call	_getRandomTarget	;wreg free
   575                           
   576                           ;main.c: 142: activateTarget(nextTarget[0]);
   577  000EB0  C033  F013         	movff	_nextTarget,activateTarget@targetNbr
   578  000EB4  C034  F014         	movff	_nextTarget+1,activateTarget@targetNbr+1
   579  000EB8  EC67  F00A         	call	_activateTarget	;wreg free
   580                           
   581                           ;main.c: 143: activateLEDTarget(nextTarget);
   582  000EBC  0E33               	movlw	low _nextTarget
   583  000EBE  6E13               	movwf	activateLEDTarget@targetLED,c
   584  000EC0  0E00               	movlw	high _nextTarget
   585  000EC2  6E14               	movwf	activateLEDTarget@targetLED+1,c
   586  000EC4  ECF2  F007         	call	_activateLEDTarget	;wreg free
   587                           
   588                           ;main.c: 144: myState= WAIT_KILL;
   589  000EC8  0E04               	movlw	4
   590  000ECA  D04E               	goto	L3
   591  000ECC                     
   592                           ;main.c: 148: totalPoints++;
   593  000ECC  4A21               	infsnz	_totalPoints,f,c
   594  000ECE  2A22               	incf	_totalPoints+1,f,c
   595                           
   596                           ;main.c: 149: myState= SELECT_NEW_TARGET;
   597  000ED0  0E01               	movlw	1
   598  000ED2  D04A               	goto	L3
   599  000ED4                     
   600                           ;main.c: 153: if(reloadFlag){
   601  000ED4  502C               	movf	_reloadFlag,w,c
   602  000ED6  B4D8               	btfsc	status,2,c
   603  000ED8  D005               	goto	l137
   604                           
   605                           ;main.c: 154: ammoLeft= 12;
   606  000EDA  0E00               	movlw	0
   607  000EDC  6E3A               	movwf	_ammoLeft+1,c
   608  000EDE  0E0C               	movlw	12
   609  000EE0  6E39               	movwf	_ammoLeft,c
   610  000EE2  D061               	goto	L4
   611  000EE4                     l137:
   612                           
   613                           ;main.c: 159: else if (modeFlag){
   614  000EE4  502B               	movf	_modeFlag,w,c
   615  000EE6  B4D8               	btfsc	status,2,c
   616  000EE8  D008               	goto	l139
   617                           
   618                           ;main.c: 160: changeMode();
   619  000EEA  EC56  F00A         	call	_changeMode	;wreg free
   620                           
   621                           ;main.c: 161: setModeLED(myModeState);
   622  000EEE  5031               	movf	_myModeState,w,c
   623  000EF0  ECFB  F009         	call	_setModeLED
   624                           
   625                           ;main.c: 162: modeFlag=0;
   626  000EF4  0E00               	movlw	0
   627  000EF6  6E2B               	movwf	_modeFlag,c
   628  000EF8  D058               	goto	l1632
   629  000EFA                     l139:
   630                           
   631                           ;main.c: 166: else if (pewFlag && ammoLeft !=0){
   632  000EFA  502A               	movf	_pewFlag,w,c
   633  000EFC  B4D8               	btfsc	status,2,c
   634  000EFE  D01D               	goto	l141
   635  000F00  5039               	movf	_ammoLeft,w,c
   636  000F02  103A               	iorwf	_ammoLeft+1,w,c
   637  000F04  B4D8               	btfsc	status,2,c
   638  000F06  D019               	goto	l141
   639                           
   640                           ;main.c: 167: fireShot();
   641  000F08  EC6F  F00A         	call	_fireShot	;wreg free
   642                           
   643                           ;main.c: 168: for (int i =0;i<10000;i++){}
   644  000F0C  0E00               	movlw	0
   645  000F0E  6E20               	movwf	main@i+1,c
   646  000F10  0E00               	movlw	0
   647  000F12  6E1F               	movwf	main@i,c
   648  000F14                     l1586:
   649  000F14  BE20               	btfsc	main@i+1,7,c
   650  000F16  D006               	goto	l142
   651  000F18  0E10               	movlw	16
   652  000F1A  5C1F               	subwf	main@i,w,c
   653  000F1C  0E27               	movlw	39
   654  000F1E  5820               	subwfb	main@i+1,w,c
   655  000F20  B0D8               	btfsc	status,0,c
   656  000F22  D003               	goto	u560
   657  000F24                     l142:
   658  000F24  4A1F               	infsnz	main@i,f,c
   659  000F26  2A20               	incf	main@i+1,f,c
   660  000F28  D7F5               	goto	l1586
   661  000F2A                     u560:
   662                           
   663                           ;main.c: 169: stopShot();
   664  000F2A  EC6D  F00A         	call	_stopShot	;wreg free
   665                           
   666                           ;main.c: 170: ammoLeft -= 1;
   667  000F2E  0639               	decf	_ammoLeft,f,c
   668  000F30  A0D8               	btfss	status,0,c
   669  000F32  063A               	decf	_ammoLeft+1,f,c
   670                           
   671                           ;main.c: 171: pewFlag = 0;
   672  000F34  0E00               	movlw	0
   673  000F36  6E2A               	movwf	_pewFlag,c
   674  000F38  D038               	goto	l1632
   675  000F3A                     l141:
   676                           
   677                           ;main.c: 174: else if(ammoLeft==0){
   678  000F3A  5039               	movf	_ammoLeft,w,c
   679  000F3C  103A               	iorwf	_ammoLeft+1,w,c
   680  000F3E  A4D8               	btfss	status,2,c
   681  000F40  D002               	goto	l145
   682                           
   683                           ;main.c: 175: myState = NEED_RELOAD;
   684  000F42  0E03               	movlw	3
   685  000F44  D011               	goto	L3
   686  000F46                     l145:
   687                           
   688                           ;main.c: 177: else if(capteurFlag && myModeState == nextTarget[1]){
   689  000F46  5029               	movf	_capteurFlag,w,c
   690  000F48  B4D8               	btfsc	status,2,c
   691  000F4A  D047               	goto	l133
   692  000F4C  5031               	movf	_myModeState,w,c
   693  000F4E  6E1D               	movwf	??_main& (0+255),c
   694  000F50  6A1E               	clrf	(??_main+1)& (0+255),c
   695  000F52  5035               	movf	_nextTarget+2,w,c
   696  000F54  181D               	xorwf	??_main,w,c
   697  000F56  E141               	bnz	l1640
   698  000F58  5036               	movf	_nextTarget+3,w,c
   699  000F5A  181E               	xorwf	??_main+1,w,c
   700  000F5C  A4D8               	btfss	status,2,c
   701  000F5E  D03D               	goto	l133
   702                           
   703                           ;main.c: 178: capteurFlag = 0;
   704  000F60  0E00               	movlw	0
   705  000F62  6E29               	movwf	_capteurFlag,c
   706                           
   707                           ;main.c: 179: INTCON3bits.INT1E = 1;
   708  000F64  86F0               	bsf	intcon3,3,c	;volatile
   709                           
   710                           ;main.c: 180: myState = ACCUMULATE_POINTS;
   711  000F66  0E02               	movlw	2
   712  000F68                     L3:
   713  000F68  6E32               	movwf	_myState,c
   714                           
   715                           ;main.c: 181: }
   716                           ;main.c: 183: break;
   717  000F6A  D037               	goto	l133
   718  000F6C                     
   719                           ;main.c: 186: toggleCounter++;
   720  000F6C  4A25               	infsnz	_toggleCounter,f,c
   721  000F6E  2A26               	incf	_toggleCounter+1,f,c
   722                           
   723                           ;main.c: 187: if (toggleCounter==5000){
   724  000F70  0E88               	movlw	136
   725  000F72  1825               	xorwf	_toggleCounter,w,c
   726  000F74  E10A               	bnz	l1622
   727  000F76  0E13               	movlw	19
   728  000F78  1826               	xorwf	_toggleCounter+1,w,c
   729  000F7A  A4D8               	btfss	status,2,c
   730  000F7C  D006               	goto	l149
   731                           
   732                           ;main.c: 188: toggleGunLED();
   733  000F7E  EC5F  F00A         	call	_toggleGunLED	;wreg free
   734                           
   735                           ;main.c: 189: toggleCounter=0;
   736  000F82  0E00               	movlw	0
   737  000F84  6E26               	movwf	_toggleCounter+1,c
   738  000F86  0E00               	movlw	0
   739  000F88  6E25               	movwf	_toggleCounter,c
   740  000F8A                     l149:
   741  000F8A                     l1622:
   742                           
   743                           ;main.c: 190: }
   744                           ;main.c: 191: if(reloadFlag){
   745  000F8A  502C               	movf	_reloadFlag,w,c
   746  000F8C  B4D8               	btfsc	status,2,c
   747  000F8E  D025               	goto	l133
   748                           
   749                           ;main.c: 192: ammoLeft= 12;
   750  000F90  0E00               	movlw	0
   751  000F92  6E3A               	movwf	_ammoLeft+1,c
   752  000F94  0E0C               	movlw	12
   753  000F96  6E39               	movwf	_ammoLeft,c
   754                           
   755                           ;main.c: 193: setModeLED(myModeState);
   756  000F98  5031               	movf	_myModeState,w,c
   757  000F9A  ECFB  F009         	call	_setModeLED
   758                           
   759                           ;main.c: 194: toggleCounter=0;
   760  000F9E  0E00               	movlw	0
   761  000FA0  6E26               	movwf	_toggleCounter+1,c
   762  000FA2  0E00               	movlw	0
   763  000FA4  6E25               	movwf	_toggleCounter,c
   764  000FA6                     L4:
   765                           
   766                           ;main.c: 195: reloadFlag=0;
   767  000FA6  0E00               	movlw	0
   768  000FA8  6E2C               	movwf	_reloadFlag,c
   769  000FAA                     l1632:
   770                           
   771                           ;main.c: 196: PIE1bits.RC1IE = 1;
   772  000FAA  8A9D               	bsf	3997,5,c	;volatile
   773                           
   774                           ;main.c: 197: }
   775                           ;main.c: 198: break;
   776  000FAC  D016               	goto	l133
   777  000FAE                     
   778                           ;main.c: 201: endFlag = 1;
   779  000FAE  0E01               	movlw	1
   780  000FB0  6E27               	movwf	_endFlag,c
   781                           
   782                           ;main.c: 203: }
   783                           
   784                           ;main.c: 202: break;
   785  000FB2  D013               	goto	l133
   786  000FB4                     l131:
   787  000FB4  5032               	movf	_myState,w,c
   788                           
   789                           ; Switch size 1, requested type "space"
   790                           ; Number of cases is 6, Range of values is 0 to 5
   791                           ; switch strategies available:
   792                           ; Name         Instructions Cycles
   793                           ; simple_byte           19    10 (average)
   794                           ;	Chosen strategy is simple_byte
   795  000FB6  0A00               	xorlw	0	; case 0
   796  000FB8  B4D8               	btfsc	status,2,c
   797  000FBA  D00F               	goto	l133
   798  000FBC  0A01               	xorlw	1	; case 1
   799  000FBE  B4D8               	btfsc	status,2,c
   800  000FC0  D771               	goto	l134
   801  000FC2  0A03               	xorlw	3	; case 2
   802  000FC4  B4D8               	btfsc	status,2,c
   803  000FC6  D782               	goto	l135
   804  000FC8  0A01               	xorlw	1	; case 3
   805  000FCA  B4D8               	btfsc	status,2,c
   806  000FCC  D7CF               	goto	l148
   807  000FCE  0A07               	xorlw	7	; case 4
   808  000FD0  B4D8               	btfsc	status,2,c
   809  000FD2  D780               	goto	l136
   810  000FD4  0A01               	xorlw	1	; case 5
   811  000FD6  B4D8               	btfsc	status,2,c
   812  000FD8  D7EA               	goto	l151
   813  000FDA                     l133:
   814  000FDA                     l1640:
   815  000FDA  5027               	movf	_endFlag,w,c
   816  000FDC  A4D8               	btfss	status,2,c
   817  000FDE  EF80  F000         	goto	start
   818  000FE2  D74E               	goto	l128
   819  000FE4                     __end_of_main:
   820                           	opt stack 0
   821                           tblptru	equ	0xFF8
   822                           tblptrh	equ	0xFF7
   823                           tblptrl	equ	0xFF6
   824                           tablat	equ	0xFF5
   825                           intcon	equ	0xFF2
   826                           intcon3	equ	0xFF0
   827                           postinc0	equ	0xFEE
   828                           wreg	equ	0xFE8
   829                           postdec1	equ	0xFE5
   830                           fsr1l	equ	0xFE1
   831                           status	equ	0xFD8
   832                           
   833 ;; *************** function _toggleGunLED *****************
   834 ;; Defined at:
   835 ;;		line 357 in file "main.c"
   836 ;; Parameters:    Size  Location     Type
   837 ;;		None
   838 ;; Auto vars:     Size  Location     Type
   839 ;;		None
   840 ;; Return value:  Size  Location     Type
   841 ;;                  1    wreg      void 
   842 ;; Registers used:
   843 ;;		None
   844 ;; Tracked objects:
   845 ;;		On entry : 0/0
   846 ;;		On exit  : 0/0
   847 ;;		Unchanged: 0/0
   848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   849 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   850 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   851 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   852 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   853 ;;Total ram usage:        0 bytes
   854 ;; Hardware stack levels used:    1
   855 ;; Hardware stack levels required when called:    1
   856 ;; This function calls:
   857 ;;		Nothing
   858 ;; This function is called by:
   859 ;;		_main
   860 ;; This function uses a non-reentrant model
   861 ;;
   862                           
   863                           	psect	text1
   864  0014BE                     __ptext1:
   865                           	opt stack 0
   866  0014BE                     _toggleGunLED:
   867                           	opt stack 29
   868                           
   869                           ;main.c: 358: if (LATDbits.LATD0==0){
   870                           
   871                           ;incstack = 0
   872  0014BE  B08C               	btfsc	3980,0,c	;volatile
   873  0014C0  D003               	goto	l214
   874                           
   875                           ;main.c: 359: LATDbits.LATD0 = 1;
   876  0014C2  808C               	bsf	3980,0,c	;volatile
   877                           
   878                           ;main.c: 360: LATDbits.LATD5 = 1;
   879  0014C4  8A8C               	bsf	3980,5,c	;volatile
   880                           
   881                           ;main.c: 361: }
   882  0014C6  0012               	return	
   883  0014C8                     l214:
   884                           
   885                           ;main.c: 362: else{
   886                           ;main.c: 363: LATDbits.LATD0 = 0;
   887  0014C8  908C               	bcf	3980,0,c	;volatile
   888                           
   889                           ;main.c: 364: LATDbits.LATD5 = 0;
   890  0014CA  9A8C               	bcf	3980,5,c	;volatile
   891  0014CC  0012               	return	
   892  0014CE                     __end_of_toggleGunLED:
   893                           	opt stack 0
   894                           tblptru	equ	0xFF8
   895                           tblptrh	equ	0xFF7
   896                           tblptrl	equ	0xFF6
   897                           tablat	equ	0xFF5
   898                           intcon	equ	0xFF2
   899                           intcon3	equ	0xFF0
   900                           postinc0	equ	0xFEE
   901                           wreg	equ	0xFE8
   902                           postdec1	equ	0xFE5
   903                           fsr1l	equ	0xFE1
   904                           status	equ	0xFD8
   905                           
   906 ;; *************** function _stopShot *****************
   907 ;; Defined at:
   908 ;;		line 339 in file "main.c"
   909 ;; Parameters:    Size  Location     Type
   910 ;;		None
   911 ;; Auto vars:     Size  Location     Type
   912 ;;		None
   913 ;; Return value:  Size  Location     Type
   914 ;;                  1    wreg      void 
   915 ;; Registers used:
   916 ;;		None
   917 ;; Tracked objects:
   918 ;;		On entry : 0/0
   919 ;;		On exit  : 0/0
   920 ;;		Unchanged: 0/0
   921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   922 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   923 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   924 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   925 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   926 ;;Total ram usage:        0 bytes
   927 ;; Hardware stack levels used:    1
   928 ;; Hardware stack levels required when called:    1
   929 ;; This function calls:
   930 ;;		Nothing
   931 ;; This function is called by:
   932 ;;		_main
   933 ;; This function uses a non-reentrant model
   934 ;;
   935                           
   936                           	psect	text2
   937  0014DA                     __ptext2:
   938                           	opt stack 0
   939  0014DA                     _stopShot:
   940                           	opt stack 29
   941                           
   942                           ;main.c: 340: LATBbits.LATB1 = 0;
   943                           
   944                           ;incstack = 0
   945  0014DA  928A               	bcf	3978,1,c	;volatile
   946  0014DC  0012               	return		;funcret
   947  0014DE                     __end_of_stopShot:
   948                           	opt stack 0
   949                           tblptru	equ	0xFF8
   950                           tblptrh	equ	0xFF7
   951                           tblptrl	equ	0xFF6
   952                           tablat	equ	0xFF5
   953                           intcon	equ	0xFF2
   954                           intcon3	equ	0xFF0
   955                           postinc0	equ	0xFEE
   956                           wreg	equ	0xFE8
   957                           postdec1	equ	0xFE5
   958                           fsr1l	equ	0xFE1
   959                           status	equ	0xFD8
   960                           
   961 ;; *************** function _setUARTconfig *****************
   962 ;; Defined at:
   963 ;;		line 248 in file "main.c"
   964 ;; Parameters:    Size  Location     Type
   965 ;;		None
   966 ;; Auto vars:     Size  Location     Type
   967 ;;		None
   968 ;; Return value:  Size  Location     Type
   969 ;;                  1    wreg      void 
   970 ;; Registers used:
   971 ;;		wreg, status,2
   972 ;; Tracked objects:
   973 ;;		On entry : 0/0
   974 ;;		On exit  : 0/0
   975 ;;		Unchanged: 0/0
   976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   977 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   978 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   979 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   980 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   981 ;;Total ram usage:        0 bytes
   982 ;; Hardware stack levels used:    1
   983 ;; Hardware stack levels required when called:    1
   984 ;; This function calls:
   985 ;;		Nothing
   986 ;; This function is called by:
   987 ;;		_main
   988 ;; This function uses a non-reentrant model
   989 ;;
   990                           
   991                           	psect	text3
   992  0013B2                     __ptext3:
   993                           	opt stack 0
   994  0013B2                     _setUARTconfig:
   995                           	opt stack 29
   996                           
   997                           ;main.c: 250: RPINR0_1 = 0b01100110;
   998                           
   999                           ;incstack = 0
  1000  0013B2  0E66               	movlw	102
  1001  0013B4  010E               	movlb	14	; () banked
  1002  0013B6  6F2A               	movwf	42,b	;volatile
  1003                           
  1004                           ;main.c: 251: RPOR26_27 = 0b00010001;
  1005  0013B8  0E11               	movlw	17
  1006  0013BA  010E               	movlb	14	; () banked
  1007  0013BC  6F1F               	movwf	31,b	;volatile
  1008                           
  1009                           ;main.c: 253: BAUDCON1 = 0x00;
  1010  0013BE  0E00               	movlw	0
  1011  0013C0  6E67               	movwf	3943,c	;volatile
  1012                           
  1013                           ;main.c: 254: TXSTA1 = 0x26;
  1014  0013C2  0E26               	movlw	38
  1015  0013C4  6EAC               	movwf	4012,c	;volatile
  1016                           
  1017                           ;main.c: 255: RCSTA1 = 0x90;
  1018  0013C6  0E90               	movlw	144
  1019  0013C8  6EAB               	movwf	4011,c	;volatile
  1020                           
  1021                           ;main.c: 256: SPBRG1 = 0x19;
  1022  0013CA  0E19               	movlw	25
  1023  0013CC  6EAF               	movwf	4015,c	;volatile
  1024                           
  1025                           ;main.c: 258: TXREG1 = 0xAA;
  1026  0013CE  0EAA               	movlw	170
  1027  0013D0  6EAD               	movwf	4013,c	;volatile
  1028                           
  1029                           ; BSR set to: 14
  1030  0013D2  0012               	return		;funcret
  1031  0013D4                     __end_of_setUARTconfig:
  1032                           	opt stack 0
  1033                           tblptru	equ	0xFF8
  1034                           tblptrh	equ	0xFF7
  1035                           tblptrl	equ	0xFF6
  1036                           tablat	equ	0xFF5
  1037                           intcon	equ	0xFF2
  1038                           intcon3	equ	0xFF0
  1039                           postinc0	equ	0xFEE
  1040                           wreg	equ	0xFE8
  1041                           postdec1	equ	0xFE5
  1042                           fsr1l	equ	0xFE1
  1043                           status	equ	0xFD8
  1044                           
  1045 ;; *************** function _setTimerConfig *****************
  1046 ;; Defined at:
  1047 ;;		line 293 in file "main.c"
  1048 ;; Parameters:    Size  Location     Type
  1049 ;;		None
  1050 ;; Auto vars:     Size  Location     Type
  1051 ;;		None
  1052 ;; Return value:  Size  Location     Type
  1053 ;;                  1    wreg      void 
  1054 ;; Registers used:
  1055 ;;		wreg, status,2
  1056 ;; Tracked objects:
  1057 ;;		On entry : 0/0
  1058 ;;		On exit  : 0/0
  1059 ;;		Unchanged: 0/0
  1060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1061 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1062 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1063 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1064 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1065 ;;Total ram usage:        0 bytes
  1066 ;; Hardware stack levels used:    1
  1067 ;; Hardware stack levels required when called:    1
  1068 ;; This function calls:
  1069 ;;		Nothing
  1070 ;; This function is called by:
  1071 ;;		_main
  1072 ;; This function uses a non-reentrant model
  1073 ;;
  1074                           
  1075                           	psect	text4
  1076  001486                     __ptext4:
  1077                           	opt stack 0
  1078  001486                     _setTimerConfig:
  1079                           	opt stack 29
  1080                           
  1081                           ;main.c: 294: T0CONbits.TMR0ON = 0;
  1082                           
  1083                           ; BSR set to: 14
  1084                           ;incstack = 0
  1085  001486  9ED5               	bcf	4053,7,c	;volatile
  1086                           
  1087                           ;main.c: 295: T0CONbits.T08BIT = 0;
  1088  001488  9CD5               	bcf	4053,6,c	;volatile
  1089                           
  1090                           ;main.c: 296: T0CONbits.T0CS = 0;
  1091  00148A  0ECF               	movlw	-49
  1092  00148C  16D5               	andwf	4053,f,c	;volatile
  1093                           
  1094                           ;main.c: 297: T0CONbits.PSA = 0;
  1095  00148E  96D5               	bcf	4053,3,c	;volatile
  1096                           
  1097                           ;main.c: 298: T0CONbits.T0PS= 0b011;
  1098  001490  50D5               	movf	4053,w,c	;volatile
  1099  001492  0BF8               	andlw	-8
  1100  001494  0903               	iorlw	3
  1101  001496  6ED5               	movwf	4053,c	;volatile
  1102  001498  0012               	return		;funcret
  1103  00149A                     __end_of_setTimerConfig:
  1104                           	opt stack 0
  1105                           tblptru	equ	0xFF8
  1106                           tblptrh	equ	0xFF7
  1107                           tblptrl	equ	0xFF6
  1108                           tablat	equ	0xFF5
  1109                           intcon	equ	0xFF2
  1110                           intcon3	equ	0xFF0
  1111                           postinc0	equ	0xFEE
  1112                           wreg	equ	0xFE8
  1113                           postdec1	equ	0xFE5
  1114                           fsr1l	equ	0xFE1
  1115                           status	equ	0xFD8
  1116                           
  1117 ;; *************** function _setPinConfig *****************
  1118 ;; Defined at:
  1119 ;;		line 283 in file "main.c"
  1120 ;; Parameters:    Size  Location     Type
  1121 ;;		None
  1122 ;; Auto vars:     Size  Location     Type
  1123 ;;		None
  1124 ;; Return value:  Size  Location     Type
  1125 ;;                  1    wreg      void 
  1126 ;; Registers used:
  1127 ;;		wreg, status,2, status,0
  1128 ;; Tracked objects:
  1129 ;;		On entry : 0/0
  1130 ;;		On exit  : 0/0
  1131 ;;		Unchanged: 0/0
  1132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1133 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1134 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1135 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1136 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1137 ;;Total ram usage:        0 bytes
  1138 ;; Hardware stack levels used:    1
  1139 ;; Hardware stack levels required when called:    1
  1140 ;; This function calls:
  1141 ;;		Nothing
  1142 ;; This function is called by:
  1143 ;;		_main
  1144 ;; This function uses a non-reentrant model
  1145 ;;
  1146                           
  1147                           	psect	text5
  1148  001452                     __ptext5:
  1149                           	opt stack 0
  1150  001452                     _setPinConfig:
  1151                           	opt stack 29
  1152                           
  1153                           ;main.c: 285: ANCON1 = 0x00;
  1154                           
  1155                           ;incstack = 0
  1156  001452  0E00               	movlw	0
  1157  001454  010E               	movlb	14	; () banked
  1158  001456  6F47               	movwf	71,b	;volatile
  1159                           
  1160                           ; BSR set to: 14
  1161                           ;main.c: 286: TRISA &= 0b11111000;
  1162  001458  0EF8               	movlw	248
  1163  00145A  1692               	andwf	3986,f,c	;volatile
  1164                           
  1165                           ; BSR set to: 14
  1166                           ;main.c: 287: TRISC &= 0b00011000;
  1167  00145C  0E18               	movlw	24
  1168  00145E  1694               	andwf	3988,f,c	;volatile
  1169                           
  1170                           ; BSR set to: 14
  1171                           ;main.c: 288: TRISD &= 0b11011110;
  1172  001460  0EDE               	movlw	222
  1173  001462  1695               	andwf	3989,f,c	;volatile
  1174                           
  1175                           ; BSR set to: 14
  1176                           ;main.c: 289: TRISBbits.TRISB1 = 0;
  1177  001464  9293               	bcf	3987,1,c	;volatile
  1178                           
  1179                           ; BSR set to: 14
  1180                           ;main.c: 290: LATA = 0;
  1181  001466  0E00               	movlw	0
  1182  001468  6E89               	movwf	3977,c	;volatile
  1183                           
  1184                           ; BSR set to: 14
  1185  00146A  0012               	return		;funcret
  1186  00146C                     __end_of_setPinConfig:
  1187                           	opt stack 0
  1188                           tblptru	equ	0xFF8
  1189                           tblptrh	equ	0xFF7
  1190                           tblptrl	equ	0xFF6
  1191                           tablat	equ	0xFF5
  1192                           intcon	equ	0xFF2
  1193                           intcon3	equ	0xFF0
  1194                           postinc0	equ	0xFEE
  1195                           wreg	equ	0xFE8
  1196                           postdec1	equ	0xFE5
  1197                           fsr1l	equ	0xFE1
  1198                           status	equ	0xFD8
  1199                           
  1200 ;; *************** function _setModeLED *****************
  1201 ;; Defined at:
  1202 ;;		line 343 in file "main.c"
  1203 ;; Parameters:    Size  Location     Type
  1204 ;;  Mode            1    wreg     enum E13822
  1205 ;; Auto vars:     Size  Location     Type
  1206 ;;  Mode            1   18[COMRAM] enum E13822
  1207 ;; Return value:  Size  Location     Type
  1208 ;;                  1    wreg      void 
  1209 ;; Registers used:
  1210 ;;		wreg, status,2, status,0
  1211 ;; Tracked objects:
  1212 ;;		On entry : 0/0
  1213 ;;		On exit  : 0/0
  1214 ;;		Unchanged: 0/0
  1215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1216 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1217 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1218 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1219 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1220 ;;Total ram usage:        1 bytes
  1221 ;; Hardware stack levels used:    1
  1222 ;; Hardware stack levels required when called:    1
  1223 ;; This function calls:
  1224 ;;		Nothing
  1225 ;; This function is called by:
  1226 ;;		_main
  1227 ;; This function uses a non-reentrant model
  1228 ;;
  1229                           
  1230                           	psect	text6
  1231  0013F6                     __ptext6:
  1232                           	opt stack 0
  1233  0013F6                     _setModeLED:
  1234                           	opt stack 29
  1235                           
  1236                           ; BSR set to: 14
  1237                           ;incstack = 0
  1238                           ;setModeLED@Mode stored from wreg
  1239  0013F6  6E13               	movwf	setModeLED@Mode,c
  1240                           
  1241                           ;main.c: 344: switch (Mode){
  1242  0013F8  D006               	goto	l207
  1243  0013FA                     l208:
  1244                           
  1245                           ;main.c: 346: LATDbits.LATD0 = 1;
  1246  0013FA  808C               	bsf	3980,0,c	;volatile
  1247                           
  1248                           ;main.c: 347: LATDbits.LATD5 = 0;
  1249  0013FC  9A8C               	bcf	3980,5,c	;volatile
  1250                           
  1251                           ;main.c: 348: break;
  1252  0013FE  0012               	return	
  1253  001400                     l210:
  1254                           
  1255                           ;main.c: 350: LATDbits.LATD0 = 1;
  1256  001400  808C               	bsf	3980,0,c	;volatile
  1257                           
  1258                           ;main.c: 351: LATDbits.LATD5 = 0;
  1259  001402  9A8C               	bcf	3980,5,c	;volatile
  1260                           
  1261                           ;main.c: 354: }
  1262                           
  1263                           ;main.c: 352: break;
  1264  001404  0012               	return	
  1265  001406                     l207:
  1266  001406  5013               	movf	setModeLED@Mode,w,c
  1267                           
  1268                           ; Switch size 1, requested type "space"
  1269                           ; Number of cases is 2, Range of values is 0 to 1
  1270                           ; switch strategies available:
  1271                           ; Name         Instructions Cycles
  1272                           ; simple_byte            7     4 (average)
  1273                           ;	Chosen strategy is simple_byte
  1274  001408  0A00               	xorlw	0	; case 0
  1275  00140A  B4D8               	btfsc	status,2,c
  1276  00140C  D7F6               	goto	l208
  1277  00140E  0A01               	xorlw	1	; case 1
  1278  001410  A4D8               	btfss	status,2,c
  1279  001412  0012               	return	
  1280  001414  D7F5               	goto	l210
  1281  001416                     __end_of_setModeLED:
  1282                           	opt stack 0
  1283                           tblptru	equ	0xFF8
  1284                           tblptrh	equ	0xFF7
  1285                           tblptrl	equ	0xFF6
  1286                           tablat	equ	0xFF5
  1287                           intcon	equ	0xFF2
  1288                           intcon3	equ	0xFF0
  1289                           postinc0	equ	0xFEE
  1290                           wreg	equ	0xFE8
  1291                           postdec1	equ	0xFE5
  1292                           fsr1l	equ	0xFE1
  1293                           status	equ	0xFD8
  1294                           
  1295 ;; *************** function _setInterruptConfig *****************
  1296 ;; Defined at:
  1297 ;;		line 260 in file "main.c"
  1298 ;; Parameters:    Size  Location     Type
  1299 ;;		None
  1300 ;; Auto vars:     Size  Location     Type
  1301 ;;		None
  1302 ;; Return value:  Size  Location     Type
  1303 ;;                  1    wreg      void 
  1304 ;; Registers used:
  1305 ;;		wreg, status,2
  1306 ;; Tracked objects:
  1307 ;;		On entry : 0/0
  1308 ;;		On exit  : 0/0
  1309 ;;		Unchanged: 0/0
  1310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1311 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1312 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1313 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1314 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1315 ;;Total ram usage:        0 bytes
  1316 ;; Hardware stack levels used:    1
  1317 ;; Hardware stack levels required when called:    1
  1318 ;; This function calls:
  1319 ;;		Nothing
  1320 ;; This function is called by:
  1321 ;;		_main
  1322 ;; This function uses a non-reentrant model
  1323 ;;
  1324                           
  1325                           	psect	text7
  1326  001416                     __ptext7:
  1327                           	opt stack 0
  1328  001416                     _setInterruptConfig:
  1329                           	opt stack 29
  1330                           
  1331                           ;main.c: 264: INTCONbits.TMR0IF = 0;
  1332                           
  1333                           ;incstack = 0
  1334  001416  94F2               	bcf	intcon,2,c	;volatile
  1335                           
  1336                           ;main.c: 265: INTCONbits.TMR0IE = 1;
  1337  001418  8AF2               	bsf	intcon,5,c	;volatile
  1338                           
  1339                           ;main.c: 268: IPR1bits.RC1IP = 0;
  1340  00141A  9A9F               	bcf	3999,5,c	;volatile
  1341                           
  1342                           ;main.c: 269: PIE1bits.RC1IE = 1;
  1343  00141C  8A9D               	bsf	3997,5,c	;volatile
  1344                           
  1345                           ;main.c: 272: RPINR26_27 = 0xC1;
  1346  00141E  0EC1               	movlw	193
  1347  001420  010E               	movlb	14	; () banked
  1348  001422  6F37               	movwf	55,b	;volatile
  1349                           
  1350                           ; BSR set to: 14
  1351                           ;main.c: 273: TRISAbits.TRISA5 = 1;
  1352  001424  8A92               	bsf	3986,5,c	;volatile
  1353                           
  1354                           ; BSR set to: 14
  1355                           ;main.c: 274: INTCON2bits.INTEDG1 = 1;
  1356  001426  8AF1               	bsf	intcon2,5,c	;volatile
  1357                           
  1358                           ; BSR set to: 14
  1359                           ;main.c: 275: INTCON3bits.INT1F = 0;
  1360  001428  90F0               	bcf	intcon3,0,c	;volatile
  1361                           
  1362                           ; BSR set to: 14
  1363                           ;main.c: 276: INTCON3bits.INT1P = 0;
  1364  00142A  9CF0               	bcf	intcon3,6,c	;volatile
  1365                           
  1366                           ; BSR set to: 14
  1367                           ;main.c: 277: INTCON3bits.INT1E = 1;
  1368  00142C  86F0               	bsf	intcon3,3,c	;volatile
  1369                           
  1370                           ; BSR set to: 14
  1371                           ;main.c: 279: RCONbits.IPEN = 1;
  1372  00142E  8ED0               	bsf	4048,7,c	;volatile
  1373                           
  1374                           ; BSR set to: 14
  1375                           ;main.c: 280: INTCONbits.GIE = 1;
  1376  001430  8EF2               	bsf	intcon,7,c	;volatile
  1377                           
  1378                           ; BSR set to: 14
  1379                           ;main.c: 281: INTCONbits.PEIE = 1;
  1380  001432  8CF2               	bsf	intcon,6,c	;volatile
  1381                           
  1382                           ; BSR set to: 14
  1383  001434  0012               	return		;funcret
  1384  001436                     __end_of_setInterruptConfig:
  1385                           	opt stack 0
  1386                           tblptru	equ	0xFF8
  1387                           tblptrh	equ	0xFF7
  1388                           tblptrl	equ	0xFF6
  1389                           tablat	equ	0xFF5
  1390                           intcon	equ	0xFF2
  1391                           intcon2	equ	0xFF1
  1392                           intcon3	equ	0xFF0
  1393                           postinc0	equ	0xFEE
  1394                           wreg	equ	0xFE8
  1395                           postdec1	equ	0xFE5
  1396                           fsr1l	equ	0xFE1
  1397                           status	equ	0xFD8
  1398                           
  1399 ;; *************** function _printStartGame *****************
  1400 ;; Defined at:
  1401 ;;		line 12 in file "LCD_Game_Printer.c"
  1402 ;; Parameters:    Size  Location     Type
  1403 ;;		None
  1404 ;; Auto vars:     Size  Location     Type
  1405 ;;		None
  1406 ;; Return value:  Size  Location     Type
  1407 ;;                  1    wreg      void 
  1408 ;; Registers used:
  1409 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1410 ;; Tracked objects:
  1411 ;;		On entry : 0/0
  1412 ;;		On exit  : 0/0
  1413 ;;		Unchanged: 0/0
  1414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1415 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1416 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1417 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1418 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1419 ;;Total ram usage:        0 bytes
  1420 ;; Hardware stack levels used:    1
  1421 ;; Hardware stack levels required when called:    5
  1422 ;; This function calls:
  1423 ;;		_clearDisplay
  1424 ;;		_moveCursor
  1425 ;;		_putStringLCD
  1426 ;;		_waitASec
  1427 ;; This function is called by:
  1428 ;;		_main
  1429 ;; This function uses a non-reentrant model
  1430 ;;
  1431                           
  1432                           	psect	text8
  1433  001290                     __ptext8:
  1434                           	opt stack 0
  1435  001290                     _printStartGame:
  1436                           	opt stack 25
  1437                           
  1438                           ;LCD_Game_Printer.c: 13: moveCursor(1,3);
  1439                           
  1440                           ; BSR set to: 14
  1441                           ;incstack = 0
  1442  001290  0E00               	movlw	0
  1443  001292  6E17               	movwf	moveCursor@row+1,c
  1444  001294  0E01               	movlw	1
  1445  001296  6E16               	movwf	moveCursor@row,c
  1446  001298  0E00               	movlw	0
  1447  00129A  6E19               	movwf	moveCursor@col+1,c
  1448  00129C  0E03               	movlw	3
  1449  00129E  6E18               	movwf	moveCursor@col,c
  1450  0012A0  ECC1  F008         	call	_moveCursor	;wreg free
  1451                           
  1452                           ;LCD_Game_Printer.c: 14: putStringLCD("S  T  A  R  T !");
  1453  0012A4  0E49               	movlw	low STR_2
  1454  0012A6  6E17               	movwf	putStringLCD@input,c
  1455  0012A8  0E0E               	movlw	high STR_2
  1456  0012AA  6E18               	movwf	putStringLCD@input+1,c
  1457  0012AC  EC5D  F008         	call	_putStringLCD	;wreg free
  1458                           
  1459                           ;LCD_Game_Printer.c: 15: waitASec();
  1460  0012B0  ECAF  F009         	call	_waitASec	;wreg free
  1461                           
  1462                           ;LCD_Game_Printer.c: 16: waitASec();
  1463  0012B4  ECAF  F009         	call	_waitASec	;wreg free
  1464                           
  1465                           ;LCD_Game_Printer.c: 17: clearDisplay();
  1466  0012B8  ECEA  F009         	call	_clearDisplay	;wreg free
  1467                           
  1468                           ;LCD_Game_Printer.c: 18: putStringLCD("POINTS BULLETS TIME");
  1469  0012BC  0E21               	movlw	low STR_3
  1470  0012BE  6E17               	movwf	putStringLCD@input,c
  1471  0012C0  0E0E               	movlw	high STR_3
  1472  0012C2  6E18               	movwf	putStringLCD@input+1,c
  1473  0012C4  EC5D  F008         	call	_putStringLCD	;wreg free
  1474  0012C8  0012               	return		;funcret
  1475  0012CA                     __end_of_printStartGame:
  1476                           	opt stack 0
  1477                           tblptru	equ	0xFF8
  1478                           tblptrh	equ	0xFF7
  1479                           tblptrl	equ	0xFF6
  1480                           tablat	equ	0xFF5
  1481                           intcon	equ	0xFF2
  1482                           intcon2	equ	0xFF1
  1483                           intcon3	equ	0xFF0
  1484                           postinc0	equ	0xFEE
  1485                           wreg	equ	0xFE8
  1486                           postdec1	equ	0xFE5
  1487                           fsr1l	equ	0xFE1
  1488                           status	equ	0xFD8
  1489                           
  1490 ;; *************** function _printMBED *****************
  1491 ;; Defined at:
  1492 ;;		line 4 in file "LCD_Game_Printer.c"
  1493 ;; Parameters:    Size  Location     Type
  1494 ;;		None
  1495 ;; Auto vars:     Size  Location     Type
  1496 ;;		None
  1497 ;; Return value:  Size  Location     Type
  1498 ;;                  1    wreg      void 
  1499 ;; Registers used:
  1500 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1501 ;; Tracked objects:
  1502 ;;		On entry : 0/0
  1503 ;;		On exit  : 0/0
  1504 ;;		Unchanged: 0/0
  1505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1506 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1507 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1508 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1509 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1510 ;;Total ram usage:        0 bytes
  1511 ;; Hardware stack levels used:    1
  1512 ;; Hardware stack levels required when called:    5
  1513 ;; This function calls:
  1514 ;;		_clearDisplay
  1515 ;;		_moveCursor
  1516 ;;		_putStringLCD
  1517 ;;		_waitASec
  1518 ;; This function is called by:
  1519 ;;		_main
  1520 ;; This function uses a non-reentrant model
  1521 ;;
  1522                           
  1523                           	psect	text9
  1524  001330                     __ptext9:
  1525                           	opt stack 0
  1526  001330                     _printMBED:
  1527                           	opt stack 25
  1528                           
  1529                           ;LCD_Game_Printer.c: 5: moveCursor(1,0);
  1530                           
  1531                           ;incstack = 0
  1532  001330  0E00               	movlw	0
  1533  001332  6E17               	movwf	moveCursor@row+1,c
  1534  001334  0E01               	movlw	1
  1535  001336  6E16               	movwf	moveCursor@row,c
  1536  001338  0E00               	movlw	0
  1537  00133A  6E19               	movwf	moveCursor@col+1,c
  1538  00133C  0E00               	movlw	0
  1539  00133E  6E18               	movwf	moveCursor@col,c
  1540  001340  ECC1  F008         	call	_moveCursor	;wreg free
  1541                           
  1542                           ;LCD_Game_Printer.c: 6: putStringLCD("  EMBEDDED UNIVERSE");
  1543  001344  0E35               	movlw	low STR_1
  1544  001346  6E17               	movwf	putStringLCD@input,c
  1545  001348  0E0E               	movlw	high STR_1
  1546  00134A  6E18               	movwf	putStringLCD@input+1,c
  1547  00134C  EC5D  F008         	call	_putStringLCD	;wreg free
  1548                           
  1549                           ;LCD_Game_Printer.c: 7: waitASec();
  1550  001350  ECAF  F009         	call	_waitASec	;wreg free
  1551                           
  1552                           ;LCD_Game_Printer.c: 8: waitASec();
  1553  001354  ECAF  F009         	call	_waitASec	;wreg free
  1554                           
  1555                           ;LCD_Game_Printer.c: 9: clearDisplay();
  1556  001358  ECEA  F009         	call	_clearDisplay	;wreg free
  1557  00135C  0012               	return		;funcret
  1558  00135E                     __end_of_printMBED:
  1559                           	opt stack 0
  1560                           tblptru	equ	0xFF8
  1561                           tblptrh	equ	0xFF7
  1562                           tblptrl	equ	0xFF6
  1563                           tablat	equ	0xFF5
  1564                           intcon	equ	0xFF2
  1565                           intcon2	equ	0xFF1
  1566                           intcon3	equ	0xFF0
  1567                           postinc0	equ	0xFEE
  1568                           wreg	equ	0xFE8
  1569                           postdec1	equ	0xFE5
  1570                           fsr1l	equ	0xFE1
  1571                           status	equ	0xFD8
  1572                           
  1573 ;; *************** function _waitASec *****************
  1574 ;; Defined at:
  1575 ;;		line 56 in file "LCD_Game_Printer.c"
  1576 ;; Parameters:    Size  Location     Type
  1577 ;;		None
  1578 ;; Auto vars:     Size  Location     Type
  1579 ;;  i               2   19[COMRAM] int 
  1580 ;; Return value:  Size  Location     Type
  1581 ;;                  1    wreg      void 
  1582 ;; Registers used:
  1583 ;;		wreg, status,2, status,0
  1584 ;; Tracked objects:
  1585 ;;		On entry : 0/0
  1586 ;;		On exit  : 0/0
  1587 ;;		Unchanged: 0/0
  1588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1589 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1590 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1591 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1592 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1593 ;;Total ram usage:        3 bytes
  1594 ;; Hardware stack levels used:    1
  1595 ;; Hardware stack levels required when called:    1
  1596 ;; This function calls:
  1597 ;;		Nothing
  1598 ;; This function is called by:
  1599 ;;		_printMBED
  1600 ;;		_printStartGame
  1601 ;; This function uses a non-reentrant model
  1602 ;;
  1603                           
  1604                           	psect	text10
  1605  00135E                     __ptext10:
  1606                           	opt stack 0
  1607  00135E                     _waitASec:
  1608                           	opt stack 28
  1609                           
  1610                           ;LCD_Game_Printer.c: 57: for(int i = 0; i < 20; i++)
  1611                           
  1612                           ;incstack = 0
  1613  00135E  0E00               	movlw	0
  1614  001360  6E15               	movwf	waitASec@i+1,c
  1615  001362  0E00               	movlw	0
  1616  001364  6E14               	movwf	waitASec@i,c
  1617  001366                     l1058:
  1618  001366  BE15               	btfsc	waitASec@i+1,7,c
  1619  001368  D006               	goto	l257
  1620  00136A  5015               	movf	waitASec@i+1,w,c
  1621  00136C  E10E               	bnz	l259
  1622  00136E  0E14               	movlw	20
  1623  001370  5C14               	subwf	waitASec@i,w,c
  1624  001372  B0D8               	btfsc	status,0,c
  1625  001374  0012               	return	
  1626  001376                     l257:
  1627                           
  1628                           ;LCD_Game_Printer.c: 58: _delay((unsigned long)((50)*(8000000/4000.0)));
  1629  001376  0E82               	movlw	130
  1630  001378  6E13               	movwf	??_waitASec& (0+255),c
  1631  00137A  0EDE               	movlw	222
  1632  00137C                     u667:
  1633  00137C  2EE8               	decfsz	wreg,f,c
  1634  00137E  D7FE               	bra	u667
  1635  001380  2E13               	decfsz	??_waitASec& (0+255),f,c
  1636  001382  D7FC               	bra	u667
  1637  001384  4A14               	infsnz	waitASec@i,f,c
  1638  001386  2A15               	incf	waitASec@i+1,f,c
  1639  001388  D7EE               	goto	l1058
  1640  00138A                     l259:
  1641  00138A  0012               	return		;funcret
  1642  00138C                     __end_of_waitASec:
  1643                           	opt stack 0
  1644                           tblptru	equ	0xFF8
  1645                           tblptrh	equ	0xFF7
  1646                           tblptrl	equ	0xFF6
  1647                           tablat	equ	0xFF5
  1648                           intcon	equ	0xFF2
  1649                           intcon2	equ	0xFF1
  1650                           intcon3	equ	0xFF0
  1651                           postinc0	equ	0xFEE
  1652                           wreg	equ	0xFE8
  1653                           postdec1	equ	0xFE5
  1654                           fsr1l	equ	0xFE1
  1655                           status	equ	0xFD8
  1656                           
  1657 ;; *************** function _putStringLCD *****************
  1658 ;; Defined at:
  1659 ;;		line 49 in file "LCD_SPI.c"
  1660 ;; Parameters:    Size  Location     Type
  1661 ;;  input           2   22[COMRAM] PTR const unsigned char 
  1662 ;;		 -> STR_7(22), STR_6(3), STR_5(2), printStat@statArray(3), 
  1663 ;;		 -> STR_3(20), STR_2(16), STR_1(20), 
  1664 ;; Auto vars:     Size  Location     Type
  1665 ;;  i               2   26[COMRAM] int 
  1666 ;; Return value:  Size  Location     Type
  1667 ;;                  1    wreg      void 
  1668 ;; Registers used:
  1669 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1670 ;; Tracked objects:
  1671 ;;		On entry : 0/0
  1672 ;;		On exit  : 0/0
  1673 ;;		Unchanged: 0/0
  1674 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1675 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1676 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1677 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1678 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1679 ;;Total ram usage:        6 bytes
  1680 ;; Hardware stack levels used:    1
  1681 ;; Hardware stack levels required when called:    4
  1682 ;; This function calls:
  1683 ;;		_putchLCD
  1684 ;; This function is called by:
  1685 ;;		_printMBED
  1686 ;;		_printStartGame
  1687 ;;		_printStat
  1688 ;;		_printEndGame
  1689 ;; This function uses a non-reentrant model
  1690 ;;
  1691                           
  1692                           	psect	text11
  1693  0010BA                     __ptext11:
  1694                           	opt stack 0
  1695  0010BA                     _putStringLCD:
  1696                           	opt stack 25
  1697                           
  1698                           ;LCD_SPI.c: 51: int i;
  1699                           ;LCD_SPI.c: 52: for (i = 0; input[i] != '\0'; i++)
  1700                           
  1701                           ;incstack = 0
  1702  0010BA  0E00               	movlw	0
  1703  0010BC  6E1C               	movwf	putStringLCD@i+1,c
  1704  0010BE  0E00               	movlw	0
  1705  0010C0  6E1B               	movwf	putStringLCD@i,c
  1706  0010C2  D01B               	goto	l314
  1707  0010C4                     
  1708                           ;LCD_SPI.c: 53: {
  1709                           ;LCD_SPI.c: 54: putchLCD(input[i]);
  1710  0010C4  501B               	movf	putStringLCD@i,w,c
  1711  0010C6  2417               	addwf	putStringLCD@input,w,c
  1712  0010C8  6E19               	movwf	??_putStringLCD& (0+255),c
  1713  0010CA  501C               	movf	putStringLCD@i+1,w,c
  1714  0010CC  2018               	addwfc	putStringLCD@input+1,w,c
  1715  0010CE  6E1A               	movwf	(??_putStringLCD+1)& (0+255),c
  1716  0010D0  C019  FFF6         	movff	??_putStringLCD,tblptrl
  1717  0010D4  C01A  FFF7         	movff	??_putStringLCD+1,tblptrh
  1718  0010D8  0E00               	movlw	low (__smallconst shr (0+16))
  1719  0010DA  6EF8               	movwf	tblptru,c
  1720  0010DC  0E0D               	movlw	(high __ramtop+-1)
  1721  0010DE  64F7               	cpfsgt	tblptrh,c
  1722  0010E0  D003               	bra	u447
  1723  0010E2  0008               	tblrd		*
  1724  0010E4  50F5               	movf	tablat,w,c
  1725  0010E6  D005               	bra	u440
  1726  0010E8                     u447:
  1727  0010E8  CFF6 FFE9          	movff	tblptrl,fsr0l
  1728  0010EC  CFF7 FFEA          	movff	tblptrh,fsr0h
  1729  0010F0  50EF               	movf	indf0,w,c
  1730  0010F2                     u440:
  1731  0010F2  EC80  F009         	call	_putchLCD
  1732  0010F6  4A1B               	infsnz	putStringLCD@i,f,c
  1733  0010F8  2A1C               	incf	putStringLCD@i+1,f,c
  1734  0010FA                     l314:
  1735  0010FA  501B               	movf	putStringLCD@i,w,c
  1736  0010FC  2417               	addwf	putStringLCD@input,w,c
  1737  0010FE  6E19               	movwf	??_putStringLCD& (0+255),c
  1738  001100  501C               	movf	putStringLCD@i+1,w,c
  1739  001102  2018               	addwfc	putStringLCD@input+1,w,c
  1740  001104  6E1A               	movwf	(??_putStringLCD+1)& (0+255),c
  1741  001106  C019  FFF6         	movff	??_putStringLCD,tblptrl
  1742  00110A  C01A  FFF7         	movff	??_putStringLCD+1,tblptrh
  1743  00110E  0E00               	movlw	low (__smallconst shr (0+16))
  1744  001110  6EF8               	movwf	tblptru,c
  1745  001112  0E0D               	movlw	(high __ramtop+-1)
  1746  001114  64F7               	cpfsgt	tblptrh,c
  1747  001116  D003               	bra	u457
  1748  001118  0008               	tblrd		*
  1749  00111A  50F5               	movf	tablat,w,c
  1750  00111C  D005               	bra	u450
  1751  00111E                     u457:
  1752  00111E  CFF6 FFE9          	movff	tblptrl,fsr0l
  1753  001122  CFF7 FFEA          	movff	tblptrh,fsr0h
  1754  001126  50EF               	movf	indf0,w,c
  1755  001128                     u450:
  1756  001128  0900               	iorlw	0
  1757  00112A  B4D8               	btfsc	status,2,c
  1758  00112C  0012               	return	
  1759  00112E  D7CA               	goto	l315
  1760  001130                     __end_of_putStringLCD:
  1761                           	opt stack 0
  1762                           tblptru	equ	0xFF8
  1763                           tblptrh	equ	0xFF7
  1764                           tblptrl	equ	0xFF6
  1765                           tablat	equ	0xFF5
  1766                           intcon	equ	0xFF2
  1767                           intcon2	equ	0xFF1
  1768                           intcon3	equ	0xFF0
  1769                           indf0	equ	0xFEF
  1770                           postinc0	equ	0xFEE
  1771                           fsr0h	equ	0xFEA
  1772                           fsr0l	equ	0xFE9
  1773                           wreg	equ	0xFE8
  1774                           postdec1	equ	0xFE5
  1775                           fsr1l	equ	0xFE1
  1776                           status	equ	0xFD8
  1777                           
  1778 ;; *************** function _putchLCD *****************
  1779 ;; Defined at:
  1780 ;;		line 58 in file "LCD_SPI.c"
  1781 ;; Parameters:    Size  Location     Type
  1782 ;;  input           1    wreg     unsigned char 
  1783 ;; Auto vars:     Size  Location     Type
  1784 ;;  input           1   21[COMRAM] unsigned char 
  1785 ;; Return value:  Size  Location     Type
  1786 ;;                  1    wreg      void 
  1787 ;; Registers used:
  1788 ;;		wreg, status,2, status,0, cstack
  1789 ;; Tracked objects:
  1790 ;;		On entry : 0/0
  1791 ;;		On exit  : 0/0
  1792 ;;		Unchanged: 0/0
  1793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1794 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1795 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1796 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1797 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1798 ;;Total ram usage:        1 bytes
  1799 ;; Hardware stack levels used:    1
  1800 ;; Hardware stack levels required when called:    3
  1801 ;; This function calls:
  1802 ;;		_fliplr
  1803 ;;		_readBusyFlag
  1804 ;;		_spi_Send_Read
  1805 ;; This function is called by:
  1806 ;;		_putStringLCD
  1807 ;; This function uses a non-reentrant model
  1808 ;;
  1809                           
  1810                           	psect	text12
  1811  001300                     __ptext12:
  1812                           	opt stack 0
  1813  001300                     _putchLCD:
  1814                           	opt stack 25
  1815                           
  1816                           ;incstack = 0
  1817                           ;putchLCD@input stored from wreg
  1818  001300  6E16               	movwf	putchLCD@input,c
  1819                           
  1820                           ;LCD_SPI.c: 60: input = fliplr(input);
  1821  001302  5016               	movf	putchLCD@input,w,c
  1822  001304  EC98  F008         	call	_fliplr
  1823  001308  6E16               	movwf	putchLCD@input,c
  1824  00130A  EC36  F00A         	call	_readBusyFlag	;wreg free
  1825  00130E  0900               	iorlw	0
  1826  001310  A4D8               	btfss	status,2,c
  1827  001312  D7FB               	goto	l321
  1828                           
  1829                           ;LCD_SPI.c: 63: LATDbits.LATD3 = 0;
  1830  001314  968C               	bcf	3980,3,c	;volatile
  1831                           
  1832                           ;LCD_SPI.c: 64: spi_Send_Read(0xFA);
  1833  001316  0EFA               	movlw	250
  1834  001318  EC4D  F00A         	call	_spi_Send_Read
  1835                           
  1836                           ;LCD_SPI.c: 65: spi_Send_Read(input & 0xF0);
  1837  00131C  5016               	movf	putchLCD@input,w,c
  1838  00131E  0BF0               	andlw	240
  1839  001320  EC4D  F00A         	call	_spi_Send_Read
  1840                           
  1841                           ;LCD_SPI.c: 66: spi_Send_Read(input << 4);
  1842  001324  3816               	swapf	putchLCD@input,w,c
  1843  001326  0BF0               	andlw	240
  1844  001328  EC4D  F00A         	call	_spi_Send_Read
  1845                           
  1846                           ;LCD_SPI.c: 67: LATDbits.LATD3 = 1;
  1847  00132C  868C               	bsf	3980,3,c	;volatile
  1848  00132E  0012               	return		;funcret
  1849  001330                     __end_of_putchLCD:
  1850                           	opt stack 0
  1851                           tblptru	equ	0xFF8
  1852                           tblptrh	equ	0xFF7
  1853                           tblptrl	equ	0xFF6
  1854                           tablat	equ	0xFF5
  1855                           intcon	equ	0xFF2
  1856                           intcon2	equ	0xFF1
  1857                           intcon3	equ	0xFF0
  1858                           indf0	equ	0xFEF
  1859                           postinc0	equ	0xFEE
  1860                           fsr0h	equ	0xFEA
  1861                           fsr0l	equ	0xFE9
  1862                           wreg	equ	0xFE8
  1863                           postdec1	equ	0xFE5
  1864                           fsr1l	equ	0xFE1
  1865                           status	equ	0xFD8
  1866                           
  1867 ;; *************** function _moveCursor *****************
  1868 ;; Defined at:
  1869 ;;		line 79 in file "LCD_SPI.c"
  1870 ;; Parameters:    Size  Location     Type
  1871 ;;  row             2   21[COMRAM] int 
  1872 ;;  col             2   23[COMRAM] int 
  1873 ;; Auto vars:     Size  Location     Type
  1874 ;;  address         1   25[COMRAM] unsigned char 
  1875 ;; Return value:  Size  Location     Type
  1876 ;;                  1    wreg      void 
  1877 ;; Registers used:
  1878 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  1879 ;; Tracked objects:
  1880 ;;		On entry : 0/0
  1881 ;;		On exit  : 0/0
  1882 ;;		Unchanged: 0/0
  1883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1884 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1885 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1886 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1887 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1888 ;;Total ram usage:        5 bytes
  1889 ;; Hardware stack levels used:    1
  1890 ;; Hardware stack levels required when called:    3
  1891 ;; This function calls:
  1892 ;;		_fliplr
  1893 ;;		_readBusyFlag
  1894 ;;		_spi_Send_Read
  1895 ;; This function is called by:
  1896 ;;		_printMBED
  1897 ;;		_printStartGame
  1898 ;;		_printRemBullets
  1899 ;;		_printRemTime
  1900 ;;		_printPoints
  1901 ;;		_printEndGame
  1902 ;; This function uses a non-reentrant model
  1903 ;;
  1904                           
  1905                           	psect	text13
  1906  001182                     __ptext13:
  1907                           	opt stack 0
  1908  001182                     _moveCursor:
  1909                           	opt stack 26
  1910                           
  1911                           ;LCD_SPI.c: 81: char address = row * 20 + col;
  1912                           
  1913                           ;incstack = 0
  1914  001182  5016               	movf	moveCursor@row,w,c
  1915  001184  0D14               	mullw	20
  1916  001186  50F3               	movf	prodl,w,c
  1917  001188  2418               	addwf	moveCursor@col,w,c
  1918  00118A  6E1A               	movwf	moveCursor@address,c
  1919                           
  1920                           ;LCD_SPI.c: 82: if (row >= 2)
  1921  00118C  BE17               	btfsc	moveCursor@row+1,7,c
  1922  00118E  D008               	goto	l329
  1923  001190  5017               	movf	moveCursor@row+1,w,c
  1924  001192  E104               	bnz	u420
  1925  001194  0E02               	movlw	2
  1926  001196  5C16               	subwf	moveCursor@row,w,c
  1927  001198  A0D8               	btfss	status,0,c
  1928  00119A  D002               	goto	l329
  1929  00119C                     u420:
  1930                           
  1931                           ;LCD_SPI.c: 83: {
  1932                           ;LCD_SPI.c: 84: address += 24;
  1933  00119C  0E18               	movlw	24
  1934  00119E  261A               	addwf	moveCursor@address,f,c
  1935  0011A0                     l329:
  1936                           
  1937                           ;LCD_SPI.c: 85: }
  1938                           ;LCD_SPI.c: 86: address = fliplr(address);
  1939  0011A0  501A               	movf	moveCursor@address,w,c
  1940  0011A2  EC98  F008         	call	_fliplr
  1941  0011A6  6E1A               	movwf	moveCursor@address,c
  1942  0011A8  EC36  F00A         	call	_readBusyFlag	;wreg free
  1943  0011AC  0900               	iorlw	0
  1944  0011AE  A4D8               	btfss	status,2,c
  1945  0011B0  D7FB               	goto	l331
  1946                           
  1947                           ;LCD_SPI.c: 88: LATDbits.LATD3 = 0;
  1948  0011B2  968C               	bcf	3980,3,c	;volatile
  1949                           
  1950                           ;LCD_SPI.c: 89: spi_Send_Read(0xF8);
  1951  0011B4  0EF8               	movlw	248
  1952  0011B6  EC4D  F00A         	call	_spi_Send_Read
  1953                           
  1954                           ;LCD_SPI.c: 90: spi_Send_Read(address & 0xF0);
  1955  0011BA  501A               	movf	moveCursor@address,w,c
  1956  0011BC  0BF0               	andlw	240
  1957  0011BE  EC4D  F00A         	call	_spi_Send_Read
  1958                           
  1959                           ;LCD_SPI.c: 91: spi_Send_Read((address << 4) | 0x10);
  1960  0011C2  381A               	swapf	moveCursor@address,w,c
  1961  0011C4  0BF0               	andlw	240
  1962  0011C6  0910               	iorlw	16
  1963  0011C8  EC4D  F00A         	call	_spi_Send_Read
  1964  0011CC  0012               	return		;funcret
  1965  0011CE                     __end_of_moveCursor:
  1966                           	opt stack 0
  1967                           tblptru	equ	0xFF8
  1968                           tblptrh	equ	0xFF7
  1969                           tblptrl	equ	0xFF6
  1970                           tablat	equ	0xFF5
  1971                           prodl	equ	0xFF3
  1972                           intcon	equ	0xFF2
  1973                           intcon2	equ	0xFF1
  1974                           intcon3	equ	0xFF0
  1975                           indf0	equ	0xFEF
  1976                           postinc0	equ	0xFEE
  1977                           fsr0h	equ	0xFEA
  1978                           fsr0l	equ	0xFE9
  1979                           wreg	equ	0xFE8
  1980                           postdec1	equ	0xFE5
  1981                           fsr1l	equ	0xFE1
  1982                           status	equ	0xFD8
  1983                           
  1984 ;; *************** function _fliplr *****************
  1985 ;; Defined at:
  1986 ;;		line 70 in file "LCD_SPI.c"
  1987 ;; Parameters:    Size  Location     Type
  1988 ;;  input           1    wreg     unsigned char 
  1989 ;; Auto vars:     Size  Location     Type
  1990 ;;  input           1   20[COMRAM] unsigned char 
  1991 ;; Return value:  Size  Location     Type
  1992 ;;                  1    wreg      unsigned char 
  1993 ;; Registers used:
  1994 ;;		wreg, status,2, status,0
  1995 ;; Tracked objects:
  1996 ;;		On entry : 0/0
  1997 ;;		On exit  : 0/0
  1998 ;;		Unchanged: 0/0
  1999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2000 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2001 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2002 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2003 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2004 ;;Total ram usage:        3 bytes
  2005 ;; Hardware stack levels used:    1
  2006 ;; Hardware stack levels required when called:    1
  2007 ;; This function calls:
  2008 ;;		Nothing
  2009 ;; This function is called by:
  2010 ;;		_putchLCD
  2011 ;;		_moveCursor
  2012 ;; This function uses a non-reentrant model
  2013 ;;
  2014                           
  2015                           	psect	text14
  2016  001130                     __ptext14:
  2017                           	opt stack 0
  2018  001130                     _fliplr:
  2019                           	opt stack 26
  2020                           
  2021                           ;incstack = 0
  2022                           ;fliplr@input stored from wreg
  2023  001130  6E15               	movwf	fliplr@input,c
  2024                           
  2025                           ;LCD_SPI.c: 73: input = (input & 0xF0) >> 4 | (input & 0x0F) << 4;
  2026  001132  C015  F013         	movff	fliplr@input,??_fliplr
  2027  001136  0E0F               	movlw	15
  2028  001138  1613               	andwf	??_fliplr,f,c
  2029  00113A  3A13               	swapf	??_fliplr,f,c
  2030  00113C  0EF0               	movlw	240
  2031  00113E  1613               	andwf	??_fliplr,f,c
  2032  001140  3815               	swapf	fliplr@input,w,c
  2033  001142  0B0F               	andlw	15
  2034  001144  0B0F               	andlw	15
  2035  001146  1013               	iorwf	??_fliplr,w,c
  2036  001148  6E15               	movwf	fliplr@input,c
  2037                           
  2038                           ;LCD_SPI.c: 74: input = (input & 0xCC) >> 2 | (input & 0x33) << 2;
  2039  00114A  C015  F013         	movff	fliplr@input,??_fliplr
  2040  00114E  0E33               	movlw	51
  2041  001150  1613               	andwf	??_fliplr,f,c
  2042  001152  90D8               	bcf	status,0,c
  2043  001154  3613               	rlcf	??_fliplr,f,c
  2044  001156  90D8               	bcf	status,0,c
  2045  001158  3613               	rlcf	??_fliplr,f,c
  2046  00115A  4015               	rrncf	fliplr@input,w,c
  2047  00115C  42E8               	rrncf	wreg,f,c
  2048  00115E  0B3F               	andlw	63
  2049  001160  0B33               	andlw	51
  2050  001162  1013               	iorwf	??_fliplr,w,c
  2051  001164  6E15               	movwf	fliplr@input,c
  2052                           
  2053                           ;LCD_SPI.c: 75: input = (input & 0xAA) >> 1 | (input & 0x55) << 1;
  2054  001166  C015  F013         	movff	fliplr@input,??_fliplr
  2055  00116A  0E55               	movlw	85
  2056  00116C  1613               	andwf	??_fliplr,f,c
  2057  00116E  90D8               	bcf	status,0,c
  2058  001170  3413               	rlcf	??_fliplr,w,c
  2059  001172  6E14               	movwf	(??_fliplr+1)& (0+255),c
  2060  001174  90D8               	bcf	status,0,c
  2061  001176  3015               	rrcf	fliplr@input,w,c
  2062  001178  0B55               	andlw	85
  2063  00117A  1014               	iorwf	??_fliplr+1,w,c
  2064  00117C  6E15               	movwf	fliplr@input,c
  2065                           
  2066                           ;LCD_SPI.c: 77: return input;
  2067  00117E  5015               	movf	fliplr@input,w,c
  2068  001180  0012               	return	
  2069  001182                     __end_of_fliplr:
  2070                           	opt stack 0
  2071                           tblptru	equ	0xFF8
  2072                           tblptrh	equ	0xFF7
  2073                           tblptrl	equ	0xFF6
  2074                           tablat	equ	0xFF5
  2075                           prodl	equ	0xFF3
  2076                           intcon	equ	0xFF2
  2077                           intcon2	equ	0xFF1
  2078                           intcon3	equ	0xFF0
  2079                           indf0	equ	0xFEF
  2080                           postinc0	equ	0xFEE
  2081                           fsr0h	equ	0xFEA
  2082                           fsr0l	equ	0xFE9
  2083                           wreg	equ	0xFE8
  2084                           postdec1	equ	0xFE5
  2085                           fsr1l	equ	0xFE1
  2086                           status	equ	0xFD8
  2087                           
  2088 ;; *************** function _initialisation_LCD *****************
  2089 ;; Defined at:
  2090 ;;		line 150 in file "LCD_SPI.c"
  2091 ;; Parameters:    Size  Location     Type
  2092 ;;		None
  2093 ;; Auto vars:     Size  Location     Type
  2094 ;;		None
  2095 ;; Return value:  Size  Location     Type
  2096 ;;                  1    wreg      void 
  2097 ;; Registers used:
  2098 ;;		wreg, status,2, status,0, cstack
  2099 ;; Tracked objects:
  2100 ;;		On entry : 0/0
  2101 ;;		On exit  : 0/0
  2102 ;;		Unchanged: 0/0
  2103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2104 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2105 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2106 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2107 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2108 ;;Total ram usage:        0 bytes
  2109 ;; Hardware stack levels used:    1
  2110 ;; Hardware stack levels required when called:    4
  2111 ;; This function calls:
  2112 ;;		_clearDisplay
  2113 ;;		_displayCtrl
  2114 ;;		_initialisation_PORT
  2115 ;;		_initialisation_SPI
  2116 ;; This function is called by:
  2117 ;;		_main
  2118 ;; This function uses a non-reentrant model
  2119 ;;
  2120                           
  2121                           	psect	text15
  2122  001436                     __ptext15:
  2123                           	opt stack 0
  2124  001436                     _initialisation_LCD:
  2125                           	opt stack 26
  2126                           
  2127                           ;LCD_SPI.c: 152: initialisation_PORT();
  2128                           
  2129                           ;incstack = 0
  2130  001436  EC09  F009         	call	_initialisation_PORT	;wreg free
  2131                           
  2132                           ;LCD_SPI.c: 153: initialisation_SPI();
  2133  00143A  EC29  F009         	call	_initialisation_SPI	;wreg free
  2134                           
  2135                           ;LCD_SPI.c: 154: clearDisplay();
  2136  00143E  ECEA  F009         	call	_clearDisplay	;wreg free
  2137                           
  2138                           ;LCD_SPI.c: 155: displayCtrl(1,1,0);
  2139  001442  0E01               	movlw	1
  2140  001444  6E15               	movwf	displayCtrl@cursor,c
  2141  001446  0E00               	movlw	0
  2142  001448  6E16               	movwf	displayCtrl@blink,c
  2143  00144A  0E01               	movlw	1
  2144  00144C  ECE7  F008         	call	_displayCtrl
  2145  001450  0012               	return		;funcret
  2146  001452                     __end_of_initialisation_LCD:
  2147                           	opt stack 0
  2148                           tblptru	equ	0xFF8
  2149                           tblptrh	equ	0xFF7
  2150                           tblptrl	equ	0xFF6
  2151                           tablat	equ	0xFF5
  2152                           prodl	equ	0xFF3
  2153                           intcon	equ	0xFF2
  2154                           intcon2	equ	0xFF1
  2155                           intcon3	equ	0xFF0
  2156                           indf0	equ	0xFEF
  2157                           postinc0	equ	0xFEE
  2158                           fsr0h	equ	0xFEA
  2159                           fsr0l	equ	0xFE9
  2160                           wreg	equ	0xFE8
  2161                           postdec1	equ	0xFE5
  2162                           fsr1l	equ	0xFE1
  2163                           status	equ	0xFD8
  2164                           
  2165 ;; *************** function _initialisation_SPI *****************
  2166 ;; Defined at:
  2167 ;;		line 113 in file "LCD_SPI.c"
  2168 ;; Parameters:    Size  Location     Type
  2169 ;;		None
  2170 ;; Auto vars:     Size  Location     Type
  2171 ;;		None
  2172 ;; Return value:  Size  Location     Type
  2173 ;;                  1    wreg      void 
  2174 ;; Registers used:
  2175 ;;		wreg, status,2, status,0
  2176 ;; Tracked objects:
  2177 ;;		On entry : 0/0
  2178 ;;		On exit  : 0/0
  2179 ;;		Unchanged: 0/0
  2180 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2181 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2182 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2183 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2184 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2185 ;;Total ram usage:        0 bytes
  2186 ;; Hardware stack levels used:    1
  2187 ;; Hardware stack levels required when called:    1
  2188 ;; This function calls:
  2189 ;;		Nothing
  2190 ;; This function is called by:
  2191 ;;		_initialisation_LCD
  2192 ;; This function uses a non-reentrant model
  2193 ;;
  2194                           
  2195                           	psect	text16
  2196  001252                     __ptext16:
  2197                           	opt stack 0
  2198  001252                     _initialisation_SPI:
  2199                           	opt stack 28
  2200                           
  2201                           ;LCD_SPI.c: 117: RPOR24_25 |= 0x04;
  2202                           
  2203                           ;incstack = 0
  2204  001252  010E               	movlb	14	; () banked
  2205  001254  851E               	bsf	30,2,b	;volatile
  2206                           
  2207                           ; BSR set to: 14
  2208                           ;LCD_SPI.c: 118: RPOR24_25 &= 0xF4;
  2209  001256  0EF4               	movlw	244
  2210  001258  010E               	movlb	14	; () banked
  2211  00125A  171E               	andwf	30,f,b	;volatile
  2212                           
  2213                           ; BSR set to: 14
  2214                           ;LCD_SPI.c: 120: RPOR22_23 |= 0x05;
  2215  00125C  0E05               	movlw	5
  2216  00125E  010E               	movlb	14	; () banked
  2217  001260  131D               	iorwf	29,f,b	;volatile
  2218                           
  2219                           ; BSR set to: 14
  2220                           ;LCD_SPI.c: 121: RPOR22_23 &= 0xF5;
  2221  001262  0EF5               	movlw	245
  2222  001264  010E               	movlb	14	; () banked
  2223  001266  171D               	andwf	29,f,b	;volatile
  2224                           
  2225                           ; BSR set to: 14
  2226                           ;LCD_SPI.c: 123: RPINR12_13 |= 0x50;
  2227  001268  0E50               	movlw	80
  2228  00126A  010E               	movlb	14	; () banked
  2229  00126C  1330               	iorwf	48,f,b	;volatile
  2230                           
  2231                           ; BSR set to: 14
  2232                           ;LCD_SPI.c: 124: RPINR12_13 &= 0x5F;
  2233  00126E  0E5F               	movlw	95
  2234  001270  010E               	movlb	14	; () banked
  2235  001272  1730               	andwf	48,f,b	;volatile
  2236                           
  2237                           ; BSR set to: 14
  2238                           ;LCD_SPI.c: 127: SSP2CON1 &= 0xF1;
  2239  001274  0EF1               	movlw	241
  2240  001276  010F               	movlb	15	; () banked
  2241  001278  1719               	andwf	25,f,b	;volatile
  2242                           
  2243                           ; BSR set to: 15
  2244                           ;LCD_SPI.c: 128: SSP2CON1 |= 0x31;
  2245  00127A  0E31               	movlw	49
  2246  00127C  010F               	movlb	15	; () banked
  2247  00127E  1319               	iorwf	25,f,b	;volatile
  2248                           
  2249                           ; BSR set to: 15
  2250                           ;LCD_SPI.c: 129: SSP2STAT |= 0x80;
  2251  001280  010F               	movlb	15	; () banked
  2252  001282  8F1A               	bsf	26,7,b	;volatile
  2253                           
  2254                           ; BSR set to: 15
  2255                           ;LCD_SPI.c: 130: SSP2STAT &= ~0x40;
  2256  001284  010F               	movlb	15	; () banked
  2257  001286  9D1A               	bcf	26,6,b	;volatile
  2258                           
  2259                           ; BSR set to: 15
  2260                           ;LCD_SPI.c: 131: SSP2CON3 &= 0x8F;
  2261  001288  0E8F               	movlw	143
  2262  00128A  010F               	movlb	15	; () banked
  2263  00128C  1739               	andwf	57,f,b	;volatile
  2264                           
  2265                           ; BSR set to: 15
  2266  00128E  0012               	return		;funcret
  2267  001290                     __end_of_initialisation_SPI:
  2268                           	opt stack 0
  2269                           tblptru	equ	0xFF8
  2270                           tblptrh	equ	0xFF7
  2271                           tblptrl	equ	0xFF6
  2272                           tablat	equ	0xFF5
  2273                           prodl	equ	0xFF3
  2274                           intcon	equ	0xFF2
  2275                           intcon2	equ	0xFF1
  2276                           intcon3	equ	0xFF0
  2277                           indf0	equ	0xFEF
  2278                           postinc0	equ	0xFEE
  2279                           fsr0h	equ	0xFEA
  2280                           fsr0l	equ	0xFE9
  2281                           wreg	equ	0xFE8
  2282                           postdec1	equ	0xFE5
  2283                           fsr1l	equ	0xFE1
  2284                           status	equ	0xFD8
  2285                           
  2286 ;; *************** function _initialisation_PORT *****************
  2287 ;; Defined at:
  2288 ;;		line 135 in file "LCD_SPI.c"
  2289 ;; Parameters:    Size  Location     Type
  2290 ;;		None
  2291 ;; Auto vars:     Size  Location     Type
  2292 ;;		None
  2293 ;; Return value:  Size  Location     Type
  2294 ;;                  1    wreg      void 
  2295 ;; Registers used:
  2296 ;;		wreg, status,2, status,0
  2297 ;; Tracked objects:
  2298 ;;		On entry : 0/0
  2299 ;;		On exit  : 0/0
  2300 ;;		Unchanged: 0/0
  2301 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2302 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2303 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2304 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2305 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2306 ;;Total ram usage:        1 bytes
  2307 ;; Hardware stack levels used:    1
  2308 ;; Hardware stack levels required when called:    1
  2309 ;; This function calls:
  2310 ;;		Nothing
  2311 ;; This function is called by:
  2312 ;;		_initialisation_LCD
  2313 ;; This function uses a non-reentrant model
  2314 ;;
  2315                           
  2316                           	psect	text17
  2317  001212                     __ptext17:
  2318                           	opt stack 0
  2319  001212                     _initialisation_PORT:
  2320                           	opt stack 28
  2321                           
  2322                           ;LCD_SPI.c: 137: OSCCON = OSCCON | 0b01110000;
  2323                           
  2324                           ; BSR set to: 15
  2325                           ;incstack = 0
  2326  001212  50D3               	movf	4051,w,c	;volatile
  2327  001214  0970               	iorlw	112
  2328  001216  6ED3               	movwf	4051,c	;volatile
  2329                           
  2330                           ;LCD_SPI.c: 138: TRISDbits.TRISD4 = 0;
  2331  001218  9895               	bcf	3989,4,c	;volatile
  2332                           
  2333                           ;LCD_SPI.c: 139: TRISDbits.TRISD2 = 0;
  2334  00121A  9495               	bcf	3989,2,c	;volatile
  2335                           
  2336                           ;LCD_SPI.c: 140: TRISDbits.TRISD3 = 0;
  2337  00121C  9695               	bcf	3989,3,c	;volatile
  2338                           
  2339                           ;LCD_SPI.c: 141: TRISDbits.TRISD1 = 1;
  2340  00121E  8295               	bsf	3989,1,c	;volatile
  2341                           
  2342                           ;LCD_SPI.c: 142: TRISCbits.TRISC0 = 0;
  2343  001220  9094               	bcf	3988,0,c	;volatile
  2344                           
  2345                           ;LCD_SPI.c: 143: LATDbits.LATD3 = 1;
  2346  001222  868C               	bsf	3980,3,c	;volatile
  2347                           
  2348                           ;LCD_SPI.c: 144: __nop();
  2349  001224  F000               	nop	
  2350                           
  2351                           ;LCD_SPI.c: 145: _delay((unsigned long)((33)*(8000000/4000.0)));
  2352  001226  0E56               	movlw	86
  2353  001228  6E13               	movwf	??_initialisation_PORT& (0+255),c
  2354  00122A  0EB6               	movlw	182
  2355  00122C                     u677:
  2356  00122C  2EE8               	decfsz	wreg,f,c
  2357  00122E  D7FE               	bra	u677
  2358  001230  2E13               	decfsz	??_initialisation_PORT& (0+255),f,c
  2359  001232  D7FC               	bra	u677
  2360                           
  2361                           ;LCD_SPI.c: 146: _delay((unsigned long)((33)*(8000000/4000.0)));
  2362  001234  0E56               	movlw	86
  2363  001236  6E13               	movwf	??_initialisation_PORT& (0+255),c
  2364  001238  0EB6               	movlw	182
  2365  00123A                     u687:
  2366  00123A  2EE8               	decfsz	wreg,f,c
  2367  00123C  D7FE               	bra	u687
  2368  00123E  2E13               	decfsz	??_initialisation_PORT& (0+255),f,c
  2369  001240  D7FC               	bra	u687
  2370                           
  2371                           ;LCD_SPI.c: 147: _delay((unsigned long)((33)*(8000000/4000.0)));
  2372  001242  0E56               	movlw	86
  2373  001244  6E13               	movwf	??_initialisation_PORT& (0+255),c
  2374  001246  0EB6               	movlw	182
  2375  001248                     u697:
  2376  001248  2EE8               	decfsz	wreg,f,c
  2377  00124A  D7FE               	bra	u697
  2378  00124C  2E13               	decfsz	??_initialisation_PORT& (0+255),f,c
  2379  00124E  D7FC               	bra	u697
  2380  001250  0012               	return		;funcret
  2381  001252                     __end_of_initialisation_PORT:
  2382                           	opt stack 0
  2383                           tblptru	equ	0xFF8
  2384                           tblptrh	equ	0xFF7
  2385                           tblptrl	equ	0xFF6
  2386                           tablat	equ	0xFF5
  2387                           prodl	equ	0xFF3
  2388                           intcon	equ	0xFF2
  2389                           intcon2	equ	0xFF1
  2390                           intcon3	equ	0xFF0
  2391                           indf0	equ	0xFEF
  2392                           postinc0	equ	0xFEE
  2393                           fsr0h	equ	0xFEA
  2394                           fsr0l	equ	0xFE9
  2395                           wreg	equ	0xFE8
  2396                           postdec1	equ	0xFE5
  2397                           fsr1l	equ	0xFE1
  2398                           status	equ	0xFD8
  2399                           
  2400 ;; *************** function _displayCtrl *****************
  2401 ;; Defined at:
  2402 ;;		line 31 in file "LCD_SPI.c"
  2403 ;; Parameters:    Size  Location     Type
  2404 ;;  display         1    wreg     unsigned char 
  2405 ;;  cursor          1   20[COMRAM] unsigned char 
  2406 ;;  blink           1   21[COMRAM] unsigned char 
  2407 ;; Auto vars:     Size  Location     Type
  2408 ;;  display         1   22[COMRAM] unsigned char 
  2409 ;;  BCD             1   23[COMRAM] unsigned char 
  2410 ;; Return value:  Size  Location     Type
  2411 ;;                  1    wreg      void 
  2412 ;; Registers used:
  2413 ;;		wreg, status,2, status,0, cstack
  2414 ;; Tracked objects:
  2415 ;;		On entry : 0/0
  2416 ;;		On exit  : 0/0
  2417 ;;		Unchanged: 0/0
  2418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2419 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2420 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2421 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2422 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2423 ;;Total ram usage:        4 bytes
  2424 ;; Hardware stack levels used:    1
  2425 ;; Hardware stack levels required when called:    3
  2426 ;; This function calls:
  2427 ;;		_readBusyFlag
  2428 ;;		_spi_Send_Read
  2429 ;; This function is called by:
  2430 ;;		_initialisation_LCD
  2431 ;; This function uses a non-reentrant model
  2432 ;;
  2433                           
  2434                           	psect	text18
  2435  0011CE                     __ptext18:
  2436                           	opt stack 0
  2437  0011CE                     _displayCtrl:
  2438                           	opt stack 26
  2439                           
  2440                           ;incstack = 0
  2441                           ;displayCtrl@display stored from wreg
  2442  0011CE  6E17               	movwf	displayCtrl@display,c
  2443                           
  2444                           ;LCD_SPI.c: 33: char BCD = blink;
  2445  0011D0  C016  F018         	movff	displayCtrl@blink,displayCtrl@BCD
  2446                           
  2447                           ;LCD_SPI.c: 34: BCD <<= 1;
  2448  0011D4  90D8               	bcf	status,0,c
  2449  0011D6  3618               	rlcf	displayCtrl@BCD,f,c
  2450                           
  2451                           ;LCD_SPI.c: 35: BCD += cursor;
  2452  0011D8  5015               	movf	displayCtrl@cursor,w,c
  2453  0011DA  2618               	addwf	displayCtrl@BCD,f,c
  2454                           
  2455                           ;LCD_SPI.c: 36: BCD <<= 1;
  2456  0011DC  90D8               	bcf	status,0,c
  2457  0011DE  3618               	rlcf	displayCtrl@BCD,f,c
  2458                           
  2459                           ;LCD_SPI.c: 37: BCD += display;
  2460  0011E0  5017               	movf	displayCtrl@display,w,c
  2461  0011E2  2618               	addwf	displayCtrl@BCD,f,c
  2462                           
  2463                           ;LCD_SPI.c: 38: BCD <<= 1;
  2464  0011E4  90D8               	bcf	status,0,c
  2465  0011E6  3618               	rlcf	displayCtrl@BCD,f,c
  2466                           
  2467                           ;LCD_SPI.c: 39: BCD += 1;
  2468  0011E8  2A18               	incf	displayCtrl@BCD,f,c
  2469                           
  2470                           ;LCD_SPI.c: 40: BCD <<= 4;
  2471  0011EA  3A18               	swapf	displayCtrl@BCD,f,c
  2472  0011EC  0EF0               	movlw	240
  2473  0011EE  1618               	andwf	displayCtrl@BCD,f,c
  2474  0011F0  EC36  F00A         	call	_readBusyFlag	;wreg free
  2475  0011F4  0900               	iorlw	0
  2476  0011F6  A4D8               	btfss	status,2,c
  2477  0011F8  D7FB               	goto	l309
  2478                           
  2479                           ;LCD_SPI.c: 43: LATDbits.LATD3 = 0;
  2480  0011FA  968C               	bcf	3980,3,c	;volatile
  2481                           
  2482                           ;LCD_SPI.c: 44: spi_Send_Read(0xF8);
  2483  0011FC  0EF8               	movlw	248
  2484  0011FE  EC4D  F00A         	call	_spi_Send_Read
  2485                           
  2486                           ;LCD_SPI.c: 45: spi_Send_Read(BCD);
  2487  001202  5018               	movf	displayCtrl@BCD,w,c
  2488  001204  EC4D  F00A         	call	_spi_Send_Read
  2489                           
  2490                           ;LCD_SPI.c: 46: spi_Send_Read(0x00);
  2491  001208  0E00               	movlw	0
  2492  00120A  EC4D  F00A         	call	_spi_Send_Read
  2493                           
  2494                           ;LCD_SPI.c: 47: LATDbits.LATD3 = 1;
  2495  00120E  868C               	bsf	3980,3,c	;volatile
  2496  001210  0012               	return		;funcret
  2497  001212                     __end_of_displayCtrl:
  2498                           	opt stack 0
  2499                           tblptru	equ	0xFF8
  2500                           tblptrh	equ	0xFF7
  2501                           tblptrl	equ	0xFF6
  2502                           tablat	equ	0xFF5
  2503                           prodl	equ	0xFF3
  2504                           intcon	equ	0xFF2
  2505                           intcon2	equ	0xFF1
  2506                           intcon3	equ	0xFF0
  2507                           indf0	equ	0xFEF
  2508                           postinc0	equ	0xFEE
  2509                           fsr0h	equ	0xFEA
  2510                           fsr0l	equ	0xFE9
  2511                           wreg	equ	0xFE8
  2512                           postdec1	equ	0xFE5
  2513                           fsr1l	equ	0xFE1
  2514                           status	equ	0xFD8
  2515                           
  2516 ;; *************** function _clearDisplay *****************
  2517 ;; Defined at:
  2518 ;;		line 19 in file "LCD_SPI.c"
  2519 ;; Parameters:    Size  Location     Type
  2520 ;;		None
  2521 ;; Auto vars:     Size  Location     Type
  2522 ;;		None
  2523 ;; Return value:  Size  Location     Type
  2524 ;;                  1    wreg      void 
  2525 ;; Registers used:
  2526 ;;		wreg, status,2, status,0, cstack
  2527 ;; Tracked objects:
  2528 ;;		On entry : 0/0
  2529 ;;		On exit  : 0/0
  2530 ;;		Unchanged: 0/0
  2531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2532 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2533 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2534 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2535 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2536 ;;Total ram usage:        0 bytes
  2537 ;; Hardware stack levels used:    1
  2538 ;; Hardware stack levels required when called:    3
  2539 ;; This function calls:
  2540 ;;		_readBusyFlag
  2541 ;;		_spi_Send_Read
  2542 ;; This function is called by:
  2543 ;;		_printMBED
  2544 ;;		_printStartGame
  2545 ;;		_initialisation_LCD
  2546 ;;		_printEndGame
  2547 ;; This function uses a non-reentrant model
  2548 ;;
  2549                           
  2550                           	psect	text19
  2551  0013D4                     __ptext19:
  2552                           	opt stack 0
  2553  0013D4                     _clearDisplay:
  2554                           	opt stack 26
  2555                           
  2556                           ;LCD_SPI.c: 21: while(readBusyFlag());
  2557                           
  2558                           ;incstack = 0
  2559  0013D4  EC36  F00A         	call	_readBusyFlag	;wreg free
  2560  0013D8  0900               	iorlw	0
  2561  0013DA  A4D8               	btfss	status,2,c
  2562  0013DC  D7FB               	goto	_clearDisplay
  2563                           
  2564                           ;LCD_SPI.c: 23: LATDbits.LATD3 = 0;
  2565  0013DE  968C               	bcf	3980,3,c	;volatile
  2566                           
  2567                           ;LCD_SPI.c: 24: spi_Send_Read(0xF8);
  2568  0013E0  0EF8               	movlw	248
  2569  0013E2  EC4D  F00A         	call	_spi_Send_Read
  2570                           
  2571                           ;LCD_SPI.c: 25: spi_Send_Read(0x80);
  2572  0013E6  0E80               	movlw	128
  2573  0013E8  EC4D  F00A         	call	_spi_Send_Read
  2574                           
  2575                           ;LCD_SPI.c: 26: spi_Send_Read(0x00);
  2576  0013EC  0E00               	movlw	0
  2577  0013EE  EC4D  F00A         	call	_spi_Send_Read
  2578                           
  2579                           ;LCD_SPI.c: 27: LATDbits.LATD3 = 1;
  2580  0013F2  868C               	bsf	3980,3,c	;volatile
  2581  0013F4  0012               	return		;funcret
  2582  0013F6                     __end_of_clearDisplay:
  2583                           	opt stack 0
  2584                           tblptru	equ	0xFF8
  2585                           tblptrh	equ	0xFF7
  2586                           tblptrl	equ	0xFF6
  2587                           tablat	equ	0xFF5
  2588                           prodl	equ	0xFF3
  2589                           intcon	equ	0xFF2
  2590                           intcon2	equ	0xFF1
  2591                           intcon3	equ	0xFF0
  2592                           indf0	equ	0xFEF
  2593                           postinc0	equ	0xFEE
  2594                           fsr0h	equ	0xFEA
  2595                           fsr0l	equ	0xFE9
  2596                           wreg	equ	0xFE8
  2597                           postdec1	equ	0xFE5
  2598                           fsr1l	equ	0xFE1
  2599                           status	equ	0xFD8
  2600                           
  2601 ;; *************** function _readBusyFlag *****************
  2602 ;; Defined at:
  2603 ;;		line 94 in file "LCD_SPI.c"
  2604 ;; Parameters:    Size  Location     Type
  2605 ;;		None
  2606 ;; Auto vars:     Size  Location     Type
  2607 ;;  retValue        1   19[COMRAM] unsigned char 
  2608 ;; Return value:  Size  Location     Type
  2609 ;;                  1    wreg      unsigned char 
  2610 ;; Registers used:
  2611 ;;		wreg, status,2, status,0, cstack
  2612 ;; Tracked objects:
  2613 ;;		On entry : 0/0
  2614 ;;		On exit  : 0/0
  2615 ;;		Unchanged: 0/0
  2616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2617 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2618 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2619 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2620 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2621 ;;Total ram usage:        1 bytes
  2622 ;; Hardware stack levels used:    1
  2623 ;; Hardware stack levels required when called:    2
  2624 ;; This function calls:
  2625 ;;		_spi_Send_Read
  2626 ;; This function is called by:
  2627 ;;		_clearDisplay
  2628 ;;		_displayCtrl
  2629 ;;		_putchLCD
  2630 ;;		_moveCursor
  2631 ;; This function uses a non-reentrant model
  2632 ;;
  2633                           
  2634                           	psect	text20
  2635  00146C                     __ptext20:
  2636                           	opt stack 0
  2637  00146C                     _readBusyFlag:
  2638                           	opt stack 25
  2639                           
  2640                           ;LCD_SPI.c: 96: unsigned char retValue;
  2641                           ;LCD_SPI.c: 98: LATDbits.LATD3 = 0;
  2642                           
  2643                           ;incstack = 0
  2644  00146C  968C               	bcf	3980,3,c	;volatile
  2645                           
  2646                           ;LCD_SPI.c: 99: spi_Send_Read(0xFC);
  2647  00146E  0EFC               	movlw	252
  2648  001470  EC4D  F00A         	call	_spi_Send_Read
  2649                           
  2650                           ;LCD_SPI.c: 100: retValue = spi_Send_Read(0x00);
  2651  001474  0E00               	movlw	0
  2652  001476  EC4D  F00A         	call	_spi_Send_Read
  2653  00147A  6E14               	movwf	readBusyFlag@retValue,c
  2654                           
  2655                           ;LCD_SPI.c: 101: LATDbits.LATD3 = 1;
  2656  00147C  868C               	bsf	3980,3,c	;volatile
  2657                           
  2658                           ;LCD_SPI.c: 102: _delay((unsigned long)((1)*(8000000/4000000.0)));
  2659  00147E  D000               	nop2		;2 cycle nop
  2660                           
  2661                           ;LCD_SPI.c: 103: return (retValue & 1);
  2662  001480  5014               	movf	readBusyFlag@retValue,w,c
  2663  001482  0B01               	andlw	1
  2664  001484  0012               	return	
  2665  001486                     __end_of_readBusyFlag:
  2666                           	opt stack 0
  2667                           tblptru	equ	0xFF8
  2668                           tblptrh	equ	0xFF7
  2669                           tblptrl	equ	0xFF6
  2670                           tablat	equ	0xFF5
  2671                           prodl	equ	0xFF3
  2672                           intcon	equ	0xFF2
  2673                           intcon2	equ	0xFF1
  2674                           intcon3	equ	0xFF0
  2675                           indf0	equ	0xFEF
  2676                           postinc0	equ	0xFEE
  2677                           fsr0h	equ	0xFEA
  2678                           fsr0l	equ	0xFE9
  2679                           wreg	equ	0xFE8
  2680                           postdec1	equ	0xFE5
  2681                           fsr1l	equ	0xFE1
  2682                           status	equ	0xFD8
  2683                           
  2684 ;; *************** function _spi_Send_Read *****************
  2685 ;; Defined at:
  2686 ;;		line 12 in file "LCD_SPI.c"
  2687 ;; Parameters:    Size  Location     Type
  2688 ;;  byte            1    wreg     unsigned char 
  2689 ;; Auto vars:     Size  Location     Type
  2690 ;;  byte            1   18[COMRAM] unsigned char 
  2691 ;; Return value:  Size  Location     Type
  2692 ;;                  1    wreg      unsigned char 
  2693 ;; Registers used:
  2694 ;;		wreg, status,2
  2695 ;; Tracked objects:
  2696 ;;		On entry : 0/0
  2697 ;;		On exit  : 0/0
  2698 ;;		Unchanged: 0/0
  2699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2700 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2701 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2702 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2703 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2704 ;;Total ram usage:        1 bytes
  2705 ;; Hardware stack levels used:    1
  2706 ;; Hardware stack levels required when called:    1
  2707 ;; This function calls:
  2708 ;;		Nothing
  2709 ;; This function is called by:
  2710 ;;		_clearDisplay
  2711 ;;		_displayCtrl
  2712 ;;		_putchLCD
  2713 ;;		_moveCursor
  2714 ;;		_readBusyFlag
  2715 ;; This function uses a non-reentrant model
  2716 ;;
  2717                           
  2718                           	psect	text21
  2719  00149A                     __ptext21:
  2720                           	opt stack 0
  2721  00149A                     _spi_Send_Read:
  2722                           	opt stack 26
  2723                           
  2724                           ;incstack = 0
  2725                           ;spi_Send_Read@byte stored from wreg
  2726  00149A  6E13               	movwf	spi_Send_Read@byte,c
  2727                           
  2728                           ;LCD_SPI.c: 14: SSP2BUF = byte;
  2729  00149C  C013  FF03         	movff	spi_Send_Read@byte,3843	;volatile
  2730  0014A0  010F               	movlb	15	; () banked
  2731  0014A2  A11A               	btfss	26,0,b	;volatile
  2732  0014A4  D7FD               	goto	l297
  2733                           
  2734                           ; BSR set to: 15
  2735                           ;LCD_SPI.c: 16: return SSP2BUF;
  2736  0014A6  010F               	movlb	15	; () banked
  2737  0014A8  5103               	movf	3,w,b	;volatile
  2738                           
  2739                           ; BSR set to: 15
  2740  0014AA  0012               	return		;funcret
  2741  0014AC                     __end_of_spi_Send_Read:
  2742                           	opt stack 0
  2743                           tblptru	equ	0xFF8
  2744                           tblptrh	equ	0xFF7
  2745                           tblptrl	equ	0xFF6
  2746                           tablat	equ	0xFF5
  2747                           prodl	equ	0xFF3
  2748                           intcon	equ	0xFF2
  2749                           intcon2	equ	0xFF1
  2750                           intcon3	equ	0xFF0
  2751                           indf0	equ	0xFEF
  2752                           postinc0	equ	0xFEE
  2753                           fsr0h	equ	0xFEA
  2754                           fsr0l	equ	0xFE9
  2755                           wreg	equ	0xFE8
  2756                           postdec1	equ	0xFE5
  2757                           fsr1l	equ	0xFE1
  2758                           status	equ	0xFD8
  2759                           
  2760 ;; *************** function _getRandomTarget *****************
  2761 ;; Defined at:
  2762 ;;		line 302 in file "main.c"
  2763 ;; Parameters:    Size  Location     Type
  2764 ;;  Target          2   18[COMRAM] PTR short 
  2765 ;;		 -> nextTarget(4), 
  2766 ;; Auto vars:     Size  Location     Type
  2767 ;;		None
  2768 ;; Return value:  Size  Location     Type
  2769 ;;                  1    wreg      void 
  2770 ;; Registers used:
  2771 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2772 ;; Tracked objects:
  2773 ;;		On entry : 0/0
  2774 ;;		On exit  : 0/0
  2775 ;;		Unchanged: 0/0
  2776 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2777 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2778 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2779 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2780 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2781 ;;Total ram usage:        2 bytes
  2782 ;; Hardware stack levels used:    1
  2783 ;; Hardware stack levels required when called:    1
  2784 ;; This function calls:
  2785 ;;		Nothing
  2786 ;; This function is called by:
  2787 ;;		_main
  2788 ;; This function uses a non-reentrant model
  2789 ;;
  2790                           
  2791                           	psect	text22
  2792  00138C                     __ptext22:
  2793                           	opt stack 0
  2794  00138C                     _getRandomTarget:
  2795                           	opt stack 29
  2796                           
  2797                           ;main.c: 303: Target[0] = 0;
  2798                           
  2799                           ; BSR set to: 15
  2800                           ;incstack = 0
  2801  00138C  C013  FFD9         	movff	getRandomTarget@Target,fsr2l
  2802  001390  C014  FFDA         	movff	getRandomTarget@Target+1,fsr2h
  2803  001394  0E00               	movlw	0
  2804  001396  6EDE               	movwf	postinc2,c
  2805  001398  0E00               	movlw	0
  2806  00139A  6EDD               	movwf	postdec2,c
  2807                           
  2808                           ;main.c: 304: Target[1] = 0;
  2809  00139C  EE20 F002          	lfsr	2,2
  2810  0013A0  5013               	movf	getRandomTarget@Target,w,c
  2811  0013A2  26D9               	addwf	fsr2l,f,c
  2812  0013A4  5014               	movf	getRandomTarget@Target+1,w,c
  2813  0013A6  22DA               	addwfc	fsr2h,f,c
  2814  0013A8  0E00               	movlw	0
  2815  0013AA  6EDE               	movwf	postinc2,c
  2816  0013AC  0E00               	movlw	0
  2817  0013AE  6EDD               	movwf	postdec2,c
  2818  0013B0  0012               	return		;funcret
  2819  0013B2                     __end_of_getRandomTarget:
  2820                           	opt stack 0
  2821                           tblptru	equ	0xFF8
  2822                           tblptrh	equ	0xFF7
  2823                           tblptrl	equ	0xFF6
  2824                           tablat	equ	0xFF5
  2825                           prodl	equ	0xFF3
  2826                           intcon	equ	0xFF2
  2827                           intcon2	equ	0xFF1
  2828                           intcon3	equ	0xFF0
  2829                           indf0	equ	0xFEF
  2830                           postinc0	equ	0xFEE
  2831                           fsr0h	equ	0xFEA
  2832                           fsr0l	equ	0xFE9
  2833                           wreg	equ	0xFE8
  2834                           postdec1	equ	0xFE5
  2835                           fsr1l	equ	0xFE1
  2836                           postinc2	equ	0xFDE
  2837                           postdec2	equ	0xFDD
  2838                           fsr2h	equ	0xFDA
  2839                           fsr2l	equ	0xFD9
  2840                           status	equ	0xFD8
  2841                           
  2842 ;; *************** function _fireShot *****************
  2843 ;; Defined at:
  2844 ;;		line 335 in file "main.c"
  2845 ;; Parameters:    Size  Location     Type
  2846 ;;		None
  2847 ;; Auto vars:     Size  Location     Type
  2848 ;;		None
  2849 ;; Return value:  Size  Location     Type
  2850 ;;                  1    wreg      void 
  2851 ;; Registers used:
  2852 ;;		None
  2853 ;; Tracked objects:
  2854 ;;		On entry : 0/0
  2855 ;;		On exit  : 0/0
  2856 ;;		Unchanged: 0/0
  2857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2858 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2859 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2860 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2861 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2862 ;;Total ram usage:        0 bytes
  2863 ;; Hardware stack levels used:    1
  2864 ;; Hardware stack levels required when called:    1
  2865 ;; This function calls:
  2866 ;;		Nothing
  2867 ;; This function is called by:
  2868 ;;		_main
  2869 ;; This function uses a non-reentrant model
  2870 ;;
  2871                           
  2872                           	psect	text23
  2873  0014DE                     __ptext23:
  2874                           	opt stack 0
  2875  0014DE                     _fireShot:
  2876                           	opt stack 29
  2877                           
  2878                           ;main.c: 336: LATBbits.LATB1 = 1;
  2879                           
  2880                           ;incstack = 0
  2881  0014DE  828A               	bsf	3978,1,c	;volatile
  2882  0014E0  0012               	return		;funcret
  2883  0014E2                     __end_of_fireShot:
  2884                           	opt stack 0
  2885                           tblptru	equ	0xFF8
  2886                           tblptrh	equ	0xFF7
  2887                           tblptrl	equ	0xFF6
  2888                           tablat	equ	0xFF5
  2889                           prodl	equ	0xFF3
  2890                           intcon	equ	0xFF2
  2891                           intcon2	equ	0xFF1
  2892                           intcon3	equ	0xFF0
  2893                           indf0	equ	0xFEF
  2894                           postinc0	equ	0xFEE
  2895                           fsr0h	equ	0xFEA
  2896                           fsr0l	equ	0xFE9
  2897                           wreg	equ	0xFE8
  2898                           postdec1	equ	0xFE5
  2899                           fsr1l	equ	0xFE1
  2900                           postinc2	equ	0xFDE
  2901                           postdec2	equ	0xFDD
  2902                           fsr2h	equ	0xFDA
  2903                           fsr2l	equ	0xFD9
  2904                           status	equ	0xFD8
  2905                           
  2906 ;; *************** function _changeMode *****************
  2907 ;; Defined at:
  2908 ;;		line 307 in file "main.c"
  2909 ;; Parameters:    Size  Location     Type
  2910 ;;		None
  2911 ;; Auto vars:     Size  Location     Type
  2912 ;;		None
  2913 ;; Return value:  Size  Location     Type
  2914 ;;                  1    wreg      void 
  2915 ;; Registers used:
  2916 ;;		wreg, status,2
  2917 ;; Tracked objects:
  2918 ;;		On entry : 0/0
  2919 ;;		On exit  : 0/0
  2920 ;;		Unchanged: 0/0
  2921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2922 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2923 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2924 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2925 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2926 ;;Total ram usage:        0 bytes
  2927 ;; Hardware stack levels used:    1
  2928 ;; Hardware stack levels required when called:    1
  2929 ;; This function calls:
  2930 ;;		Nothing
  2931 ;; This function is called by:
  2932 ;;		_main
  2933 ;; This function uses a non-reentrant model
  2934 ;;
  2935                           
  2936                           	psect	text24
  2937  0014AC                     __ptext24:
  2938                           	opt stack 0
  2939  0014AC                     _changeMode:
  2940                           	opt stack 29
  2941                           
  2942                           ;main.c: 308: if (myModeState == MODE0){
  2943                           
  2944                           ;incstack = 0
  2945  0014AC  5031               	movf	_myModeState,w,c
  2946  0014AE  A4D8               	btfss	status,2,c
  2947  0014B0  D003               	goto	l188
  2948                           
  2949                           ;main.c: 309: myModeState=MODE1;
  2950  0014B2  0E01               	movlw	1
  2951  0014B4  6E31               	movwf	_myModeState,c
  2952                           
  2953                           ;main.c: 310: }
  2954  0014B6  0012               	return	
  2955  0014B8                     l188:
  2956                           
  2957                           ;main.c: 311: else{
  2958                           ;main.c: 312: myModeState=MODE0;
  2959  0014B8  0E00               	movlw	0
  2960  0014BA  6E31               	movwf	_myModeState,c
  2961  0014BC  0012               	return	
  2962  0014BE                     __end_of_changeMode:
  2963                           	opt stack 0
  2964                           tblptru	equ	0xFF8
  2965                           tblptrh	equ	0xFF7
  2966                           tblptrl	equ	0xFF6
  2967                           tablat	equ	0xFF5
  2968                           prodl	equ	0xFF3
  2969                           intcon	equ	0xFF2
  2970                           intcon2	equ	0xFF1
  2971                           intcon3	equ	0xFF0
  2972                           indf0	equ	0xFEF
  2973                           postinc0	equ	0xFEE
  2974                           fsr0h	equ	0xFEA
  2975                           fsr0l	equ	0xFE9
  2976                           wreg	equ	0xFE8
  2977                           postdec1	equ	0xFE5
  2978                           fsr1l	equ	0xFE1
  2979                           postinc2	equ	0xFDE
  2980                           postdec2	equ	0xFDD
  2981                           fsr2h	equ	0xFDA
  2982                           fsr2l	equ	0xFD9
  2983                           status	equ	0xFD8
  2984                           
  2985 ;; *************** function _activateTarget *****************
  2986 ;; Defined at:
  2987 ;;		line 316 in file "main.c"
  2988 ;; Parameters:    Size  Location     Type
  2989 ;;  targetNbr       2   18[COMRAM] short 
  2990 ;; Auto vars:     Size  Location     Type
  2991 ;;		None
  2992 ;; Return value:  Size  Location     Type
  2993 ;;                  1    wreg      void 
  2994 ;; Registers used:
  2995 ;;		wreg, status,2, status,0
  2996 ;; Tracked objects:
  2997 ;;		On entry : 0/0
  2998 ;;		On exit  : 0/0
  2999 ;;		Unchanged: 0/0
  3000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3001 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3002 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3003 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3004 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3005 ;;Total ram usage:        2 bytes
  3006 ;; Hardware stack levels used:    1
  3007 ;; Hardware stack levels required when called:    1
  3008 ;; This function calls:
  3009 ;;		Nothing
  3010 ;; This function is called by:
  3011 ;;		_main
  3012 ;; This function uses a non-reentrant model
  3013 ;;
  3014                           
  3015                           	psect	text25
  3016  0014CE                     __ptext25:
  3017                           	opt stack 0
  3018  0014CE                     _activateTarget:
  3019                           	opt stack 29
  3020                           
  3021                           ;main.c: 318: LATA=targetNbr+2;
  3022                           
  3023                           ;incstack = 0
  3024  0014CE  5013               	movf	activateTarget@targetNbr,w,c
  3025  0014D0  0F02               	addlw	2
  3026  0014D2  6E89               	movwf	3977,c	;volatile
  3027  0014D4  0012               	return		;funcret
  3028  0014D6                     __end_of_activateTarget:
  3029                           	opt stack 0
  3030                           tblptru	equ	0xFF8
  3031                           tblptrh	equ	0xFF7
  3032                           tblptrl	equ	0xFF6
  3033                           tablat	equ	0xFF5
  3034                           prodl	equ	0xFF3
  3035                           intcon	equ	0xFF2
  3036                           intcon2	equ	0xFF1
  3037                           intcon3	equ	0xFF0
  3038                           indf0	equ	0xFEF
  3039                           postinc0	equ	0xFEE
  3040                           fsr0h	equ	0xFEA
  3041                           fsr0l	equ	0xFE9
  3042                           wreg	equ	0xFE8
  3043                           postdec1	equ	0xFE5
  3044                           fsr1l	equ	0xFE1
  3045                           postinc2	equ	0xFDE
  3046                           postdec2	equ	0xFDD
  3047                           fsr2h	equ	0xFDA
  3048                           fsr2l	equ	0xFD9
  3049                           status	equ	0xFD8
  3050                           
  3051 ;; *************** function _activateLEDTarget *****************
  3052 ;; Defined at:
  3053 ;;		line 321 in file "main.c"
  3054 ;; Parameters:    Size  Location     Type
  3055 ;;  targetLED       2   18[COMRAM] PTR short 
  3056 ;;		 -> nextTarget(4), 
  3057 ;; Auto vars:     Size  Location     Type
  3058 ;;  ledNBR          2   26[COMRAM] short 
  3059 ;; Return value:  Size  Location     Type
  3060 ;;                  1    wreg      void 
  3061 ;; Registers used:
  3062 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3063 ;; Tracked objects:
  3064 ;;		On entry : 0/0
  3065 ;;		On exit  : 0/0
  3066 ;;		Unchanged: 0/0
  3067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3068 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3069 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3070 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3071 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3072 ;;Total ram usage:       10 bytes
  3073 ;; Hardware stack levels used:    1
  3074 ;; Hardware stack levels required when called:    1
  3075 ;; This function calls:
  3076 ;;		Nothing
  3077 ;; This function is called by:
  3078 ;;		_main
  3079 ;; This function uses a non-reentrant model
  3080 ;;
  3081                           
  3082                           	psect	text26
  3083  000FE4                     __ptext26:
  3084                           	opt stack 0
  3085  000FE4                     _activateLEDTarget:
  3086                           	opt stack 29
  3087                           
  3088                           ;main.c: 322: short ledNBR = 0;
  3089                           
  3090                           ;incstack = 0
  3091  000FE4  0E00               	movlw	0
  3092  000FE6  6E1C               	movwf	activateLEDTarget@ledNBR+1,c
  3093  000FE8  0E00               	movlw	0
  3094  000FEA  6E1B               	movwf	activateLEDTarget@ledNBR,c
  3095                           
  3096                           ;main.c: 323: if (targetLED[0]<3){
  3097  000FEC  C013  FFD9         	movff	activateLEDTarget@targetLED,fsr2l
  3098  000FF0  C014  FFDA         	movff	activateLEDTarget@targetLED+1,fsr2h
  3099  000FF4  0E01               	movlw	1
  3100  000FF6  BEDB               	btfsc	plusw2,7,c
  3101  000FF8  D007               	goto	u480
  3102  000FFA  0E01               	movlw	1
  3103  000FFC  50DB               	movf	plusw2,w,c
  3104  000FFE  E128               	bnz	l1516
  3105  001000  0E03               	movlw	3
  3106  001002  5CDE               	subwf	postinc2,w,c
  3107  001004  B0D8               	btfsc	status,0,c
  3108  001006  D024               	goto	l196
  3109  001008                     u480:
  3110                           
  3111                           ;main.c: 324: ledNBR += (2*targetLED[0]+targetLED[1]);
  3112  001008  EE20 F002          	lfsr	2,2
  3113  00100C  5013               	movf	activateLEDTarget@targetLED,w,c
  3114  00100E  26D9               	addwf	fsr2l,f,c
  3115  001010  5014               	movf	activateLEDTarget@targetLED+1,w,c
  3116  001012  22DA               	addwfc	fsr2h,f,c
  3117  001014  CFDE F015          	movff	postinc2,??_activateLEDTarget
  3118  001018  CFDD F016          	movff	postdec2,??_activateLEDTarget+1
  3119  00101C  C013  FFD9         	movff	activateLEDTarget@targetLED,fsr2l
  3120  001020  C014  FFDA         	movff	activateLEDTarget@targetLED+1,fsr2h
  3121  001024  CFDE F017          	movff	postinc2,??_activateLEDTarget+2
  3122  001028  CFDD F018          	movff	postdec2,??_activateLEDTarget+3
  3123  00102C  90D8               	bcf	status,0,c
  3124  00102E  3617               	rlcf	??_activateLEDTarget+2,f,c
  3125  001030  3618               	rlcf	??_activateLEDTarget+3,f,c
  3126  001032  5015               	movf	??_activateLEDTarget,w,c
  3127  001034  2617               	addwf	??_activateLEDTarget+2,f,c
  3128  001036  5016               	movf	??_activateLEDTarget+1,w,c
  3129  001038  2218               	addwfc	??_activateLEDTarget+3,f,c
  3130  00103A  5017               	movf	??_activateLEDTarget+2,w,c
  3131  00103C  261B               	addwf	activateLEDTarget@ledNBR,f,c
  3132  00103E  5018               	movf	??_activateLEDTarget+3,w,c
  3133  001040  221C               	addwfc	activateLEDTarget@ledNBR+1,f,c
  3134                           
  3135                           ;main.c: 325: ledNBR += 240;
  3136  001042  0EF0               	movlw	240
  3137  001044  261B               	addwf	activateLEDTarget@ledNBR,f,c
  3138  001046  0E00               	movlw	0
  3139  001048  221C               	addwfc	activateLEDTarget@ledNBR+1,f,c
  3140                           
  3141                           ;main.c: 326: LATC = ledNBR;
  3142  00104A  C01B  FF8B         	movff	activateLEDTarget@ledNBR,3979	;volatile
  3143                           
  3144                           ;main.c: 327: }
  3145  00104E  0012               	return	
  3146  001050                     l196:
  3147  001050                     l1516:
  3148                           
  3149                           ;main.c: 328: else{
  3150                           ;main.c: 329: ledNBR += ((2*(targetLED[0]-3)+targetLED[1])<<4);
  3151  001050  0EA0               	movlw	160
  3152  001052  6E15               	movwf	??_activateLEDTarget& (0+255),c
  3153  001054  0EFF               	movlw	255
  3154  001056  6E16               	movwf	(??_activateLEDTarget+1)& (0+255),c
  3155  001058  EE20 F002          	lfsr	2,2
  3156  00105C  5013               	movf	activateLEDTarget@targetLED,w,c
  3157  00105E  26D9               	addwf	fsr2l,f,c
  3158  001060  5014               	movf	activateLEDTarget@targetLED+1,w,c
  3159  001062  22DA               	addwfc	fsr2h,f,c
  3160  001064  CFDE F017          	movff	postinc2,??_activateLEDTarget+2
  3161  001068  CFDD F018          	movff	postdec2,??_activateLEDTarget+3
  3162  00106C  C013  FFD9         	movff	activateLEDTarget@targetLED,fsr2l
  3163  001070  C014  FFDA         	movff	activateLEDTarget@targetLED+1,fsr2h
  3164  001074  CFDE F019          	movff	postinc2,??_activateLEDTarget+4
  3165  001078  CFDD F01A          	movff	postdec2,??_activateLEDTarget+5
  3166  00107C  90D8               	bcf	status,0,c
  3167  00107E  3619               	rlcf	??_activateLEDTarget+4,f,c
  3168  001080  361A               	rlcf	??_activateLEDTarget+5,f,c
  3169  001082  5017               	movf	??_activateLEDTarget+2,w,c
  3170  001084  2619               	addwf	??_activateLEDTarget+4,f,c
  3171  001086  5018               	movf	??_activateLEDTarget+3,w,c
  3172  001088  221A               	addwfc	??_activateLEDTarget+5,f,c
  3173  00108A  3A19               	swapf	??_activateLEDTarget+4,f,c
  3174  00108C  3A1A               	swapf	??_activateLEDTarget+5,f,c
  3175  00108E  0EF0               	movlw	240
  3176  001090  161A               	andwf	??_activateLEDTarget+5,f,c
  3177  001092  5019               	movf	??_activateLEDTarget+4,w,c
  3178  001094  0B0F               	andlw	15
  3179  001096  121A               	iorwf	??_activateLEDTarget+5,f,c
  3180  001098  0EF0               	movlw	240
  3181  00109A  1619               	andwf	??_activateLEDTarget+4,f,c
  3182  00109C  5015               	movf	??_activateLEDTarget,w,c
  3183  00109E  2619               	addwf	??_activateLEDTarget+4,f,c
  3184  0010A0  5016               	movf	??_activateLEDTarget+1,w,c
  3185  0010A2  221A               	addwfc	??_activateLEDTarget+5,f,c
  3186  0010A4  5019               	movf	??_activateLEDTarget+4,w,c
  3187  0010A6  261B               	addwf	activateLEDTarget@ledNBR,f,c
  3188  0010A8  501A               	movf	??_activateLEDTarget+5,w,c
  3189  0010AA  221C               	addwfc	activateLEDTarget@ledNBR+1,f,c
  3190                           
  3191                           ;main.c: 330: ledNBR += 15;
  3192  0010AC  0E0F               	movlw	15
  3193  0010AE  261B               	addwf	activateLEDTarget@ledNBR,f,c
  3194  0010B0  0E00               	movlw	0
  3195  0010B2  221C               	addwfc	activateLEDTarget@ledNBR+1,f,c
  3196                           
  3197                           ;main.c: 331: LATC = ledNBR;
  3198  0010B4  C01B  FF8B         	movff	activateLEDTarget@ledNBR,3979	;volatile
  3199  0010B8  0012               	return	
  3200  0010BA                     __end_of_activateLEDTarget:
  3201                           	opt stack 0
  3202                           tblptru	equ	0xFF8
  3203                           tblptrh	equ	0xFF7
  3204                           tblptrl	equ	0xFF6
  3205                           tablat	equ	0xFF5
  3206                           prodl	equ	0xFF3
  3207                           intcon	equ	0xFF2
  3208                           intcon2	equ	0xFF1
  3209                           intcon3	equ	0xFF0
  3210                           indf0	equ	0xFEF
  3211                           postinc0	equ	0xFEE
  3212                           fsr0h	equ	0xFEA
  3213                           fsr0l	equ	0xFE9
  3214                           wreg	equ	0xFE8
  3215                           postdec1	equ	0xFE5
  3216                           fsr1l	equ	0xFE1
  3217                           postinc2	equ	0xFDE
  3218                           postdec2	equ	0xFDD
  3219                           plusw2	equ	0xFDB
  3220                           fsr2h	equ	0xFDA
  3221                           fsr2l	equ	0xFD9
  3222                           status	equ	0xFD8
  3223                           
  3224 ;; *************** function _rxIsr *****************
  3225 ;; Defined at:
  3226 ;;		line 208 in file "main.c"
  3227 ;; Parameters:    Size  Location     Type
  3228 ;;		None
  3229 ;; Auto vars:     Size  Location     Type
  3230 ;;		None
  3231 ;; Return value:  Size  Location     Type
  3232 ;;                  1    wreg      void 
  3233 ;; Registers used:
  3234 ;;		wreg, status,2, status,0
  3235 ;; Tracked objects:
  3236 ;;		On entry : 0/0
  3237 ;;		On exit  : 0/0
  3238 ;;		Unchanged: 0/0
  3239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3240 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3241 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3242 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3243 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3244 ;;Total ram usage:       18 bytes
  3245 ;; Hardware stack levels used:    1
  3246 ;; This function calls:
  3247 ;;		Nothing
  3248 ;; This function is called by:
  3249 ;;		Interrupt level 2
  3250 ;; This function uses a non-reentrant model
  3251 ;;
  3252                           
  3253                           	psect	intcode
  3254  000008                     __pintcode:
  3255                           	opt stack 0
  3256  000008                     _rxIsr:
  3257                           	opt stack 25
  3258                           
  3259                           ;incstack = 0
  3260  000008  823B               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3261  00000A  CFFA F001          	movff	pclath,??_rxIsr
  3262  00000E  CFFB F002          	movff	pclatu,??_rxIsr+1
  3263  000012  CFE9 F003          	movff	fsr0l,??_rxIsr+2
  3264  000016  CFEA F004          	movff	fsr0h,??_rxIsr+3
  3265  00001A  CFE1 F005          	movff	fsr1l,??_rxIsr+4
  3266  00001E  CFE2 F006          	movff	fsr1h,??_rxIsr+5
  3267  000022  CFD9 F007          	movff	fsr2l,??_rxIsr+6
  3268  000026  CFDA F008          	movff	fsr2h,??_rxIsr+7
  3269  00002A  CFF3 F009          	movff	prodl,??_rxIsr+8
  3270  00002E  CFF4 F00A          	movff	prodh,??_rxIsr+9
  3271  000032  CFF6 F00B          	movff	tblptrl,??_rxIsr+10
  3272  000036  CFF7 F00C          	movff	tblptrh,??_rxIsr+11
  3273  00003A  CFF8 F00D          	movff	tblptru,??_rxIsr+12
  3274  00003E  CFF5 F00E          	movff	tablat,??_rxIsr+13
  3275  000042  C03B  F00F         	movff	btemp,??_rxIsr+14
  3276  000046  C03C  F010         	movff	btemp+1,??_rxIsr+15
  3277  00004A  C03D  F011         	movff	btemp+2,??_rxIsr+16
  3278  00004E  C03E  F012         	movff	btemp+3,??_rxIsr+17
  3279                           
  3280                           ;main.c: 211: if(PIR1bits.RC1IF && PIE1bits.RC1IE) {
  3281  000052  BA9E               	btfsc	3998,5,c	;volatile
  3282  000054  AA9D               	btfss	3997,5,c	;volatile
  3283  000056  D020               	goto	i2l162
  3284                           
  3285                           ;main.c: 212: if(RCSTAbits.FERR || RCSTAbits.OERR) {
  3286  000058  B4AB               	btfsc	4011,2,c	;volatile
  3287  00005A  D002               	goto	i2u32_40
  3288  00005C  A2AB               	btfss	4011,1,c	;volatile
  3289  00005E  D003               	goto	i2l159
  3290  000060                     i2u32_40:
  3291                           
  3292                           ;main.c: 213: ErrorUART= 1;
  3293  000060  0E01               	movlw	1
  3294  000062  6E2E               	movwf	_ErrorUART,c
  3295                           
  3296                           ;main.c: 214: }
  3297  000064  D019               	goto	i2l162
  3298  000066                     i2l159:
  3299                           
  3300                           ;main.c: 215: else {
  3301                           ;main.c: 216: rxChar = RCREG1;
  3302  000066  CFAE F030          	movff	4014,_rxChar	;volatile
  3303                           
  3304                           ;main.c: 217: rxFlag=1;
  3305  00006A  0E01               	movlw	1
  3306  00006C  6E2D               	movwf	_rxFlag,c
  3307                           
  3308                           ;main.c: 218: switch(rxChar){
  3309  00006E  D009               	goto	i2l163
  3310  000070                     
  3311                           ;main.c: 220: reloadFlag=1;
  3312  000070  0E01               	movlw	1
  3313  000072  6E2C               	movwf	_reloadFlag,c
  3314                           
  3315                           ;main.c: 221: break;
  3316  000074  D010               	goto	i2l165
  3317  000076                     
  3318                           ;main.c: 223: modeFlag=1;
  3319  000076  0E01               	movlw	1
  3320  000078  6E2B               	movwf	_modeFlag,c
  3321                           
  3322                           ;main.c: 224: break;
  3323  00007A  D00D               	goto	i2l165
  3324  00007C                     
  3325                           ;main.c: 226: pewFlag=1;
  3326  00007C  0E01               	movlw	1
  3327  00007E  6E2A               	movwf	_pewFlag,c
  3328                           
  3329                           ;main.c: 228: }
  3330                           
  3331                           ;main.c: 227: break;
  3332  000080  D00A               	goto	i2l165
  3333  000082                     i2l163:
  3334  000082  5030               	movf	_rxChar,w,c
  3335                           
  3336                           ; Switch size 1, requested type "space"
  3337                           ; Number of cases is 3, Range of values is 170 to 204
  3338                           ; switch strategies available:
  3339                           ; Name         Instructions Cycles
  3340                           ; simple_byte           10     6 (average)
  3341                           ;	Chosen strategy is simple_byte
  3342  000084  0AAA               	xorlw	170	; case 170
  3343  000086  B4D8               	btfsc	status,2,c
  3344  000088  D7F3               	goto	i2l164
  3345  00008A  0A11               	xorlw	17	; case 187
  3346  00008C  B4D8               	btfsc	status,2,c
  3347  00008E  D7F3               	goto	i2l166
  3348  000090  0A77               	xorlw	119	; case 204
  3349  000092  B4D8               	btfsc	status,2,c
  3350  000094  D7F3               	goto	i2l167
  3351  000096                     i2l165:
  3352                           
  3353                           ;main.c: 229: PIE1bits.RC1IE = 0;
  3354  000096  9A9D               	bcf	3997,5,c	;volatile
  3355  000098                     i2l162:
  3356                           
  3357                           ;main.c: 230: }
  3358                           ;main.c: 231: }
  3359                           ;main.c: 234: if(INTCON3bits.INT1IF && INTCON3bits.INT1E){
  3360  000098  B0F0               	btfsc	intcon3,0,c	;volatile
  3361  00009A  A6F0               	btfss	intcon3,3,c	;volatile
  3362  00009C  D004               	goto	i2l168
  3363                           
  3364                           ;main.c: 235: capteurFlag= 1;
  3365  00009E  0E01               	movlw	1
  3366  0000A0  6E29               	movwf	_capteurFlag,c
  3367                           
  3368                           ;main.c: 236: INTCON3bits.INT1E = 0;
  3369  0000A2  96F0               	bcf	intcon3,3,c	;volatile
  3370                           
  3371                           ;main.c: 237: INTCON3bits.INT1F = 0;
  3372  0000A4  90F0               	bcf	intcon3,0,c	;volatile
  3373  0000A6                     i2l168:
  3374                           
  3375                           ;main.c: 238: }
  3376                           ;main.c: 241: if (INTCONbits.TMR0IF && INTCONbits.TMR0IE ){
  3377  0000A6  B4F2               	btfsc	intcon,2,c	;volatile
  3378  0000A8  AAF2               	btfss	intcon,5,c	;volatile
  3379  0000AA  D004               	goto	i2l169
  3380                           
  3381                           ;main.c: 242: timerFlag = 1;
  3382  0000AC  0E01               	movlw	1
  3383  0000AE  6E28               	movwf	_timerFlag,c
  3384                           
  3385                           ;main.c: 243: INTCONbits.TMR0IF = 0;
  3386  0000B0  94F2               	bcf	intcon,2,c	;volatile
  3387                           
  3388                           ;main.c: 244: INTCONbits.TMR0IE = 0;
  3389  0000B2  9AF2               	bcf	intcon,5,c	;volatile
  3390  0000B4                     i2l169:
  3391  0000B4  C012  F03E         	movff	??_rxIsr+17,btemp+3
  3392  0000B8  C011  F03D         	movff	??_rxIsr+16,btemp+2
  3393  0000BC  C010  F03C         	movff	??_rxIsr+15,btemp+1
  3394  0000C0  C00F  F03B         	movff	??_rxIsr+14,btemp
  3395  0000C4  C00E  FFF5         	movff	??_rxIsr+13,tablat
  3396  0000C8  C00D  FFF8         	movff	??_rxIsr+12,tblptru
  3397  0000CC  C00C  FFF7         	movff	??_rxIsr+11,tblptrh
  3398  0000D0  C00B  FFF6         	movff	??_rxIsr+10,tblptrl
  3399  0000D4  C00A  FFF4         	movff	??_rxIsr+9,prodh
  3400  0000D8  C009  FFF3         	movff	??_rxIsr+8,prodl
  3401  0000DC  C008  FFDA         	movff	??_rxIsr+7,fsr2h
  3402  0000E0  C007  FFD9         	movff	??_rxIsr+6,fsr2l
  3403  0000E4  C006  FFE2         	movff	??_rxIsr+5,fsr1h
  3404  0000E8  C005  FFE1         	movff	??_rxIsr+4,fsr1l
  3405  0000EC  C004  FFEA         	movff	??_rxIsr+3,fsr0h
  3406  0000F0  C003  FFE9         	movff	??_rxIsr+2,fsr0l
  3407  0000F4  C002  FFFB         	movff	??_rxIsr+1,pclatu
  3408  0000F8  C001  FFFA         	movff	??_rxIsr,pclath
  3409  0000FC  923B               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3410  0000FE  0011               	retfie		f
  3411  000100                     __end_of_rxIsr:
  3412                           	opt stack 0
  3413                           pclatu	equ	0xFFB
  3414                           pclath	equ	0xFFA
  3415                           tblptru	equ	0xFF8
  3416                           tblptrh	equ	0xFF7
  3417                           tblptrl	equ	0xFF6
  3418                           tablat	equ	0xFF5
  3419                           prodh	equ	0xFF4
  3420                           prodl	equ	0xFF3
  3421                           intcon	equ	0xFF2
  3422                           intcon2	equ	0xFF1
  3423                           intcon3	equ	0xFF0
  3424                           indf0	equ	0xFEF
  3425                           postinc0	equ	0xFEE
  3426                           fsr0h	equ	0xFEA
  3427                           fsr0l	equ	0xFE9
  3428                           wreg	equ	0xFE8
  3429                           postdec1	equ	0xFE5
  3430                           fsr1h	equ	0xFE2
  3431                           fsr1l	equ	0xFE1
  3432                           postinc2	equ	0xFDE
  3433                           postdec2	equ	0xFDD
  3434                           plusw2	equ	0xFDB
  3435                           fsr2h	equ	0xFDA
  3436                           fsr2l	equ	0xFD9
  3437                           status	equ	0xFD8
  3438                           pclatu	equ	0xFFB
  3439                           pclath	equ	0xFFA
  3440                           tblptru	equ	0xFF8
  3441                           tblptrh	equ	0xFF7
  3442                           tblptrl	equ	0xFF6
  3443                           tablat	equ	0xFF5
  3444                           prodh	equ	0xFF4
  3445                           prodl	equ	0xFF3
  3446                           intcon	equ	0xFF2
  3447                           intcon2	equ	0xFF1
  3448                           intcon3	equ	0xFF0
  3449                           indf0	equ	0xFEF
  3450                           postinc0	equ	0xFEE
  3451                           fsr0h	equ	0xFEA
  3452                           fsr0l	equ	0xFE9
  3453                           wreg	equ	0xFE8
  3454                           postdec1	equ	0xFE5
  3455                           fsr1h	equ	0xFE2
  3456                           fsr1l	equ	0xFE1
  3457                           postinc2	equ	0xFDE
  3458                           postdec2	equ	0xFDD
  3459                           plusw2	equ	0xFDB
  3460                           fsr2h	equ	0xFDA
  3461                           fsr2l	equ	0xFD9
  3462                           status	equ	0xFD8
  3463                           
  3464                           	psect	rparam
  3465  0000                     pclatu	equ	0xFFB
  3466                           pclath	equ	0xFFA
  3467                           tblptru	equ	0xFF8
  3468                           tblptrh	equ	0xFF7
  3469                           tblptrl	equ	0xFF6
  3470                           tablat	equ	0xFF5
  3471                           prodh	equ	0xFF4
  3472                           prodl	equ	0xFF3
  3473                           intcon	equ	0xFF2
  3474                           intcon2	equ	0xFF1
  3475                           intcon3	equ	0xFF0
  3476                           indf0	equ	0xFEF
  3477                           postinc0	equ	0xFEE
  3478                           fsr0h	equ	0xFEA
  3479                           fsr0l	equ	0xFE9
  3480                           wreg	equ	0xFE8
  3481                           postdec1	equ	0xFE5
  3482                           fsr1h	equ	0xFE2
  3483                           fsr1l	equ	0xFE1
  3484                           postinc2	equ	0xFDE
  3485                           postdec2	equ	0xFDD
  3486                           plusw2	equ	0xFDB
  3487                           fsr2h	equ	0xFDA
  3488                           fsr2l	equ	0xFD9
  3489                           status	equ	0xFD8
  3490                           
  3491                           	psect	temp
  3492  00003B                     btemp:
  3493                           	opt stack 0
  3494  00003B                     	ds	1
  3495  0000                     int$flags	set	btemp
  3496  0000                     wtemp6	set	btemp+1
  3497                           pclatu	equ	0xFFB
  3498                           pclath	equ	0xFFA
  3499                           tblptru	equ	0xFF8
  3500                           tblptrh	equ	0xFF7
  3501                           tblptrl	equ	0xFF6
  3502                           tablat	equ	0xFF5
  3503                           prodh	equ	0xFF4
  3504                           prodl	equ	0xFF3
  3505                           intcon	equ	0xFF2
  3506                           intcon2	equ	0xFF1
  3507                           intcon3	equ	0xFF0
  3508                           indf0	equ	0xFEF
  3509                           postinc0	equ	0xFEE
  3510                           fsr0h	equ	0xFEA
  3511                           fsr0l	equ	0xFE9
  3512                           wreg	equ	0xFE8
  3513                           postdec1	equ	0xFE5
  3514                           fsr1h	equ	0xFE2
  3515                           fsr1l	equ	0xFE1
  3516                           postinc2	equ	0xFDE
  3517                           postdec2	equ	0xFDD
  3518                           plusw2	equ	0xFDB
  3519                           fsr2h	equ	0xFDA
  3520                           fsr2l	equ	0xFD9
  3521                           status	equ	0xFD8


Data Sizes:
    Strings     84
    Constant    10
    Data        4
    BSS         22
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     32      58
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          250      0       0

Pointer List with Targets:

    putStringLCD@input	PTR const unsigned char  size(2) Largest target is 22
		 -> STR_7(CODE[22]), STR_6(CODE[3]), STR_5(CODE[2]), printStat@statArray(COMRAM[3]), 
		 -> STR_3(CODE[20]), STR_2(CODE[16]), STR_1(CODE[20]), 

    activateLEDTarget@targetLED	PTR short  size(2) Largest target is 4
		 -> nextTarget(COMRAM[4]), 

    getRandomTarget@Target	PTR short  size(2) Largest target is 4
		 -> nextTarget(COMRAM[4]), 


Critical Paths under _main in COMRAM

    _main->_activateLEDTarget
    _printStartGame->_putStringLCD
    _printMBED->_putStringLCD
    _putStringLCD->_putchLCD
    _putchLCD->_fliplr
    _moveCursor->_fliplr
    _initialisation_LCD->_displayCtrl
    _displayCtrl->_readBusyFlag
    _clearDisplay->_readBusyFlag
    _readBusyFlag->_spi_Send_Read

Critical Paths under _rxIsr in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _rxIsr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _rxIsr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _rxIsr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _rxIsr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _rxIsr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _rxIsr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _rxIsr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _rxIsr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _rxIsr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _rxIsr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _rxIsr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _rxIsr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _rxIsr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _rxIsr in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0    5030
                                             28 COMRAM     4     4      0
                  _activateLEDTarget
                     _activateTarget
                         _changeMode
                           _fireShot
                    _getRandomTarget
                 _initialisation_LCD
                          _printMBED
                     _printStartGame
                 _setInterruptConfig
                         _setModeLED
                       _setPinConfig
                     _setTimerConfig
                      _setUARTconfig
                           _stopShot
                       _toggleGunLED
 ---------------------------------------------------------------------------------
 (1) _toggleGunLED                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _stopShot                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setUARTconfig                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setTimerConfig                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setPinConfig                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setModeLED                                           1     1      0      15
                                             18 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _setInterruptConfig                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _printStartGame                                       0     0      0    2089
                       _clearDisplay
                         _moveCursor
                       _putStringLCD
                           _waitASec
 ---------------------------------------------------------------------------------
 (1) _printMBED                                            0     0      0    2089
                       _clearDisplay
                         _moveCursor
                       _putStringLCD
                           _waitASec
 ---------------------------------------------------------------------------------
 (2) _waitASec                                             3     3      0      30
                                             18 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _putStringLCD                                         6     4      2     817
                                             22 COMRAM     6     4      2
                           _putchLCD
 ---------------------------------------------------------------------------------
 (3) _putchLCD                                             1     1      0     195
                                             21 COMRAM     1     1      0
                             _fliplr
                       _readBusyFlag
                      _spi_Send_Read
 ---------------------------------------------------------------------------------
 (2) _moveCursor                                           5     1      4    1197
                                             21 COMRAM     5     1      4
                             _fliplr
                       _readBusyFlag
                      _spi_Send_Read
 ---------------------------------------------------------------------------------
 (4) _fliplr                                               3     3      0     105
                                             18 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _initialisation_LCD                                   0     0      0     338
                       _clearDisplay
                        _displayCtrl
                _initialisation_PORT
                 _initialisation_SPI
 ---------------------------------------------------------------------------------
 (2) _initialisation_SPI                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _initialisation_PORT                                  1     1      0       0
                                             18 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _displayCtrl                                          4     2      2     293
                                             20 COMRAM     4     2      2
                       _readBusyFlag
                      _spi_Send_Read
 ---------------------------------------------------------------------------------
 (2) _clearDisplay                                         0     0      0      45
                       _readBusyFlag
                      _spi_Send_Read
 ---------------------------------------------------------------------------------
 (4) _readBusyFlag                                         1     1      0      30
                                             19 COMRAM     1     1      0
                      _spi_Send_Read
 ---------------------------------------------------------------------------------
 (4) _spi_Send_Read                                        1     1      0      15
                                             18 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _getRandomTarget                                      2     0      2     120
                                             18 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _fireShot                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _changeMode                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _activateTarget                                       2     0      2      98
                                             18 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _activateLEDTarget                                   10     8      2     235
                                             18 COMRAM    10     8      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _rxIsr                                               18    18      0       0
                                              0 COMRAM    18    18      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _activateLEDTarget
   _activateTarget
   _changeMode
   _fireShot
   _getRandomTarget
   _initialisation_LCD
     _clearDisplay
       _readBusyFlag
         _spi_Send_Read
       _spi_Send_Read
     _displayCtrl
       _readBusyFlag
         _spi_Send_Read
       _spi_Send_Read
     _initialisation_PORT
     _initialisation_SPI
   _printMBED
     _clearDisplay
       _readBusyFlag
         _spi_Send_Read
       _spi_Send_Read
     _moveCursor
       _fliplr
       _readBusyFlag
         _spi_Send_Read
       _spi_Send_Read
     _putStringLCD
       _putchLCD
         _fliplr
         _readBusyFlag
           _spi_Send_Read
         _spi_Send_Read
     _waitASec
   _printStartGame
     _clearDisplay
       _readBusyFlag
         _spi_Send_Read
       _spi_Send_Read
     _moveCursor
       _fliplr
       _readBusyFlag
         _spi_Send_Read
       _spi_Send_Read
     _putStringLCD
       _putchLCD
         _fliplr
         _readBusyFlag
           _spi_Send_Read
         _spi_Send_Read
     _waitASec
   _setInterruptConfig
   _setModeLED
   _setPinConfig
   _setTimerConfig
   _setUARTconfig
   _stopShot
   _toggleGunLED

 _rxIsr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DF9      0       0      33        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK13           FA      0       0      31        0.0%
BANK13              FA      0       0      32        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     20      3A       1       61.7%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      3A       8        0.0%
DATA                 0      0      3A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.43 build -156212558 
Symbol Table                                                                                   Sun Dec 03 13:10:06 2017

                ?_displayCtrl 0015                  _putStringLCD 10BA                           l210 1400  
                         l131 0FB4                           l133 0FDA                           l141 0F3A  
                         l214 14C8                           l142 0F24                           l134 0EA4  
                         l207 1406                           l151 0FAE                           l135 0ECC  
                         l208 13FA                           l136 0ED4                           l128 0E80  
                         l321 130A                           l145 0F46                           l137 0EE4  
                         l129 0E90                           l314 10FA                           l331 11A8  
                         l315 10C4                           l139 0EFA                           l148 0F6C  
                         l309 11F0                           l149 0F8A                           l329 11A0  
                         l257 1376                           l259 138A                           l196 1050  
                         l188 14B8                           l297 14A0                           u420 119C  
                         u501 0E9C                           u440 10F2                           u450 1128  
                         u447 10E8                           u480 1008                           u560 0F2A  
                         u457 111E                           u667 137C                           u677 122C  
                         u687 123A                           u697 1248                   _totalPoints 0021  
                         wreg 000FE8                          l1058 1366                          l1516 1050  
                        l1622 0F8A                          l1632 0FAA                          l1640 0FDA  
                        l1586 0F14                          STR_1 0E35                          STR_2 0E49  
                        STR_3 0E21                          STR_4 0E5C                          STR_6 0E59  
                        STR_7 0E0B                          _LATA 000F89                          _LATC 000F8B  
                        _main 0E60                          fsr0h 000FEA                          fsr1h 000FE2  
                        indf0 000FEF                          fsr2h 000FDA                          fsr0l 000FE9  
                        fsr1l 000FE1                          fsr2l 000FD9                          btemp 003B  
                        prodh 000FF4                          prodl 000FF3                          start 0100  
                ___param_bank 000000          __end_of_clearDisplay 13F6       __size_of_setTimerConfig 0014  
                 fliplr@input 0015             putStringLCD@input 0017                         ?_main 0001  
                       i2l162 0098                         i2l163 0082                         i2l164 0070  
                       i2l165 0096                         i2l166 0076                         i2l167 007C  
                       i2l159 0066                         i2l168 00A6                         i2l169 00B4  
                       _TRISA 000F92                         _TRISC 000F94                         _TRISD 000F95  
 __size_of_initialisation_LCD 001C               __end_of_dpowers 0E0B   __size_of_initialisation_SPI 003E  
                       _rxIsr 0008               _getRandomTarget 138C                         main@i 001F  
  __size_of_activateLEDTarget 00D6                         pclath 000FFA                         tablat 000FF5  
                       plusw2 000FDB                         status 000FD8                         wtemp6 003C  
             __initialization 12CA                _activateTarget 14CE                  __end_of_main 0FE4  
       getRandomTarget@Target 0013                _transferedData 002F                        ??_main 001D  
               __activetblptr 000003                 ?_readBusyFlag 0001                        _ANCON1 000E47  
                      ?_rxIsr 0001             spi_Send_Read@byte 0013                        _RCREG1 000FAE  
                      _RCSTA1 000FAB                        _OSCCON 000FD3                        _SPBRG1 000FAF  
                      _TXREG1 000FAD                        _TXSTA1 000FAC        __end_of_activateTarget 14D6  
              __CFG_XINST$OFF 000000                 putchLCD@input 0016              __end_of_fireShot 14E2  
            ??_printStartGame 001D  __size_of_initialisation_PORT 0040                        _fliplr 1130  
                      clear_0 12F0                        _rxChar 0030                        _rxFlag 002D  
        __size_of_displayCtrl 0044                ??_readBusyFlag 0014              __end_of_waitASec 138C  
                __pdataCOMRAM 0037       __end_of_getRandomTarget 13B2                  __mediumconst 0000  
                      tblptrh 000FF7                        tblptrl 000FF6                        tblptru 000FF8  
            __end_of_putchLCD 1330              __end_of_stopShot 14DE                    __accesstop 0060  
     __end_of__initialization 12F6       activateLEDTarget@ledNBR 001B         __size_of_clearDisplay 0022  
               ___rparam_used 000001               ?_activateTarget 0013                _setTimerConfig 1486  
              __pcstackCOMRAM 0001             moveCursor@address 001A   __size_of_setInterruptConfig 0020  
               __end_of_rxIsr 0100        __size_of_setUARTconfig 0022                  _clearDisplay 13D4  
                     ??_rxIsr 0001                    _changeMode 14AC                 putStringLCD@i 001B  
               ?_setPinConfig 0001        __end_of_setTimerConfig 149A         __end_of_spi_Send_Read 14AC  
                     ?_fliplr 0001             displayCtrl@cursor 0015            __size_of_printMBED 002E  
            ?_getRandomTarget 0013                       i2u32_40 0060                       _SSP2BUF 000F03  
                   ?_fireShot 0001                ??_setPinConfig 0013          __end_of_readBusyFlag 1486  
             ?_setTimerConfig 0001                       __Hparam 0000                     ?_waitASec 0001  
                     __Lparam 0000                 _setUARTconfig 13B2                     ?_putchLCD 0001  
                __psmallconst 0E00               __size_of_fliplr 0052                displayCtrl@BCD 0018  
                   ?_stopShot 0001                       __pcinit 12CA                       _endFlag 0027  
                     __ramtop 0E00                       __ptext0 0E60                       __ptext1 14BE  
                     __ptext2 14DA                       __ptext3 13B2                       __ptext4 1486  
                     __ptext5 1452                       __ptext6 13F6                       __ptext7 1416  
                     __ptext8 1290                       __ptext9 1330                     _T0CONbits 000FD5  
                     _dpowers 0E01                       _pewFlag 002A    __end_of_initialisation_LCD 1452  
  __end_of_initialisation_SPI 1290                       _myState 0032                    ??_fireShot 0013  
                  _nextTarget 0033          end_of_initialization 12F6           _initialisation_PORT 1212  
                  _setModeLED 13F6                   ?_changeMode 0001                    _reloadFlag 002C  
                  _moveCursor 1182             __end_of_printMBED 135E                    ??_waitASec 0013  
              ?_setUARTconfig 0001                     _RCSTAbits 000FAB                       postdec1 000FE5  
                     postdec2 000FDD                       postinc0 000FEE                       postinc2 000FDE  
                  ??_putchLCD 0016          ?_initialisation_PORT 0001                     _RPOR22_23 000E1D  
                   _RPOR24_25 000E1E                     _RPOR26_27 000E1F                    ??_stopShot 0013  
        readBusyFlag@retValue 0014                     _TRISAbits 000F92                     _TRISBbits 000F93  
                   _TRISCbits 000F94                     _TRISDbits 000F95                 ?_toggleGunLED 0001  
            ??_activateTarget 0015                 moveCursor@col 0018                 moveCursor@row 0016  
               ??_displayCtrl 0017         ??_initialisation_PORT 0013                 ?_putStringLCD 0017  
               __pidataCOMRAM 14D6           __size_of_changeMode 0012                __end_of_fliplr 1182  
        __end_of_setPinConfig 146C           start_initialization 12CA                     _ErrorUART 002E  
              ??_toggleGunLED 0013         __size_of_readBusyFlag 001A                   ?_setModeLED 0001  
              _singleGameTime 0037                   ?_moveCursor 0016               ??_setUARTconfig 0013  
  __end_of_setInterruptConfig 1436       activateTarget@targetNbr 0013                ??_putStringLCD 0019  
                    ??_fliplr 0013           __end_of_displayCtrl 1212                  _readBusyFlag 146C  
                 __pbssCOMRAM 0021       __size_of_printStartGame 003A              ??_setTimerConfig 0013  
           __size_of_fireShot 0004                   _capteurFlag 0029                     __pintcode 0008  
           __size_of_waitASec 002E              displayCtrl@blink 0016           __size_of_setModeLED 0020  
           __size_of_putchLCD 0030           __size_of_moveCursor 004C             __size_of_stopShot 0004  
                 __smallconst 0E00                      _BAUDCON1 000F67            displayCtrl@display 0017  
      __size_of_spi_Send_Read 0012                __size_of_rxIsr 00F8                  ??_changeMode 0013  
    __size_of_getRandomTarget 0026                      _LATBbits 000F8A                      _LATDbits 000F8C  
          _initialisation_LCD 1436            _initialisation_SPI 1252                      _IPR1bits 000F9F  
                    _PIE1bits 000F9D                      _PIR1bits 000F9E                      _RCONbits 000FD0  
         ?_initialisation_LCD 0001         __size_of_setPinConfig 001A           ?_initialisation_SPI 0001  
                   _printMBED 1330                     _timerFlag 0028                      _RPINR0_1 000E2A  
        __end_of_toggleGunLED 14CE                      _SSP2CON1 000F19                      _SSP2CON3 000F39  
                 _displayCtrl 11CE                      _SSP2STAT 000F1A                setModeLED@Mode 0013  
          __end_of_changeMode 14BE                   _globalTimer 0023          ??_initialisation_LCD 0019  
        ??_initialisation_SPI 0013                   _INTCON2bits 000FF1                   _INTCON3bits 000FF0  
                   copy_data0 12DE          __end_of_putStringLCD 1130                  _setPinConfig 1452  
                    __Hrparam 0000                      __Lrparam 0000                    ?_printMBED 0001  
               _spi_Send_Read 149A                _printStartGame 1290                      _ammoLeft 0039  
               ?_clearDisplay 0001                      __ptext10 135E                      __ptext11 10BA  
                    __ptext20 146C                      __ptext12 1300                      __ptext21 149A  
                    __ptext13 1182                      __ptext22 138C                      __ptext14 1130  
                    __ptext23 14DE                      __ptext15 1436                      __ptext24 14AC  
                    __ptext16 1252                      __ptext25 14CE                      __ptext17 1212  
                    __ptext26 0FE4                      __ptext18 11CE                      __ptext19 13D4  
                    _fireShot 14DE                  ??_setModeLED 0013                     waitASec@i 0014  
                ??_moveCursor 001A                      _modeFlag 002B                 __size_of_main 0184  
                 _myModeState 0031   __end_of_initialisation_PORT 1252    activateLEDTarget@targetLED 0013  
                    _waitASec 135E             ??_getRandomTarget 0015                ?_spi_Send_Read 0001  
                    int$flags 003B                      _putchLCD 1300                      _stopShot 14DA  
                _SSP2STATbits 000F1A            __end_of_setModeLED 1416        __end_of_printStartGame 12CA  
          _setInterruptConfig 1416            __end_of_moveCursor 11CE                    _INTCONbits 000FF2  
              ??_clearDisplay 0015           ?_setInterruptConfig 0001                      intlevel2 0000  
           _activateLEDTarget 0FE4         __size_of_toggleGunLED 0010            ?_activateLEDTarget 0013  
       __end_of_setUARTconfig 13D4       __size_of_activateTarget 0008                   ??_printMBED 001D  
        ??_setInterruptConfig 0013           ??_activateLEDTarget 0015                    _RPINR12_13 000E30  
                  _RPINR26_27 000E37                 _toggleCounter 0025               ?_printStartGame 0001  
       __size_of_putStringLCD 0076                  _toggleGunLED 14BE     __end_of_activateLEDTarget 10BA  
             ??_spi_Send_Read 0013  
