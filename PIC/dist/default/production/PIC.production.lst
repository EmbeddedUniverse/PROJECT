

Microchip Technology PIC18 LITE Macro Assembler V1.43 build -156212558 
                                                                                               Tue Dec 05 01:07:47 2017

Microchip Technology Omniscient Code Generator v1.43 (Free mode) build 201707250354
     1                           	processor	18F67J94
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1
    40                           	psect	text28,global,reloc=2,class=CODE,delta=1
    41                           	psect	text29,global,reloc=2,class=CODE,delta=1
    42                           	psect	text30,global,reloc=2,class=CODE,delta=1
    43                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=1
    44                           	psect	text32,global,reloc=2,class=CODE,delta=1,group=1
    45                           	psect	text33,global,reloc=2,class=CODE,delta=1,group=1
    46                           	psect	text34,global,reloc=2,class=CODE,delta=1
    47                           	psect	text35,global,reloc=2,class=CODE,delta=1
    48                           	psect	text36,global,reloc=2,class=CODE,delta=1
    49                           	psect	text37,global,reloc=2,class=CODE,delta=1
    50                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    51                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    52                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    53                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    54  0000                     
    55                           ; Version 1.43
    56                           ; Generated 25/07/2017 GMT
    57                           ; 
    58                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    59                           ; All rights reserved.
    60                           ; 
    61                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    62                           ; 
    63                           ; Redistribution and use in source and binary forms, with or without modification, are
    64                           ; permitted provided that the following conditions are met:
    65                           ; 
    66                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    67                           ;        conditions and the following disclaimer.
    68                           ; 
    69                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    70                           ;        of conditions and the following disclaimer in the documentation and/or other
    71                           ;        materials provided with the distribution.
    72                           ; 
    73                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    74                           ;        software without specific prior written permission.
    75                           ; 
    76                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    77                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    78                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    79                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    80                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    81                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    82                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    83                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    84                           ; 
    85                           ; 
    86                           ; Code-generator required, PIC18F67J94 Definitions
    87                           ; 
    88                           ; SFR Addresses
    89  0000                     
    90                           	psect	idataCOMRAM
    91  001A06                     __pidataCOMRAM:
    92                           	opt stack 0
    93                           
    94                           ;initializer for _randx
    95  001A06  0001               	dw	1
    96  001A08  0000               	dw	0
    97                           
    98                           ;initializer for _maxAmmo
    99  001A0A  0006               	dw	6
   100                           
   101                           ;initializer for _singleGameTime
   102  001A0C  0079               	dw	121
   103                           
   104                           ;initializer for _ammoLeft
   105  001A0E  000C               	dw	12
   106                           
   107                           	psect	smallconst
   108  000E00                     __psmallconst:
   109                           	opt stack 0
   110  000E00  00                 	db	0
   111  000E01                     _dpowers:
   112                           	opt stack 0
   113  000E01  0001               	dw	1
   114  000E03  000A               	dw	10
   115  000E05  0064               	dw	100
   116  000E07  03E8               	dw	1000
   117  000E09  2710               	dw	10000
   118  000E0B                     __end_of_dpowers:
   119                           	opt stack 0
   120  0000                     _RPINR12_13	set	3632
   121  0000                     _RPOR22_23	set	3613
   122  0000                     _RPOR24_25	set	3614
   123  0000                     _ANCON1	set	3655
   124  0000                     _RPINR26_27	set	3639
   125  0000                     _RPOR26_27	set	3615
   126  0000                     _RPINR0_1	set	3626
   127  0000                     _SSP2CON3	set	3897
   128  0000                     _SSP2STAT	set	3866
   129  0000                     _SSP2CON1	set	3865
   130  0000                     _SSP2STATbits	set	3866
   131  0000                     _SSP2BUF	set	3843
   132  0000                     _TRISCbits	set	3988
   133  0000                     _TRISDbits	set	3989
   134  0000                     _OSCCON	set	4051
   135  0000                     _LATDbits	set	3980
   136  0000                     _LATBbits	set	3978
   137  0000                     _LATA	set	3977
   138  0000                     _TRISBbits	set	3987
   139  0000                     _TRISD	set	3989
   140  0000                     _LATC	set	3979
   141  0000                     _TRISC	set	3988
   142  0000                     _TRISA	set	3986
   143  0000                     _RCONbits	set	4048
   144  0000                     _INTCON2bits	set	4081
   145  0000                     _TRISAbits	set	3986
   146  0000                     _IPR1bits	set	3999
   147  0000                     _SPBRG1	set	4015
   148  0000                     _RCSTA1	set	4011
   149  0000                     _TXSTA1	set	4012
   150  0000                     _BAUDCON1	set	3943
   151  0000                     _RCREG1	set	4014
   152  0000                     _RCSTAbits	set	4011
   153  0000                     _PIR1bits	set	3998
   154  0000                     _TXREG1	set	4013
   155  0000                     _INTCON3bits	set	4080
   156  0000                     _INTCONbits	set	4082
   157  0000                     _T0CONbits	set	4053
   158  0000                     _PIE1bits	set	3997
   159  000E0B                     STR_8:
   160  000E0B  45                 	db	69	;'E'
   161  000E0C  20                 	db	32
   162  000E0D  20                 	db	32
   163  000E0E  4E                 	db	78	;'N'
   164  000E0F  20                 	db	32
   165  000E10  20                 	db	32
   166  000E11  44                 	db	68	;'D'
   167  000E12  20                 	db	32
   168  000E13  20                 	db	32
   169  000E14  20                 	db	32
   170  000E15  47                 	db	71	;'G'
   171  000E16  20                 	db	32
   172  000E17  20                 	db	32
   173  000E18  41                 	db	65	;'A'
   174  000E19  20                 	db	32
   175  000E1A  20                 	db	32
   176  000E1B  4D                 	db	77	;'M'
   177  000E1C  20                 	db	32
   178  000E1D  20                 	db	32
   179  000E1E  45                 	db	69	;'E'
   180  000E1F  20                 	db	32
   181  000E20  00                 	db	0
   182  000E21                     STR_3:
   183  000E21  50                 	db	80	;'P'
   184  000E22  4F                 	db	79	;'O'
   185  000E23  49                 	db	73	;'I'
   186  000E24  4E                 	db	78	;'N'
   187  000E25  54                 	db	84	;'T'
   188  000E26  53                 	db	83	;'S'
   189  000E27  20                 	db	32
   190  000E28  42                 	db	66	;'B'
   191  000E29  55                 	db	85	;'U'
   192  000E2A  4C                 	db	76	;'L'
   193  000E2B  4C                 	db	76	;'L'
   194  000E2C  45                 	db	69	;'E'
   195  000E2D  54                 	db	84	;'T'
   196  000E2E  53                 	db	83	;'S'
   197  000E2F  20                 	db	32
   198  000E30  54                 	db	84	;'T'
   199  000E31  49                 	db	73	;'I'
   200  000E32  4D                 	db	77	;'M'
   201  000E33  45                 	db	69	;'E'
   202  000E34  00                 	db	0
   203  000E35                     STR_1:
   204  000E35  20                 	db	32
   205  000E36  20                 	db	32
   206  000E37  45                 	db	69	;'E'
   207  000E38  4D                 	db	77	;'M'
   208  000E39  42                 	db	66	;'B'
   209  000E3A  45                 	db	69	;'E'
   210  000E3B  44                 	db	68	;'D'
   211  000E3C  44                 	db	68	;'D'
   212  000E3D  45                 	db	69	;'E'
   213  000E3E  44                 	db	68	;'D'
   214  000E3F  20                 	db	32
   215  000E40  55                 	db	85	;'U'
   216  000E41  4E                 	db	78	;'N'
   217  000E42  49                 	db	73	;'I'
   218  000E43  56                 	db	86	;'V'
   219  000E44  45                 	db	69	;'E'
   220  000E45  52                 	db	82	;'R'
   221  000E46  53                 	db	83	;'S'
   222  000E47  45                 	db	69	;'E'
   223  000E48  00                 	db	0
   224  000E49                     STR_2:
   225  000E49  53                 	db	83	;'S'
   226  000E4A  20                 	db	32
   227  000E4B  20                 	db	32
   228  000E4C  54                 	db	84	;'T'
   229  000E4D  20                 	db	32
   230  000E4E  20                 	db	32
   231  000E4F  41                 	db	65	;'A'
   232  000E50  20                 	db	32
   233  000E51  20                 	db	32
   234  000E52  52                 	db	82	;'R'
   235  000E53  20                 	db	32
   236  000E54  20                 	db	32
   237  000E55  54                 	db	84	;'T'
   238  000E56  20                 	db	32
   239  000E57  21                 	db	33
   240  000E58  00                 	db	0
   241  000E59                     STR_9:
   242  000E59  50                 	db	80	;'P'
   243  000E5A  4F                 	db	79	;'O'
   244  000E5B  49                 	db	73	;'I'
   245  000E5C  4E                 	db	78	;'N'
   246  000E5D  54                 	db	84	;'T'
   247  000E5E  53                 	db	83	;'S'
   248  000E5F  20                 	db	32
   249  000E60  20                 	db	32
   250  000E61  20                 	db	32
   251  000E62  00                 	db	0
   252  000E63                     STR_4:
   253  000E63  25                 	db	37
   254  000E64  64                 	db	100	;'d'
   255  000E65  00                 	db	0
   256  0000                     
   257                           ; #config settings
   258  000E66  00                 	db	0	; dummy byte at the end
   259  0000                     
   260                           	psect	cinit
   261  0017C2                     __pcinit:
   262                           	opt stack 0
   263  0017C2                     start_initialization:
   264                           	opt stack 0
   265  0017C2                     __initialization:
   266                           	opt stack 0
   267                           
   268                           ; Initialize objects allocated to COMRAM (10 bytes)
   269                           ; load TBLPTR registers with __pidataCOMRAM
   270  0017C2  0E06               	movlw	low __pidataCOMRAM
   271  0017C4  6EF6               	movwf	tblptrl,c
   272  0017C6  0E1A               	movlw	high __pidataCOMRAM
   273  0017C8  6EF7               	movwf	tblptrh,c
   274  0017CA  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   275  0017CC  6EF8               	movwf	tblptru,c
   276  0017CE  EE00  F042         	lfsr	0,__pdataCOMRAM
   277  0017D2  EE10 F00A          	lfsr	1,10
   278  0017D6                     copy_data0:
   279  0017D6  0009               	tblrd		*+
   280  0017D8  CFF5 FFEE          	movff	tablat,postinc0
   281  0017DC  50E5               	movf	postdec1,w,c
   282  0017DE  50E1               	movf	fsr1l,w,c
   283  0017E0  E1FA               	bnz	copy_data0
   284                           
   285                           ; Clear objects allocated to COMRAM (23 bytes)
   286  0017E2  EE00  F02B         	lfsr	0,__pbssCOMRAM
   287  0017E6  0E17               	movlw	23
   288  0017E8                     clear_0:
   289  0017E8  6AEE               	clrf	postinc0,c
   290  0017EA  06E8               	decf	wreg,f,c
   291  0017EC  E1FD               	bnz	clear_0
   292  0017EE                     end_of_initialization:
   293                           	opt stack 0
   294  0017EE                     __end_of__initialization:
   295                           	opt stack 0
   296  0017EE  904C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   297  0017F0  924C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   298  0017F2  0100               	movlb	0
   299  0017F4  EF34  F007         	goto	_main	;jump to C main() function
   300                           tblptru	equ	0xFF8
   301                           tblptrh	equ	0xFF7
   302                           tblptrl	equ	0xFF6
   303                           tablat	equ	0xFF5
   304                           postinc0	equ	0xFEE
   305                           wreg	equ	0xFE8
   306                           postdec1	equ	0xFE5
   307                           fsr1l	equ	0xFE1
   308                           
   309                           	psect	bssCOMRAM
   310  00002B                     __pbssCOMRAM:
   311                           	opt stack 0
   312  00002B                     _totalPoints:
   313                           	opt stack 0
   314  00002B                     	ds	2
   315  00002D                     _globalTimer:
   316                           	opt stack 0
   317  00002D                     	ds	2
   318  00002F                     _toggleCounter:
   319                           	opt stack 0
   320  00002F                     	ds	2
   321  000031                     _startGame:
   322                           	opt stack 0
   323  000031                     	ds	1
   324  000032                     _endFlag:
   325                           	opt stack 0
   326  000032                     	ds	1
   327  000033                     _timerFlag:
   328                           	opt stack 0
   329  000033                     	ds	1
   330  000034                     _capteurFlag:
   331                           	opt stack 0
   332  000034                     	ds	1
   333  000035                     _pewFlag:
   334                           	opt stack 0
   335  000035                     	ds	1
   336  000036                     _modeFlag:
   337                           	opt stack 0
   338  000036                     	ds	1
   339  000037                     _reloadFlag:
   340                           	opt stack 0
   341  000037                     	ds	1
   342  000038                     _rxFlag:
   343                           	opt stack 0
   344  000038                     	ds	1
   345  000039                     _ErrorUART:
   346                           	opt stack 0
   347  000039                     	ds	1
   348  00003A                     _transferedData:
   349                           	opt stack 0
   350  00003A                     	ds	1
   351  00003B                     _rxChar:
   352                           	opt stack 0
   353  00003B                     	ds	1
   354  00003C                     _myModeState:
   355                           	opt stack 0
   356  00003C                     	ds	1
   357  00003D                     _myState:
   358                           	opt stack 0
   359  00003D                     	ds	1
   360  00003E                     _nextTarget:
   361                           	opt stack 0
   362  00003E                     	ds	4
   363                           tblptru	equ	0xFF8
   364                           tblptrh	equ	0xFF7
   365                           tblptrl	equ	0xFF6
   366                           tablat	equ	0xFF5
   367                           postinc0	equ	0xFEE
   368                           wreg	equ	0xFE8
   369                           postdec1	equ	0xFE5
   370                           fsr1l	equ	0xFE1
   371                           
   372                           	psect	dataCOMRAM
   373  000042                     __pdataCOMRAM:
   374                           	opt stack 0
   375  000042                     _randx:
   376                           	opt stack 0
   377  000042                     	ds	4
   378  000046                     _maxAmmo:
   379                           	opt stack 0
   380  000046                     	ds	2
   381  000048                     _singleGameTime:
   382                           	opt stack 0
   383  000048                     	ds	2
   384  00004A                     _ammoLeft:
   385                           	opt stack 0
   386  00004A                     	ds	2
   387                           tblptru	equ	0xFF8
   388                           tblptrh	equ	0xFF7
   389                           tblptrl	equ	0xFF6
   390                           tablat	equ	0xFF5
   391                           postinc0	equ	0xFEE
   392                           wreg	equ	0xFE8
   393                           postdec1	equ	0xFE5
   394                           fsr1l	equ	0xFE1
   395                           
   396                           	psect	cstackBANK0
   397  000060                     __pcstackBANK0:
   398                           	opt stack 0
   399  000060                     sprintf@ap:
   400                           	opt stack 0
   401                           
   402                           ; 2 bytes @ 0x0
   403  000060                     	ds	2
   404  000062                     sprintf@flag:
   405                           	opt stack 0
   406                           
   407                           ; 1 bytes @ 0x2
   408  000062                     	ds	1
   409  000063                     sprintf@prec:
   410                           	opt stack 0
   411                           
   412                           ; 1 bytes @ 0x3
   413  000063                     	ds	1
   414  000064                     sprintf@val:
   415                           	opt stack 0
   416                           
   417                           ; 2 bytes @ 0x4
   418  000064                     	ds	2
   419  000066                     sprintf@c:
   420                           	opt stack 0
   421                           
   422                           ; 1 bytes @ 0x6
   423  000066                     	ds	1
   424  000067                     printRemBullets@nbBullets:
   425                           	opt stack 0
   426  000067                     printRemTime@nbSeconds:
   427                           	opt stack 0
   428  000067                     printPoints@nbPoints:
   429                           	opt stack 0
   430                           
   431                           ; 2 bytes @ 0x7
   432  000067                     	ds	2
   433  000069                     ??_main:
   434                           
   435                           ; 1 bytes @ 0x9
   436  000069                     	ds	2
   437  00006B                     main@i:
   438                           	opt stack 0
   439                           
   440                           ; 2 bytes @ 0xB
   441  00006B                     	ds	2
   442                           tblptru	equ	0xFF8
   443                           tblptrh	equ	0xFF7
   444                           tblptrl	equ	0xFF6
   445                           tablat	equ	0xFF5
   446                           postinc0	equ	0xFEE
   447                           wreg	equ	0xFE8
   448                           postdec1	equ	0xFE5
   449                           fsr1l	equ	0xFE1
   450                           
   451                           	psect	cstackCOMRAM
   452  000001                     __pcstackCOMRAM:
   453                           	opt stack 0
   454  000001                     ??_rxIsr:
   455  000001                     
   456                           ; 1 bytes @ 0x0
   457  000001                     	ds	18
   458  000013                     ??_waitASec:
   459  000013                     ??_fliplr:
   460  000013                     ??_initialisation_PORT:
   461  000013                     ?___lwdiv:
   462                           	opt stack 0
   463  000013                     ?___lmul:
   464                           	opt stack 0
   465  000013                     setModeLED@Mode:
   466                           	opt stack 0
   467  000013                     spi_Send_Read@byte:
   468                           	opt stack 0
   469  000013                     activateTarget@targetNbr:
   470                           	opt stack 0
   471  000013                     activateLEDTarget@targetLED:
   472                           	opt stack 0
   473  000013                     ___lwdiv@dividend:
   474                           	opt stack 0
   475  000013                     ___lmul@multiplier:
   476                           	opt stack 0
   477                           
   478                           ; 4 bytes @ 0x12
   479  000013                     	ds	1
   480  000014                     readBusyFlag@retValue:
   481                           	opt stack 0
   482  000014                     waitASec@i:
   483                           	opt stack 0
   484                           
   485                           ; 2 bytes @ 0x13
   486  000014                     	ds	1
   487  000015                     ??_activateLEDTarget:
   488  000015                     displayCtrl@cursor:
   489                           	opt stack 0
   490  000015                     fliplr@input:
   491                           	opt stack 0
   492  000015                     ___lwdiv@divisor:
   493                           	opt stack 0
   494                           
   495                           ; 2 bytes @ 0x14
   496  000015                     	ds	1
   497  000016                     displayCtrl@blink:
   498                           	opt stack 0
   499  000016                     putchLCD@input:
   500                           	opt stack 0
   501  000016                     moveCursor@row:
   502                           	opt stack 0
   503                           
   504                           ; 2 bytes @ 0x15
   505  000016                     	ds	1
   506  000017                     displayCtrl@display:
   507                           	opt stack 0
   508  000017                     ___lwdiv@counter:
   509                           	opt stack 0
   510  000017                     putStringLCD@input:
   511                           	opt stack 0
   512  000017                     ___lmul@multiplicand:
   513                           	opt stack 0
   514                           
   515                           ; 4 bytes @ 0x16
   516  000017                     	ds	1
   517  000018                     displayCtrl@BCD:
   518                           	opt stack 0
   519  000018                     moveCursor@col:
   520                           	opt stack 0
   521  000018                     ___lwdiv@quotient:
   522                           	opt stack 0
   523                           
   524                           ; 2 bytes @ 0x17
   525  000018                     	ds	1
   526  000019                     ??_putStringLCD:
   527                           
   528                           ; 1 bytes @ 0x18
   529  000019                     	ds	1
   530  00001A                     ?___lwmod:
   531                           	opt stack 0
   532  00001A                     moveCursor@address:
   533                           	opt stack 0
   534  00001A                     ___lwmod@dividend:
   535                           	opt stack 0
   536                           
   537                           ; 2 bytes @ 0x19
   538  00001A                     	ds	1
   539  00001B                     activateLEDTarget@ledNBR:
   540                           	opt stack 0
   541  00001B                     putStringLCD@i:
   542                           	opt stack 0
   543  00001B                     ___lmul@product:
   544                           	opt stack 0
   545                           
   546                           ; 4 bytes @ 0x1A
   547  00001B                     	ds	1
   548  00001C                     ___lwmod@divisor:
   549                           	opt stack 0
   550                           
   551                           ; 2 bytes @ 0x1B
   552  00001C                     	ds	1
   553  00001D                     
   554                           ; 1 bytes @ 0x1C
   555  00001D                     	ds	1
   556  00001E                     ___lwmod@counter:
   557                           	opt stack 0
   558                           
   559                           ; 1 bytes @ 0x1D
   560  00001E                     	ds	1
   561  00001F                     ?_rand:
   562                           	opt stack 0
   563  00001F                     ?_sprintf:
   564                           	opt stack 0
   565  00001F                     sprintf@sp:
   566                           	opt stack 0
   567                           
   568                           ; 2 bytes @ 0x1E
   569  00001F                     	ds	2
   570  000021                     ?___awmod:
   571                           	opt stack 0
   572  000021                     sprintf@f:
   573                           	opt stack 0
   574  000021                     ___awmod@dividend:
   575                           	opt stack 0
   576                           
   577                           ; 2 bytes @ 0x20
   578  000021                     	ds	2
   579  000023                     ___awmod@divisor:
   580                           	opt stack 0
   581                           
   582                           ; 2 bytes @ 0x22
   583  000023                     	ds	2
   584  000025                     ??_sprintf:
   585  000025                     ___awmod@counter:
   586                           	opt stack 0
   587                           
   588                           ; 1 bytes @ 0x24
   589  000025                     	ds	1
   590  000026                     ___awmod@sign:
   591                           	opt stack 0
   592  000026                     printStat@stat:
   593                           	opt stack 0
   594  000026                     printEndGame@nbPoints:
   595                           	opt stack 0
   596                           
   597                           ; 2 bytes @ 0x25
   598  000026                     	ds	1
   599  000027                     getRandomTarget@Target:
   600                           	opt stack 0
   601                           
   602                           ; 2 bytes @ 0x26
   603  000027                     	ds	1
   604  000028                     printStat@statArray:
   605                           	opt stack 0
   606  000028                     printEndGame@statArray:
   607                           	opt stack 0
   608                           
   609                           ; 3 bytes @ 0x27
   610  000028                     	ds	1
   611  000029                     
   612                           ; 1 bytes @ 0x28
   613  000029                     	ds	2
   614  00002B                     tblptru	equ	0xFF8
   615                           tblptrh	equ	0xFF7
   616                           tblptrl	equ	0xFF6
   617                           tablat	equ	0xFF5
   618                           postinc0	equ	0xFEE
   619                           wreg	equ	0xFE8
   620                           postdec1	equ	0xFE5
   621                           fsr1l	equ	0xFE1
   622                           
   623                           ; 1 bytes @ 0x2A
   624 ;;
   625 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   626 ;;
   627 ;; *************** function _main *****************
   628 ;; Defined at:
   629 ;;		line 92 in file "main.c"
   630 ;; Parameters:    Size  Location     Type
   631 ;;		None
   632 ;; Auto vars:     Size  Location     Type
   633 ;;  i               2   11[BANK0 ] int 
   634 ;; Return value:  Size  Location     Type
   635 ;;                  1    wreg      void 
   636 ;; Registers used:
   637 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   638 ;; Tracked objects:
   639 ;;		On entry : 0/0
   640 ;;		On exit  : 0/0
   641 ;;		Unchanged: 0/0
   642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   643 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   644 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   645 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   646 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   647 ;;Total ram usage:        4 bytes
   648 ;; Hardware stack levels required when called:    7
   649 ;; This function calls:
   650 ;;		_activateLEDTarget
   651 ;;		_activateTarget
   652 ;;		_changeMode
   653 ;;		_fireShot
   654 ;;		_getRandomTarget
   655 ;;		_initialisation_LCD
   656 ;;		_printEndGame
   657 ;;		_printMBED
   658 ;;		_printPoints
   659 ;;		_printRemBullets
   660 ;;		_printRemTime
   661 ;;		_printStartGame
   662 ;;		_setInterruptConfig
   663 ;;		_setModeLED
   664 ;;		_setPinConfig
   665 ;;		_setTimerConfig
   666 ;;		_setUARTconfig
   667 ;;		_stopShot
   668 ;;		_toggleGunLED
   669 ;;		_waitASec
   670 ;; This function is called by:
   671 ;;		Startup code after reset
   672 ;; This function uses a non-reentrant model
   673 ;;
   674                           
   675                           	psect	text0
   676  000E68                     __ptext0:
   677                           	opt stack 0
   678  000E68                     _main:
   679                           	opt stack 24
   680                           
   681                           ;main.c: 93: setUARTconfig();
   682                           
   683                           ;incstack = 0
   684  000E68  EC42  F00C         	call	_setUARTconfig	;wreg free
   685                           
   686                           ;main.c: 94: setPinConfig();
   687  000E6C  ECB6  F00C         	call	_setPinConfig	;wreg free
   688                           
   689                           ;main.c: 95: setTimerConfig();
   690  000E70  ECDF  F00C         	call	_setTimerConfig	;wreg free
   691                           
   692                           ;main.c: 96: setInterruptConfig();
   693  000E74  ECA7  F00C         	call	_setInterruptConfig	;wreg free
   694                           
   695                           ;main.c: 98: initialisation_LCD();
   696  000E78  ECC4  F00C         	call	_initialisation_LCD	;wreg free
   697                           
   698                           ;main.c: 99: printMBED();
   699  000E7C  EC14  F00C         	call	_printMBED	;wreg free
   700                           
   701                           ;main.c: 103: while(!startGame){
   702  000E80  D006               	goto	l145
   703  000E82                     
   704                           ;main.c: 104: if(rxFlag){
   705  000E82  5038               	movf	_rxFlag,w,c
   706  000E84  B4D8               	btfsc	status,2,c
   707  000E86  D003               	goto	l145
   708                           
   709                           ;main.c: 105: rxFlag = 0;
   710  000E88  0E00               	movlw	0
   711  000E8A  6E38               	movwf	_rxFlag,c
   712                           
   713                           ;main.c: 106: PIE1bits.RC1IE = 1;
   714  000E8C  8A9D               	bsf	3997,5,c	;volatile
   715  000E8E                     l145:
   716  000E8E  5031               	movf	_startGame,w,c
   717  000E90  B4D8               	btfsc	status,2,c
   718  000E92  D7F7               	goto	l144
   719                           
   720                           ;main.c: 108: }
   721                           ;main.c: 109: }
   722                           ;main.c: 110: printStartGame();
   723  000E94  ECC4  F00B         	call	_printStartGame	;wreg free
   724                           
   725                           ;main.c: 111: T0CONbits.TMR0ON = 1;
   726  000E98  8ED5               	bsf	4053,7,c	;volatile
   727                           
   728                           ;main.c: 133: while(!endFlag){
   729  000E9A  D0E9               	goto	l153
   730  000E9C                     
   731                           ;main.c: 135: if(timerFlag){
   732  000E9C  5033               	movf	_timerFlag,w,c
   733  000E9E  B4D8               	btfsc	status,2,c
   734  000EA0  D005               	goto	l149
   735                           
   736                           ;main.c: 136: globalTimer++;
   737  000EA2  4A2D               	infsnz	_globalTimer,f,c
   738  000EA4  2A2E               	incf	_globalTimer+1,f,c
   739                           
   740                           ;main.c: 137: timerFlag=0;
   741  000EA6  0E00               	movlw	0
   742  000EA8  6E33               	movwf	_timerFlag,c
   743                           
   744                           ;main.c: 138: INTCONbits.TMR0IE = 1;
   745  000EAA  8AF2               	bsf	intcon,5,c	;volatile
   746  000EAC                     l149:
   747                           
   748                           ;main.c: 139: }
   749                           ;main.c: 141: if(globalTimer==singleGameTime ){
   750  000EAC  5048               	movf	_singleGameTime,w,c
   751  000EAE  182D               	xorwf	_globalTimer,w,c
   752  000EB0  E106               	bnz	l2590
   753  000EB2  5049               	movf	_singleGameTime+1,w,c
   754  000EB4  182E               	xorwf	_globalTimer+1,w,c
   755  000EB6  A4D8               	btfss	status,2,c
   756  000EB8  D002               	goto	l150
   757                           
   758                           ;main.c: 142: myState= END_GAME;
   759  000EBA  0E05               	movlw	5
   760  000EBC  6E3D               	movwf	_myState,c
   761  000EBE                     l150:
   762  000EBE                     l2590:
   763                           
   764                           ;main.c: 143: }
   765                           ;main.c: 146: printPoints(totalPoints);
   766  000EBE  C02B  F067         	movff	_totalPoints,printPoints@nbPoints
   767  000EC2  C02C  F068         	movff	_totalPoints+1,printPoints@nbPoints+1
   768  000EC6  EC75  F00C         	call	_printPoints	;wreg free
   769                           
   770                           ;main.c: 147: printRemBullets(ammoLeft);
   771  000ECA  C04A  F067         	movff	_ammoLeft,printRemBullets@nbBullets
   772  000ECE  C04B  F068         	movff	_ammoLeft+1,printRemBullets@nbBullets+1
   773  000ED2  EC64  F00C         	call	_printRemBullets	;wreg free
   774                           
   775                           ;main.c: 148: printRemTime(singleGameTime-globalTimer);
   776  000ED6  C02D  F069         	movff	_globalTimer,??_main
   777  000EDA  C02E  F06A         	movff	_globalTimer+1,??_main+1
   778  000EDE  0100               	movlb	0	; () banked
   779  000EE0  1F69               	comf	??_main& (0+255),f,b
   780  000EE2  1F6A               	comf	(??_main+1)& (0+255),f,b
   781  000EE4  4B69               	infsnz	??_main& (0+255),f,b
   782  000EE6  2B6A               	incf	(??_main+1)& (0+255),f,b
   783  000EE8  5048               	movf	_singleGameTime,w,c
   784  000EEA  0100               	movlb	0	; () banked
   785  000EEC  2569               	addwf	??_main& (0+255),w,b
   786  000EEE  0100               	movlb	0	; () banked
   787  000EF0  6F67               	movwf	printRemTime@nbSeconds& (0+255),b
   788  000EF2  5049               	movf	_singleGameTime+1,w,c
   789  000EF4  0100               	movlb	0	; () banked
   790  000EF6  216A               	addwfc	(??_main+1)& (0+255),w,b
   791  000EF8  0100               	movlb	0	; () banked
   792  000EFA  6F68               	movwf	(printRemTime@nbSeconds+1)& (0+255),b
   793  000EFC  EC53  F00C         	call	_printRemTime	;wreg free
   794                           
   795                           ;main.c: 150: switch(myState){
   796  000F00  D0A3               	goto	l151
   797  000F02                     
   798                           ;main.c: 152: totalPoints = 0;
   799  000F02  0E00               	movlw	0
   800  000F04  6E2C               	movwf	_totalPoints+1,c
   801  000F06  0E00               	movlw	0
   802  000F08  6E2B               	movwf	_totalPoints,c
   803                           
   804                           ;main.c: 153: ammoLeft= maxAmmo;
   805  000F0A  C046  F04A         	movff	_maxAmmo,_ammoLeft
   806  000F0E  C047  F04B         	movff	_maxAmmo+1,_ammoLeft+1
   807                           
   808                           ;main.c: 154: printStartGame();
   809  000F12  ECC4  F00B         	call	_printStartGame	;wreg free
   810                           
   811                           ;main.c: 155: T0CONbits.TMR0ON = 1;
   812  000F16  8ED5               	bsf	4053,7,c	;volatile
   813  000F18                     l2604:
   814                           
   815                           ;main.c: 156: myState = SELECT_NEW_TARGET;
   816  000F18  0E01               	movlw	1
   817  000F1A  D094               	goto	L5
   818  000F1C                     
   819                           ;main.c: 160: getRandomTarget(nextTarget);
   820  000F1C  0E3E               	movlw	low _nextTarget
   821  000F1E  6E27               	movwf	getRandomTarget@Target,c
   822  000F20  0E00               	movlw	high _nextTarget
   823  000F22  6E28               	movwf	getRandomTarget@Target+1,c
   824  000F24  EC1D  F00B         	call	_getRandomTarget	;wreg free
   825                           
   826                           ;main.c: 161: activateTarget(nextTarget[0]);
   827  000F28  C03E  F013         	movff	_nextTarget,activateTarget@targetNbr
   828  000F2C  C03F  F014         	movff	_nextTarget+1,activateTarget@targetNbr+1
   829  000F30  EC08  F00D         	call	_activateTarget	;wreg free
   830                           
   831                           ;main.c: 162: activateLEDTarget(nextTarget);
   832  000F34  0E3E               	movlw	low _nextTarget
   833  000F36  6E13               	movwf	activateLEDTarget@targetLED,c
   834  000F38  0E00               	movlw	high _nextTarget
   835  000F3A  6E14               	movwf	activateLEDTarget@targetLED+1,c
   836  000F3C  EC05  F009         	call	_activateLEDTarget	;wreg free
   837                           
   838                           ;main.c: 163: myState = WAIT_KILL;
   839  000F40  0E04               	movlw	4
   840  000F42  D080               	goto	L5
   841  000F44                     
   842                           ;main.c: 167: totalPoints++;
   843  000F44  4A2B               	infsnz	_totalPoints,f,c
   844  000F46  2A2C               	incf	_totalPoints+1,f,c
   845  000F48  D7E7               	goto	l2604
   846  000F4A                     
   847                           ;main.c: 172: if(reloadFlag){
   848  000F4A  5037               	movf	_reloadFlag,w,c
   849  000F4C  B4D8               	btfsc	status,2,c
   850  000F4E  D005               	goto	l157
   851                           
   852                           ;main.c: 173: ammoLeft= maxAmmo;
   853  000F50  C046  F04A         	movff	_maxAmmo,_ammoLeft
   854  000F54  C047  F04B         	movff	_maxAmmo+1,_ammoLeft+1
   855  000F58  D059               	goto	L10
   856  000F5A                     l157:
   857                           
   858                           ;main.c: 178: else if (modeFlag){
   859  000F5A  5036               	movf	_modeFlag,w,c
   860  000F5C  B4D8               	btfsc	status,2,c
   861  000F5E  D008               	goto	l159
   862                           
   863                           ;main.c: 179: changeMode();
   864  000F60  ECF2  F00C         	call	_changeMode	;wreg free
   865                           
   866                           ;main.c: 180: setModeLED(myModeState);
   867  000F64  503C               	movf	_myModeState,w,c
   868  000F66  EC97  F00C         	call	_setModeLED
   869                           
   870                           ;main.c: 181: modeFlag=0;
   871  000F6A  0E00               	movlw	0
   872  000F6C  6E36               	movwf	_modeFlag,c
   873  000F6E  D050               	goto	l2688
   874  000F70                     l159:
   875                           
   876                           ;main.c: 185: else if (pewFlag && ammoLeft !=0){
   877  000F70  5035               	movf	_pewFlag,w,c
   878  000F72  B4D8               	btfsc	status,2,c
   879  000F74  D022               	goto	l161
   880  000F76  504A               	movf	_ammoLeft,w,c
   881  000F78  104B               	iorwf	_ammoLeft+1,w,c
   882  000F7A  B4D8               	btfsc	status,2,c
   883  000F7C  D01E               	goto	l161
   884                           
   885                           ;main.c: 186: fireShot();
   886  000F7E  EC0F  F00D         	call	_fireShot	;wreg free
   887                           
   888                           ;main.c: 187: for (int i =0;i<10000;i++){}
   889  000F82  0E00               	movlw	0
   890  000F84  0100               	movlb	0	; () banked
   891  000F86  6F6C               	movwf	(main@i+1)& (0+255),b
   892  000F88  0E00               	movlw	0
   893  000F8A  6F6B               	movwf	main@i& (0+255),b
   894  000F8C                     l2644:
   895                           
   896                           ; BSR set to: 0
   897  000F8C  0100               	movlb	0	; () banked
   898  000F8E  BF6C               	btfsc	(main@i+1)& (0+255),7,b
   899  000F90  D008               	goto	l162
   900  000F92  0E10               	movlw	16
   901  000F94  0100               	movlb	0	; () banked
   902  000F96  5D6B               	subwf	main@i& (0+255),w,b
   903  000F98  0E27               	movlw	39
   904  000F9A  0100               	movlb	0	; () banked
   905  000F9C  596C               	subwfb	(main@i+1)& (0+255),w,b
   906  000F9E  B0D8               	btfsc	status,0,c
   907  000FA0  D004               	goto	u1670
   908  000FA2                     l162:
   909                           
   910                           ; BSR set to: 0
   911                           
   912                           ; BSR set to: 0
   913  000FA2  0100               	movlb	0	; () banked
   914  000FA4  4B6B               	infsnz	main@i& (0+255),f,b
   915  000FA6  2B6C               	incf	(main@i+1)& (0+255),f,b
   916  000FA8  D7F1               	goto	l2644
   917  000FAA                     u1670:
   918                           
   919                           ; BSR set to: 0
   920                           ;main.c: 188: stopShot();
   921                           
   922                           ; BSR set to: 0
   923  000FAA  EC0D  F00D         	call	_stopShot	;wreg free
   924                           
   925                           ;main.c: 189: ammoLeft -= 1;
   926  000FAE  064A               	decf	_ammoLeft,f,c
   927  000FB0  A0D8               	btfss	status,0,c
   928  000FB2  064B               	decf	_ammoLeft+1,f,c
   929                           
   930                           ;main.c: 190: pewFlag = 0;
   931  000FB4  0E00               	movlw	0
   932  000FB6  6E35               	movwf	_pewFlag,c
   933  000FB8  D02B               	goto	l2688
   934  000FBA                     l161:
   935                           
   936                           ;main.c: 193: else if(ammoLeft==0){
   937  000FBA  504A               	movf	_ammoLeft,w,c
   938  000FBC  104B               	iorwf	_ammoLeft+1,w,c
   939  000FBE  A4D8               	btfss	status,2,c
   940  000FC0  D002               	goto	l165
   941                           
   942                           ;main.c: 194: myState = NEED_RELOAD;
   943  000FC2  0E03               	movlw	3
   944  000FC4  D03F               	goto	L5
   945  000FC6                     l165:
   946                           
   947                           ;main.c: 196: else if(capteurFlag ){
   948  000FC6  5034               	movf	_capteurFlag,w,c
   949  000FC8  B4D8               	btfsc	status,2,c
   950  000FCA  D051               	goto	l153
   951                           
   952                           ;main.c: 197: capteurFlag = 0;
   953  000FCC  0E00               	movlw	0
   954  000FCE  6E34               	movwf	_capteurFlag,c
   955                           
   956                           ;main.c: 198: INTCON3bits.INT1E = 1;
   957  000FD0  86F0               	bsf	intcon3,3,c	;volatile
   958                           
   959                           ;main.c: 199: myState = ACCUMULATE_POINTS;
   960  000FD2  0E02               	movlw	2
   961  000FD4  D037               	goto	L5
   962  000FD6                     
   963                           ;main.c: 205: toggleCounter++;
   964  000FD6  4A2F               	infsnz	_toggleCounter,f,c
   965  000FD8  2A30               	incf	_toggleCounter+1,f,c
   966                           
   967                           ;main.c: 206: if (toggleCounter==20){
   968  000FDA  0E14               	movlw	20
   969  000FDC  182F               	xorwf	_toggleCounter,w,c
   970  000FDE  1030               	iorwf	_toggleCounter+1,w,c
   971  000FE0  A4D8               	btfss	status,2,c
   972  000FE2  D006               	goto	l169
   973                           
   974                           ;main.c: 207: toggleGunLED();
   975  000FE4  ECFB  F00C         	call	_toggleGunLED	;wreg free
   976                           
   977                           ;main.c: 208: toggleCounter=0;
   978  000FE8  0E00               	movlw	0
   979  000FEA  6E30               	movwf	_toggleCounter+1,c
   980  000FEC  0E00               	movlw	0
   981  000FEE  6E2F               	movwf	_toggleCounter,c
   982  000FF0                     l169:
   983                           
   984                           ;main.c: 209: }
   985                           ;main.c: 210: if(reloadFlag){
   986  000FF0  5037               	movf	_reloadFlag,w,c
   987  000FF2  B4D8               	btfsc	status,2,c
   988  000FF4  D03C               	goto	l153
   989                           
   990                           ;main.c: 211: ammoLeft= maxAmmo;
   991  000FF6  C046  F04A         	movff	_maxAmmo,_ammoLeft
   992  000FFA  C047  F04B         	movff	_maxAmmo+1,_ammoLeft+1
   993                           
   994                           ;main.c: 212: setModeLED(myModeState);
   995  000FFE  503C               	movf	_myModeState,w,c
   996  001000  EC97  F00C         	call	_setModeLED
   997                           
   998                           ;main.c: 213: toggleCounter=0;
   999  001004  0E00               	movlw	0
  1000  001006  6E30               	movwf	_toggleCounter+1,c
  1001  001008  0E00               	movlw	0
  1002  00100A  6E2F               	movwf	_toggleCounter,c
  1003  00100C                     L10:
  1004                           
  1005                           ;main.c: 214: reloadFlag=0;
  1006  00100C  0E00               	movlw	0
  1007  00100E  6E37               	movwf	_reloadFlag,c
  1008  001010                     l2688:
  1009                           
  1010                           ;main.c: 215: PIE1bits.RC1IE = 1;
  1011  001010  8A9D               	bsf	3997,5,c	;volatile
  1012                           
  1013                           ;main.c: 216: }
  1014                           ;main.c: 217: break;
  1015  001012  D02D               	goto	l153
  1016  001014                     
  1017                           ;main.c: 221: startGame = 0;
  1018  001014  0E00               	movlw	0
  1019  001016  6E31               	movwf	_startGame,c
  1020                           
  1021                           ;main.c: 222: T0CONbits.TMR0ON = 0;
  1022  001018  9ED5               	bcf	4053,7,c	;volatile
  1023                           
  1024                           ;main.c: 223: TXREG1=0xEE;
  1025  00101A  0EEE               	movlw	238
  1026  00101C  6EAD               	movwf	4013,c	;volatile
  1027                           
  1028                           ;main.c: 224: while(!startGame){
  1029  00101E  D00E               	goto	l174
  1030  001020                     
  1031                           ;main.c: 225: printEndGame(totalPoints);
  1032  001020  C02B  F026         	movff	_totalPoints,printEndGame@nbPoints
  1033  001024  C02C  F027         	movff	_totalPoints+1,printEndGame@nbPoints+1
  1034  001028  ECE6  F009         	call	_printEndGame	;wreg free
  1035                           
  1036                           ;main.c: 226: waitASec();
  1037  00102C  EC2B  F00C         	call	_waitASec	;wreg free
  1038                           
  1039                           ;main.c: 227: if(rxFlag){
  1040  001030  5038               	movf	_rxFlag,w,c
  1041  001032  B4D8               	btfsc	status,2,c
  1042  001034  D003               	goto	l174
  1043                           
  1044                           ;main.c: 228: rxFlag = 0;
  1045  001036  0E00               	movlw	0
  1046  001038  6E38               	movwf	_rxFlag,c
  1047                           
  1048                           ;main.c: 229: PIE1bits.RC1IE = 1;
  1049  00103A  8A9D               	bsf	3997,5,c	;volatile
  1050  00103C                     l174:
  1051  00103C  5031               	movf	_startGame,w,c
  1052  00103E  B4D8               	btfsc	status,2,c
  1053  001040  D7EF               	goto	l173
  1054                           
  1055                           ;main.c: 230: }
  1056                           ;main.c: 231: }
  1057                           ;main.c: 232: myState = IDLE;
  1058  001042  0E00               	movlw	0
  1059  001044                     L5:
  1060  001044  6E3D               	movwf	_myState,c
  1061                           
  1062                           ;main.c: 234: }
  1063                           
  1064                           ;main.c: 233: break;
  1065  001046  D013               	goto	l153
  1066  001048                     l151:
  1067  001048  503D               	movf	_myState,w,c
  1068                           
  1069                           ; Switch size 1, requested type "space"
  1070                           ; Number of cases is 6, Range of values is 0 to 5
  1071                           ; switch strategies available:
  1072                           ; Name         Instructions Cycles
  1073                           ; simple_byte           19    10 (average)
  1074                           ;	Chosen strategy is simple_byte
  1075  00104A  0A00               	xorlw	0	; case 0
  1076  00104C  B4D8               	btfsc	status,2,c
  1077  00104E  D759               	goto	l152
  1078  001050  0A01               	xorlw	1	; case 1
  1079  001052  B4D8               	btfsc	status,2,c
  1080  001054  D763               	goto	l154
  1081  001056  0A03               	xorlw	3	; case 2
  1082  001058  B4D8               	btfsc	status,2,c
  1083  00105A  D774               	goto	l155
  1084  00105C  0A01               	xorlw	1	; case 3
  1085  00105E  B4D8               	btfsc	status,2,c
  1086  001060  D7BA               	goto	l168
  1087  001062  0A07               	xorlw	7	; case 4
  1088  001064  B4D8               	btfsc	status,2,c
  1089  001066  D771               	goto	l156
  1090  001068  0A01               	xorlw	1	; case 5
  1091  00106A  B4D8               	btfsc	status,2,c
  1092  00106C  D7D3               	goto	l171
  1093  00106E                     l153:
  1094  00106E  5032               	movf	_endFlag,w,c
  1095  001070  B4D8               	btfsc	status,2,c
  1096  001072  D714               	goto	l148
  1097  001074                     u1740:
  1098                           
  1099                           ;main.c: 237: printEndGame(totalPoints);
  1100                           
  1101                           ;main.c: 235: }
  1102                           ;main.c: 236: while(1){
  1103  001074  C02B  F026         	movff	_totalPoints,printEndGame@nbPoints
  1104  001078  C02C  F027         	movff	_totalPoints+1,printEndGame@nbPoints+1
  1105  00107C  ECE6  F009         	call	_printEndGame	;wreg free
  1106                           
  1107                           ;main.c: 238: waitASec();
  1108  001080  EC2B  F00C         	call	_waitASec	;wreg free
  1109  001084  D7F7               	goto	u1740
  1110  001086                     __end_of_main:
  1111                           	opt stack 0
  1112                           tblptru	equ	0xFF8
  1113                           tblptrh	equ	0xFF7
  1114                           tblptrl	equ	0xFF6
  1115                           tablat	equ	0xFF5
  1116                           intcon	equ	0xFF2
  1117                           intcon3	equ	0xFF0
  1118                           postinc0	equ	0xFEE
  1119                           wreg	equ	0xFE8
  1120                           postdec1	equ	0xFE5
  1121                           fsr1l	equ	0xFE1
  1122                           status	equ	0xFD8
  1123                           
  1124 ;; *************** function _toggleGunLED *****************
  1125 ;; Defined at:
  1126 ;;		line 416 in file "main.c"
  1127 ;; Parameters:    Size  Location     Type
  1128 ;;		None
  1129 ;; Auto vars:     Size  Location     Type
  1130 ;;		None
  1131 ;; Return value:  Size  Location     Type
  1132 ;;                  1    wreg      void 
  1133 ;; Registers used:
  1134 ;;		None
  1135 ;; Tracked objects:
  1136 ;;		On entry : 0/0
  1137 ;;		On exit  : 0/0
  1138 ;;		Unchanged: 0/0
  1139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1140 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1141 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1142 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1143 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1144 ;;Total ram usage:        0 bytes
  1145 ;; Hardware stack levels used:    1
  1146 ;; Hardware stack levels required when called:    1
  1147 ;; This function calls:
  1148 ;;		Nothing
  1149 ;; This function is called by:
  1150 ;;		_main
  1151 ;; This function uses a non-reentrant model
  1152 ;;
  1153                           
  1154                           	psect	text1
  1155  0019F6                     __ptext1:
  1156                           	opt stack 0
  1157  0019F6                     _toggleGunLED:
  1158                           	opt stack 29
  1159                           
  1160                           ;main.c: 417: if (LATDbits.LATD0==0){
  1161                           
  1162                           ;incstack = 0
  1163  0019F6  B08C               	btfsc	3980,0,c	;volatile
  1164  0019F8  D003               	goto	l248
  1165                           
  1166                           ;main.c: 418: LATDbits.LATD0 = 1;
  1167  0019FA  808C               	bsf	3980,0,c	;volatile
  1168                           
  1169                           ;main.c: 419: LATDbits.LATD5 = 1;
  1170  0019FC  8A8C               	bsf	3980,5,c	;volatile
  1171                           
  1172                           ;main.c: 420: }
  1173  0019FE  0012               	return	
  1174  001A00                     l248:
  1175                           
  1176                           ;main.c: 421: else{
  1177                           ;main.c: 422: LATDbits.LATD0 = 0;
  1178  001A00  908C               	bcf	3980,0,c	;volatile
  1179                           
  1180                           ;main.c: 423: LATDbits.LATD5 = 0;
  1181  001A02  9A8C               	bcf	3980,5,c	;volatile
  1182  001A04  0012               	return	
  1183  001A06                     __end_of_toggleGunLED:
  1184                           	opt stack 0
  1185                           tblptru	equ	0xFF8
  1186                           tblptrh	equ	0xFF7
  1187                           tblptrl	equ	0xFF6
  1188                           tablat	equ	0xFF5
  1189                           intcon	equ	0xFF2
  1190                           intcon3	equ	0xFF0
  1191                           postinc0	equ	0xFEE
  1192                           wreg	equ	0xFE8
  1193                           postdec1	equ	0xFE5
  1194                           fsr1l	equ	0xFE1
  1195                           status	equ	0xFD8
  1196                           
  1197 ;; *************** function _stopShot *****************
  1198 ;; Defined at:
  1199 ;;		line 398 in file "main.c"
  1200 ;; Parameters:    Size  Location     Type
  1201 ;;		None
  1202 ;; Auto vars:     Size  Location     Type
  1203 ;;		None
  1204 ;; Return value:  Size  Location     Type
  1205 ;;                  1    wreg      void 
  1206 ;; Registers used:
  1207 ;;		None
  1208 ;; Tracked objects:
  1209 ;;		On entry : 0/0
  1210 ;;		On exit  : 0/0
  1211 ;;		Unchanged: 0/0
  1212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1213 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1214 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1215 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1216 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1217 ;;Total ram usage:        0 bytes
  1218 ;; Hardware stack levels used:    1
  1219 ;; Hardware stack levels required when called:    1
  1220 ;; This function calls:
  1221 ;;		Nothing
  1222 ;; This function is called by:
  1223 ;;		_main
  1224 ;; This function uses a non-reentrant model
  1225 ;;
  1226                           
  1227                           	psect	text2
  1228  001A1A                     __ptext2:
  1229                           	opt stack 0
  1230  001A1A                     _stopShot:
  1231                           	opt stack 29
  1232                           
  1233                           ;main.c: 399: LATBbits.LATB1 = 0;
  1234                           
  1235                           ;incstack = 0
  1236  001A1A  928A               	bcf	3978,1,c	;volatile
  1237  001A1C  0012               	return		;funcret
  1238  001A1E                     __end_of_stopShot:
  1239                           	opt stack 0
  1240                           tblptru	equ	0xFF8
  1241                           tblptrh	equ	0xFF7
  1242                           tblptrl	equ	0xFF6
  1243                           tablat	equ	0xFF5
  1244                           intcon	equ	0xFF2
  1245                           intcon3	equ	0xFF0
  1246                           postinc0	equ	0xFEE
  1247                           wreg	equ	0xFE8
  1248                           postdec1	equ	0xFE5
  1249                           fsr1l	equ	0xFE1
  1250                           status	equ	0xFD8
  1251                           
  1252 ;; *************** function _setUARTconfig *****************
  1253 ;; Defined at:
  1254 ;;		line 303 in file "main.c"
  1255 ;; Parameters:    Size  Location     Type
  1256 ;;		None
  1257 ;; Auto vars:     Size  Location     Type
  1258 ;;		None
  1259 ;; Return value:  Size  Location     Type
  1260 ;;                  1    wreg      void 
  1261 ;; Registers used:
  1262 ;;		wreg, status,2
  1263 ;; Tracked objects:
  1264 ;;		On entry : 0/0
  1265 ;;		On exit  : 0/0
  1266 ;;		Unchanged: 0/0
  1267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1268 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1269 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1270 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1271 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1272 ;;Total ram usage:        0 bytes
  1273 ;; Hardware stack levels used:    1
  1274 ;; Hardware stack levels required when called:    1
  1275 ;; This function calls:
  1276 ;;		Nothing
  1277 ;; This function is called by:
  1278 ;;		_main
  1279 ;; This function uses a non-reentrant model
  1280 ;;
  1281                           
  1282                           	psect	text3
  1283  001884                     __ptext3:
  1284                           	opt stack 0
  1285  001884                     _setUARTconfig:
  1286                           	opt stack 29
  1287                           
  1288                           ;main.c: 305: RPINR0_1 = 0b01100110;
  1289                           
  1290                           ;incstack = 0
  1291  001884  0E66               	movlw	102
  1292  001886  010E               	movlb	14	; () banked
  1293  001888  6F2A               	movwf	42,b	;volatile
  1294                           
  1295                           ;main.c: 306: RPOR26_27 = 0b00010001;
  1296  00188A  0E11               	movlw	17
  1297  00188C  010E               	movlb	14	; () banked
  1298  00188E  6F1F               	movwf	31,b	;volatile
  1299                           
  1300                           ;main.c: 308: BAUDCON1 = 0x00;
  1301  001890  0E00               	movlw	0
  1302  001892  6E67               	movwf	3943,c	;volatile
  1303                           
  1304                           ;main.c: 309: TXSTA1 = 0x26;
  1305  001894  0E26               	movlw	38
  1306  001896  6EAC               	movwf	4012,c	;volatile
  1307                           
  1308                           ;main.c: 310: RCSTA1 = 0x90;
  1309  001898  0E90               	movlw	144
  1310  00189A  6EAB               	movwf	4011,c	;volatile
  1311                           
  1312                           ;main.c: 311: SPBRG1 = 0x19;
  1313  00189C  0E19               	movlw	25
  1314  00189E  6EAF               	movwf	4015,c	;volatile
  1315                           
  1316                           ;main.c: 313: TXREG1 = 0xAA;
  1317  0018A0  0EAA               	movlw	170
  1318  0018A2  6EAD               	movwf	4013,c	;volatile
  1319                           
  1320                           ; BSR set to: 14
  1321  0018A4  0012               	return		;funcret
  1322  0018A6                     __end_of_setUARTconfig:
  1323                           	opt stack 0
  1324                           tblptru	equ	0xFF8
  1325                           tblptrh	equ	0xFF7
  1326                           tblptrl	equ	0xFF6
  1327                           tablat	equ	0xFF5
  1328                           intcon	equ	0xFF2
  1329                           intcon3	equ	0xFF0
  1330                           postinc0	equ	0xFEE
  1331                           wreg	equ	0xFE8
  1332                           postdec1	equ	0xFE5
  1333                           fsr1l	equ	0xFE1
  1334                           status	equ	0xFD8
  1335                           
  1336 ;; *************** function _setTimerConfig *****************
  1337 ;; Defined at:
  1338 ;;		line 351 in file "main.c"
  1339 ;; Parameters:    Size  Location     Type
  1340 ;;		None
  1341 ;; Auto vars:     Size  Location     Type
  1342 ;;		None
  1343 ;; Return value:  Size  Location     Type
  1344 ;;                  1    wreg      void 
  1345 ;; Registers used:
  1346 ;;		wreg, status,2
  1347 ;; Tracked objects:
  1348 ;;		On entry : 0/0
  1349 ;;		On exit  : 0/0
  1350 ;;		Unchanged: 0/0
  1351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1352 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1353 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1354 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1355 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1356 ;;Total ram usage:        0 bytes
  1357 ;; Hardware stack levels used:    1
  1358 ;; Hardware stack levels required when called:    1
  1359 ;; This function calls:
  1360 ;;		Nothing
  1361 ;; This function is called by:
  1362 ;;		_main
  1363 ;; This function uses a non-reentrant model
  1364 ;;
  1365                           
  1366                           	psect	text4
  1367  0019BE                     __ptext4:
  1368                           	opt stack 0
  1369  0019BE                     _setTimerConfig:
  1370                           	opt stack 29
  1371                           
  1372                           ;main.c: 352: T0CONbits.TMR0ON = 0;
  1373                           
  1374                           ; BSR set to: 14
  1375                           ;incstack = 0
  1376  0019BE  9ED5               	bcf	4053,7,c	;volatile
  1377                           
  1378                           ;main.c: 353: T0CONbits.T08BIT = 1;
  1379  0019C0  8CD5               	bsf	4053,6,c	;volatile
  1380                           
  1381                           ;main.c: 354: T0CONbits.T0CS = 0;
  1382  0019C2  0ECF               	movlw	-49
  1383  0019C4  16D5               	andwf	4053,f,c	;volatile
  1384                           
  1385                           ;main.c: 355: T0CONbits.PSA = 0;
  1386  0019C6  96D5               	bcf	4053,3,c	;volatile
  1387                           
  1388                           ;main.c: 356: T0CONbits.T0PS= 0b110;
  1389  0019C8  50D5               	movf	4053,w,c	;volatile
  1390  0019CA  0BF8               	andlw	-8
  1391  0019CC  0906               	iorlw	6
  1392  0019CE  6ED5               	movwf	4053,c	;volatile
  1393  0019D0  0012               	return		;funcret
  1394  0019D2                     __end_of_setTimerConfig:
  1395                           	opt stack 0
  1396                           tblptru	equ	0xFF8
  1397                           tblptrh	equ	0xFF7
  1398                           tblptrl	equ	0xFF6
  1399                           tablat	equ	0xFF5
  1400                           intcon	equ	0xFF2
  1401                           intcon3	equ	0xFF0
  1402                           postinc0	equ	0xFEE
  1403                           wreg	equ	0xFE8
  1404                           postdec1	equ	0xFE5
  1405                           fsr1l	equ	0xFE1
  1406                           status	equ	0xFD8
  1407                           
  1408 ;; *************** function _setPinConfig *****************
  1409 ;; Defined at:
  1410 ;;		line 338 in file "main.c"
  1411 ;; Parameters:    Size  Location     Type
  1412 ;;		None
  1413 ;; Auto vars:     Size  Location     Type
  1414 ;;		None
  1415 ;; Return value:  Size  Location     Type
  1416 ;;                  1    wreg      void 
  1417 ;; Registers used:
  1418 ;;		wreg, status,2, status,0
  1419 ;; Tracked objects:
  1420 ;;		On entry : 0/0
  1421 ;;		On exit  : 0/0
  1422 ;;		Unchanged: 0/0
  1423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1424 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1425 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1426 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1427 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1428 ;;Total ram usage:        0 bytes
  1429 ;; Hardware stack levels used:    1
  1430 ;; Hardware stack levels required when called:    1
  1431 ;; This function calls:
  1432 ;;		Nothing
  1433 ;; This function is called by:
  1434 ;;		_main
  1435 ;; This function uses a non-reentrant model
  1436 ;;
  1437                           
  1438                           	psect	text5
  1439  00196C                     __ptext5:
  1440                           	opt stack 0
  1441  00196C                     _setPinConfig:
  1442                           	opt stack 29
  1443                           
  1444                           ;main.c: 340: ANCON1 = 0x00;
  1445                           
  1446                           ;incstack = 0
  1447  00196C  0E00               	movlw	0
  1448  00196E  010E               	movlb	14	; () banked
  1449  001970  6F47               	movwf	71,b	;volatile
  1450                           
  1451                           ; BSR set to: 14
  1452                           ;main.c: 341: TRISA &= 0b11111000;
  1453  001972  0EF8               	movlw	248
  1454  001974  1692               	andwf	3986,f,c	;volatile
  1455                           
  1456                           ; BSR set to: 14
  1457                           ;main.c: 342: TRISC &= 0b00000011;
  1458  001976  0E03               	movlw	3
  1459  001978  1694               	andwf	3988,f,c	;volatile
  1460                           
  1461                           ; BSR set to: 14
  1462                           ;main.c: 345: LATC = 0xFF;
  1463  00197A  688B               	setf	3979,c	;volatile
  1464                           
  1465                           ; BSR set to: 14
  1466                           ;main.c: 346: TRISD &= 0b11011110;
  1467  00197C  0EDE               	movlw	222
  1468  00197E  1695               	andwf	3989,f,c	;volatile
  1469                           
  1470                           ; BSR set to: 14
  1471                           ;main.c: 347: TRISBbits.TRISB1 = 0;
  1472  001980  9293               	bcf	3987,1,c	;volatile
  1473                           
  1474                           ; BSR set to: 14
  1475                           ;main.c: 348: LATA = 0;
  1476  001982  0E00               	movlw	0
  1477  001984  6E89               	movwf	3977,c	;volatile
  1478                           
  1479                           ; BSR set to: 14
  1480  001986  0012               	return		;funcret
  1481  001988                     __end_of_setPinConfig:
  1482                           	opt stack 0
  1483                           tblptru	equ	0xFF8
  1484                           tblptrh	equ	0xFF7
  1485                           tblptrl	equ	0xFF6
  1486                           tablat	equ	0xFF5
  1487                           intcon	equ	0xFF2
  1488                           intcon3	equ	0xFF0
  1489                           postinc0	equ	0xFEE
  1490                           wreg	equ	0xFE8
  1491                           postdec1	equ	0xFE5
  1492                           fsr1l	equ	0xFE1
  1493                           status	equ	0xFD8
  1494                           
  1495 ;; *************** function _setModeLED *****************
  1496 ;; Defined at:
  1497 ;;		line 402 in file "main.c"
  1498 ;; Parameters:    Size  Location     Type
  1499 ;;  Mode            1    wreg     enum E13823
  1500 ;; Auto vars:     Size  Location     Type
  1501 ;;  Mode            1   18[COMRAM] enum E13823
  1502 ;; Return value:  Size  Location     Type
  1503 ;;                  1    wreg      void 
  1504 ;; Registers used:
  1505 ;;		wreg, status,2, status,0
  1506 ;; Tracked objects:
  1507 ;;		On entry : 0/0
  1508 ;;		On exit  : 0/0
  1509 ;;		Unchanged: 0/0
  1510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1511 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1512 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1513 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1514 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1515 ;;Total ram usage:        1 bytes
  1516 ;; Hardware stack levels used:    1
  1517 ;; Hardware stack levels required when called:    1
  1518 ;; This function calls:
  1519 ;;		Nothing
  1520 ;; This function is called by:
  1521 ;;		_main
  1522 ;; This function uses a non-reentrant model
  1523 ;;
  1524                           
  1525                           	psect	text6
  1526  00192E                     __ptext6:
  1527                           	opt stack 0
  1528  00192E                     _setModeLED:
  1529                           	opt stack 29
  1530                           
  1531                           ; BSR set to: 14
  1532                           ;incstack = 0
  1533                           ;setModeLED@Mode stored from wreg
  1534  00192E  6E13               	movwf	setModeLED@Mode,c
  1535                           
  1536                           ;main.c: 403: switch (Mode){
  1537  001930  D006               	goto	l241
  1538  001932                     l242:
  1539                           
  1540                           ;main.c: 405: LATDbits.LATD0 = 1;
  1541  001932  808C               	bsf	3980,0,c	;volatile
  1542                           
  1543                           ;main.c: 406: LATDbits.LATD5 = 0;
  1544  001934  9A8C               	bcf	3980,5,c	;volatile
  1545                           
  1546                           ;main.c: 407: break;
  1547  001936  0012               	return	
  1548  001938                     l244:
  1549                           
  1550                           ;main.c: 409: LATDbits.LATD0 = 1;
  1551  001938  808C               	bsf	3980,0,c	;volatile
  1552                           
  1553                           ;main.c: 410: LATDbits.LATD5 = 0;
  1554  00193A  9A8C               	bcf	3980,5,c	;volatile
  1555                           
  1556                           ;main.c: 413: }
  1557                           
  1558                           ;main.c: 411: break;
  1559  00193C  0012               	return	
  1560  00193E                     l241:
  1561  00193E  5013               	movf	setModeLED@Mode,w,c
  1562                           
  1563                           ; Switch size 1, requested type "space"
  1564                           ; Number of cases is 2, Range of values is 0 to 1
  1565                           ; switch strategies available:
  1566                           ; Name         Instructions Cycles
  1567                           ; simple_byte            7     4 (average)
  1568                           ;	Chosen strategy is simple_byte
  1569  001940  0A00               	xorlw	0	; case 0
  1570  001942  B4D8               	btfsc	status,2,c
  1571  001944  D7F6               	goto	l242
  1572  001946  0A01               	xorlw	1	; case 1
  1573  001948  A4D8               	btfss	status,2,c
  1574  00194A  0012               	return	
  1575  00194C  D7F5               	goto	l244
  1576  00194E                     __end_of_setModeLED:
  1577                           	opt stack 0
  1578                           tblptru	equ	0xFF8
  1579                           tblptrh	equ	0xFF7
  1580                           tblptrl	equ	0xFF6
  1581                           tablat	equ	0xFF5
  1582                           intcon	equ	0xFF2
  1583                           intcon3	equ	0xFF0
  1584                           postinc0	equ	0xFEE
  1585                           wreg	equ	0xFE8
  1586                           postdec1	equ	0xFE5
  1587                           fsr1l	equ	0xFE1
  1588                           status	equ	0xFD8
  1589                           
  1590 ;; *************** function _setInterruptConfig *****************
  1591 ;; Defined at:
  1592 ;;		line 315 in file "main.c"
  1593 ;; Parameters:    Size  Location     Type
  1594 ;;		None
  1595 ;; Auto vars:     Size  Location     Type
  1596 ;;		None
  1597 ;; Return value:  Size  Location     Type
  1598 ;;                  1    wreg      void 
  1599 ;; Registers used:
  1600 ;;		wreg, status,2
  1601 ;; Tracked objects:
  1602 ;;		On entry : 0/0
  1603 ;;		On exit  : 0/0
  1604 ;;		Unchanged: 0/0
  1605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1606 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1607 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1608 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1609 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1610 ;;Total ram usage:        0 bytes
  1611 ;; Hardware stack levels used:    1
  1612 ;; Hardware stack levels required when called:    1
  1613 ;; This function calls:
  1614 ;;		Nothing
  1615 ;; This function is called by:
  1616 ;;		_main
  1617 ;; This function uses a non-reentrant model
  1618 ;;
  1619                           
  1620                           	psect	text7
  1621  00194E                     __ptext7:
  1622                           	opt stack 0
  1623  00194E                     _setInterruptConfig:
  1624                           	opt stack 29
  1625                           
  1626                           ;main.c: 319: INTCONbits.TMR0IF = 0;
  1627                           
  1628                           ;incstack = 0
  1629  00194E  94F2               	bcf	intcon,2,c	;volatile
  1630                           
  1631                           ;main.c: 320: INTCONbits.TMR0IE = 1;
  1632  001950  8AF2               	bsf	intcon,5,c	;volatile
  1633                           
  1634                           ;main.c: 323: IPR1bits.RC1IP = 0;
  1635  001952  9A9F               	bcf	3999,5,c	;volatile
  1636                           
  1637                           ;main.c: 324: PIE1bits.RC1IE = 1;
  1638  001954  8A9D               	bsf	3997,5,c	;volatile
  1639                           
  1640                           ;main.c: 327: RPINR26_27 = 0xC1;
  1641  001956  0EC1               	movlw	193
  1642  001958  010E               	movlb	14	; () banked
  1643  00195A  6F37               	movwf	55,b	;volatile
  1644                           
  1645                           ; BSR set to: 14
  1646                           ;main.c: 328: TRISAbits.TRISA5 = 1;
  1647  00195C  8A92               	bsf	3986,5,c	;volatile
  1648                           
  1649                           ; BSR set to: 14
  1650                           ;main.c: 329: INTCON2bits.INTEDG1 = 1;
  1651  00195E  8AF1               	bsf	intcon2,5,c	;volatile
  1652                           
  1653                           ; BSR set to: 14
  1654                           ;main.c: 330: INTCON3bits.INT1F = 0;
  1655  001960  90F0               	bcf	intcon3,0,c	;volatile
  1656                           
  1657                           ; BSR set to: 14
  1658                           ;main.c: 331: INTCON3bits.INT1P = 0;
  1659  001962  9CF0               	bcf	intcon3,6,c	;volatile
  1660                           
  1661                           ; BSR set to: 14
  1662                           ;main.c: 334: RCONbits.IPEN = 1;
  1663  001964  8ED0               	bsf	4048,7,c	;volatile
  1664                           
  1665                           ; BSR set to: 14
  1666                           ;main.c: 335: INTCONbits.GIE = 1;
  1667  001966  8EF2               	bsf	intcon,7,c	;volatile
  1668                           
  1669                           ; BSR set to: 14
  1670                           ;main.c: 336: INTCONbits.PEIE = 1;
  1671  001968  8CF2               	bsf	intcon,6,c	;volatile
  1672                           
  1673                           ; BSR set to: 14
  1674  00196A  0012               	return		;funcret
  1675  00196C                     __end_of_setInterruptConfig:
  1676                           	opt stack 0
  1677                           tblptru	equ	0xFF8
  1678                           tblptrh	equ	0xFF7
  1679                           tblptrl	equ	0xFF6
  1680                           tablat	equ	0xFF5
  1681                           intcon	equ	0xFF2
  1682                           intcon2	equ	0xFF1
  1683                           intcon3	equ	0xFF0
  1684                           postinc0	equ	0xFEE
  1685                           wreg	equ	0xFE8
  1686                           postdec1	equ	0xFE5
  1687                           fsr1l	equ	0xFE1
  1688                           status	equ	0xFD8
  1689                           
  1690 ;; *************** function _printStartGame *****************
  1691 ;; Defined at:
  1692 ;;		line 12 in file "LCD_Game_Printer.c"
  1693 ;; Parameters:    Size  Location     Type
  1694 ;;		None
  1695 ;; Auto vars:     Size  Location     Type
  1696 ;;		None
  1697 ;; Return value:  Size  Location     Type
  1698 ;;                  1    wreg      void 
  1699 ;; Registers used:
  1700 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1701 ;; Tracked objects:
  1702 ;;		On entry : 0/0
  1703 ;;		On exit  : 0/0
  1704 ;;		Unchanged: 0/0
  1705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1706 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1707 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1708 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1709 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1710 ;;Total ram usage:        0 bytes
  1711 ;; Hardware stack levels used:    1
  1712 ;; Hardware stack levels required when called:    5
  1713 ;; This function calls:
  1714 ;;		_clearDisplay
  1715 ;;		_moveCursor
  1716 ;;		_putStringLCD
  1717 ;;		_waitASec
  1718 ;; This function is called by:
  1719 ;;		_main
  1720 ;; This function uses a non-reentrant model
  1721 ;;
  1722                           
  1723                           	psect	text8
  1724  001788                     __ptext8:
  1725                           	opt stack 0
  1726  001788                     _printStartGame:
  1727                           	opt stack 25
  1728                           
  1729                           ;LCD_Game_Printer.c: 13: moveCursor(1,3);
  1730                           
  1731                           ; BSR set to: 14
  1732                           ;incstack = 0
  1733  001788  0E00               	movlw	0
  1734  00178A  6E17               	movwf	moveCursor@row+1,c
  1735  00178C  0E01               	movlw	1
  1736  00178E  6E16               	movwf	moveCursor@row,c
  1737  001790  0E00               	movlw	0
  1738  001792  6E19               	movwf	moveCursor@col+1,c
  1739  001794  0E03               	movlw	3
  1740  001796  6E18               	movwf	moveCursor@col,c
  1741  001798  ECF7  F00A         	call	_moveCursor	;wreg free
  1742                           
  1743                           ;LCD_Game_Printer.c: 14: putStringLCD("S  T  A  R  T !");
  1744  00179C  0E49               	movlw	low STR_2
  1745  00179E  6E17               	movwf	putStringLCD@input,c
  1746  0017A0  0E0E               	movlw	high STR_2
  1747  0017A2  6E18               	movwf	putStringLCD@input+1,c
  1748  0017A4  EC73  F009         	call	_putStringLCD	;wreg free
  1749                           
  1750                           ;LCD_Game_Printer.c: 15: waitASec();
  1751  0017A8  EC2B  F00C         	call	_waitASec	;wreg free
  1752                           
  1753                           ;LCD_Game_Printer.c: 16: waitASec();
  1754  0017AC  EC2B  F00C         	call	_waitASec	;wreg free
  1755                           
  1756                           ;LCD_Game_Printer.c: 17: clearDisplay();
  1757  0017B0  EC86  F00C         	call	_clearDisplay	;wreg free
  1758                           
  1759                           ;LCD_Game_Printer.c: 18: putStringLCD("POINTS BULLETS TIME");
  1760  0017B4  0E21               	movlw	low STR_3
  1761  0017B6  6E17               	movwf	putStringLCD@input,c
  1762  0017B8  0E0E               	movlw	high STR_3
  1763  0017BA  6E18               	movwf	putStringLCD@input+1,c
  1764  0017BC  EC73  F009         	call	_putStringLCD	;wreg free
  1765  0017C0  0012               	return		;funcret
  1766  0017C2                     __end_of_printStartGame:
  1767                           	opt stack 0
  1768                           tblptru	equ	0xFF8
  1769                           tblptrh	equ	0xFF7
  1770                           tblptrl	equ	0xFF6
  1771                           tablat	equ	0xFF5
  1772                           intcon	equ	0xFF2
  1773                           intcon2	equ	0xFF1
  1774                           intcon3	equ	0xFF0
  1775                           postinc0	equ	0xFEE
  1776                           wreg	equ	0xFE8
  1777                           postdec1	equ	0xFE5
  1778                           fsr1l	equ	0xFE1
  1779                           status	equ	0xFD8
  1780                           
  1781 ;; *************** function _printRemTime *****************
  1782 ;; Defined at:
  1783 ;;		line 26 in file "LCD_Game_Printer.c"
  1784 ;; Parameters:    Size  Location     Type
  1785 ;;  nbSeconds       2    7[BANK0 ] unsigned int 
  1786 ;; Auto vars:     Size  Location     Type
  1787 ;;		None
  1788 ;; Return value:  Size  Location     Type
  1789 ;;                  1    wreg      void 
  1790 ;; Registers used:
  1791 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1792 ;; Tracked objects:
  1793 ;;		On entry : 0/0
  1794 ;;		On exit  : 0/0
  1795 ;;		Unchanged: 0/0
  1796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1797 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1798 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1799 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1800 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1801 ;;Total ram usage:        2 bytes
  1802 ;; Hardware stack levels used:    1
  1803 ;; Hardware stack levels required when called:    6
  1804 ;; This function calls:
  1805 ;;		_moveCursor
  1806 ;;		_printStat
  1807 ;; This function is called by:
  1808 ;;		_main
  1809 ;; This function uses a non-reentrant model
  1810 ;;
  1811                           
  1812                           	psect	text9
  1813  0018A6                     __ptext9:
  1814                           	opt stack 0
  1815  0018A6                     _printRemTime:
  1816                           	opt stack 24
  1817                           
  1818                           ;LCD_Game_Printer.c: 27: moveCursor(2,16);
  1819                           
  1820                           ;incstack = 0
  1821  0018A6  0E00               	movlw	0
  1822  0018A8  6E17               	movwf	moveCursor@row+1,c
  1823  0018AA  0E02               	movlw	2
  1824  0018AC  6E16               	movwf	moveCursor@row,c
  1825  0018AE  0E00               	movlw	0
  1826  0018B0  6E19               	movwf	moveCursor@col+1,c
  1827  0018B2  0E10               	movlw	16
  1828  0018B4  6E18               	movwf	moveCursor@col,c
  1829  0018B6  ECF7  F00A         	call	_moveCursor	;wreg free
  1830                           
  1831                           ;LCD_Game_Printer.c: 28: printStat(nbSeconds);
  1832  0018BA  C067  F026         	movff	printRemTime@nbSeconds,printStat@stat
  1833  0018BE  C068  F027         	movff	printRemTime@nbSeconds+1,printStat@stat+1
  1834  0018C2  EC1D  F00A         	call	_printStat	;wreg free
  1835  0018C6  0012               	return		;funcret
  1836  0018C8                     __end_of_printRemTime:
  1837                           	opt stack 0
  1838                           tblptru	equ	0xFF8
  1839                           tblptrh	equ	0xFF7
  1840                           tblptrl	equ	0xFF6
  1841                           tablat	equ	0xFF5
  1842                           intcon	equ	0xFF2
  1843                           intcon2	equ	0xFF1
  1844                           intcon3	equ	0xFF0
  1845                           postinc0	equ	0xFEE
  1846                           wreg	equ	0xFE8
  1847                           postdec1	equ	0xFE5
  1848                           fsr1l	equ	0xFE1
  1849                           status	equ	0xFD8
  1850                           
  1851 ;; *************** function _printRemBullets *****************
  1852 ;; Defined at:
  1853 ;;		line 21 in file "LCD_Game_Printer.c"
  1854 ;; Parameters:    Size  Location     Type
  1855 ;;  nbBullets       2    7[BANK0 ] unsigned int 
  1856 ;; Auto vars:     Size  Location     Type
  1857 ;;		None
  1858 ;; Return value:  Size  Location     Type
  1859 ;;                  1    wreg      void 
  1860 ;; Registers used:
  1861 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1862 ;; Tracked objects:
  1863 ;;		On entry : 0/0
  1864 ;;		On exit  : 0/0
  1865 ;;		Unchanged: 0/0
  1866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1867 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1868 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1869 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1870 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1871 ;;Total ram usage:        2 bytes
  1872 ;; Hardware stack levels used:    1
  1873 ;; Hardware stack levels required when called:    6
  1874 ;; This function calls:
  1875 ;;		_moveCursor
  1876 ;;		_printStat
  1877 ;; This function is called by:
  1878 ;;		_main
  1879 ;; This function uses a non-reentrant model
  1880 ;;
  1881                           
  1882                           	psect	text10
  1883  0018C8                     __ptext10:
  1884                           	opt stack 0
  1885  0018C8                     _printRemBullets:
  1886                           	opt stack 24
  1887                           
  1888                           ;LCD_Game_Printer.c: 22: moveCursor(2,9);
  1889                           
  1890                           ;incstack = 0
  1891  0018C8  0E00               	movlw	0
  1892  0018CA  6E17               	movwf	moveCursor@row+1,c
  1893  0018CC  0E02               	movlw	2
  1894  0018CE  6E16               	movwf	moveCursor@row,c
  1895  0018D0  0E00               	movlw	0
  1896  0018D2  6E19               	movwf	moveCursor@col+1,c
  1897  0018D4  0E09               	movlw	9
  1898  0018D6  6E18               	movwf	moveCursor@col,c
  1899  0018D8  ECF7  F00A         	call	_moveCursor	;wreg free
  1900                           
  1901                           ;LCD_Game_Printer.c: 23: printStat(nbBullets);
  1902  0018DC  C067  F026         	movff	printRemBullets@nbBullets,printStat@stat
  1903  0018E0  C068  F027         	movff	printRemBullets@nbBullets+1,printStat@stat+1
  1904  0018E4  EC1D  F00A         	call	_printStat	;wreg free
  1905  0018E8  0012               	return		;funcret
  1906  0018EA                     __end_of_printRemBullets:
  1907                           	opt stack 0
  1908                           tblptru	equ	0xFF8
  1909                           tblptrh	equ	0xFF7
  1910                           tblptrl	equ	0xFF6
  1911                           tablat	equ	0xFF5
  1912                           intcon	equ	0xFF2
  1913                           intcon2	equ	0xFF1
  1914                           intcon3	equ	0xFF0
  1915                           postinc0	equ	0xFEE
  1916                           wreg	equ	0xFE8
  1917                           postdec1	equ	0xFE5
  1918                           fsr1l	equ	0xFE1
  1919                           status	equ	0xFD8
  1920                           
  1921 ;; *************** function _printPoints *****************
  1922 ;; Defined at:
  1923 ;;		line 31 in file "LCD_Game_Printer.c"
  1924 ;; Parameters:    Size  Location     Type
  1925 ;;  nbPoints        2    7[BANK0 ] unsigned int 
  1926 ;; Auto vars:     Size  Location     Type
  1927 ;;		None
  1928 ;; Return value:  Size  Location     Type
  1929 ;;                  1    wreg      void 
  1930 ;; Registers used:
  1931 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1932 ;; Tracked objects:
  1933 ;;		On entry : 0/0
  1934 ;;		On exit  : 0/0
  1935 ;;		Unchanged: 0/0
  1936 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1937 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1938 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1939 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1940 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1941 ;;Total ram usage:        2 bytes
  1942 ;; Hardware stack levels used:    1
  1943 ;; Hardware stack levels required when called:    6
  1944 ;; This function calls:
  1945 ;;		_moveCursor
  1946 ;;		_printStat
  1947 ;; This function is called by:
  1948 ;;		_main
  1949 ;; This function uses a non-reentrant model
  1950 ;;
  1951                           
  1952                           	psect	text11
  1953  0018EA                     __ptext11:
  1954                           	opt stack 0
  1955  0018EA                     _printPoints:
  1956                           	opt stack 24
  1957                           
  1958                           ;LCD_Game_Printer.c: 32: moveCursor(2,1);
  1959                           
  1960                           ;incstack = 0
  1961  0018EA  0E00               	movlw	0
  1962  0018EC  6E17               	movwf	moveCursor@row+1,c
  1963  0018EE  0E02               	movlw	2
  1964  0018F0  6E16               	movwf	moveCursor@row,c
  1965  0018F2  0E00               	movlw	0
  1966  0018F4  6E19               	movwf	moveCursor@col+1,c
  1967  0018F6  0E01               	movlw	1
  1968  0018F8  6E18               	movwf	moveCursor@col,c
  1969  0018FA  ECF7  F00A         	call	_moveCursor	;wreg free
  1970                           
  1971                           ;LCD_Game_Printer.c: 33: printStat(nbPoints);
  1972  0018FE  C067  F026         	movff	printPoints@nbPoints,printStat@stat
  1973  001902  C068  F027         	movff	printPoints@nbPoints+1,printStat@stat+1
  1974  001906  EC1D  F00A         	call	_printStat	;wreg free
  1975  00190A  0012               	return		;funcret
  1976  00190C                     __end_of_printPoints:
  1977                           	opt stack 0
  1978                           tblptru	equ	0xFF8
  1979                           tblptrh	equ	0xFF7
  1980                           tblptrl	equ	0xFF6
  1981                           tablat	equ	0xFF5
  1982                           intcon	equ	0xFF2
  1983                           intcon2	equ	0xFF1
  1984                           intcon3	equ	0xFF0
  1985                           postinc0	equ	0xFEE
  1986                           wreg	equ	0xFE8
  1987                           postdec1	equ	0xFE5
  1988                           fsr1l	equ	0xFE1
  1989                           status	equ	0xFD8
  1990                           
  1991 ;; *************** function _printStat *****************
  1992 ;; Defined at:
  1993 ;;		line 36 in file "LCD_Game_Printer.c"
  1994 ;; Parameters:    Size  Location     Type
  1995 ;;  stat            2   37[COMRAM] unsigned int 
  1996 ;; Auto vars:     Size  Location     Type
  1997 ;;  statArray       3   39[COMRAM] unsigned char [3]
  1998 ;; Return value:  Size  Location     Type
  1999 ;;                  1    wreg      void 
  2000 ;; Registers used:
  2001 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2002 ;; Tracked objects:
  2003 ;;		On entry : 0/0
  2004 ;;		On exit  : 0/0
  2005 ;;		Unchanged: 0/0
  2006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2007 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2008 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2009 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2010 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2011 ;;Total ram usage:        5 bytes
  2012 ;; Hardware stack levels used:    1
  2013 ;; Hardware stack levels required when called:    5
  2014 ;; This function calls:
  2015 ;;		_putStringLCD
  2016 ;;		_sprintf
  2017 ;; This function is called by:
  2018 ;;		_printRemBullets
  2019 ;;		_printRemTime
  2020 ;;		_printPoints
  2021 ;; This function uses a non-reentrant model
  2022 ;;
  2023                           
  2024                           	psect	text12
  2025  00143A                     __ptext12:
  2026                           	opt stack 0
  2027  00143A                     _printStat:
  2028                           	opt stack 24
  2029                           
  2030                           ;LCD_Game_Printer.c: 37: unsigned char statArray[3];
  2031                           ;LCD_Game_Printer.c: 38: sprintf(statArray, "%d", stat);
  2032                           
  2033                           ;incstack = 0
  2034  00143A  0E28               	movlw	low printStat@statArray
  2035  00143C  6E1F               	movwf	sprintf@sp,c
  2036  00143E  0E00               	movlw	high printStat@statArray
  2037  001440  6E20               	movwf	sprintf@sp+1,c
  2038  001442  0E63               	movlw	low STR_4
  2039  001444  6E21               	movwf	sprintf@f,c
  2040  001446  0E0E               	movlw	high STR_4
  2041  001448  6E22               	movwf	sprintf@f+1,c
  2042  00144A  C026  F023         	movff	printStat@stat,?_sprintf+4
  2043  00144E  C027  F024         	movff	printStat@stat+1,?_sprintf+5
  2044  001452  EC43  F008         	call	_sprintf	;wreg free
  2045                           
  2046                           ;LCD_Game_Printer.c: 40: if(stat < 100 && stat >= 10){
  2047  001456  5027               	movf	printStat@stat+1,w,c
  2048  001458  E111               	bnz	l2326
  2049  00145A  0E64               	movlw	100
  2050  00145C  5C26               	subwf	printStat@stat,w,c
  2051  00145E  B0D8               	btfsc	status,0,c
  2052  001460  D00D               	goto	l282
  2053  001462  5027               	movf	printStat@stat+1,w,c
  2054  001464  E104               	bnz	u1450
  2055  001466  0E0A               	movlw	10
  2056  001468  5C26               	subwf	printStat@stat,w,c
  2057  00146A  A0D8               	btfss	status,0,c
  2058  00146C  D007               	goto	l282
  2059  00146E                     u1450:
  2060                           
  2061                           ;LCD_Game_Printer.c: 41: putStringLCD(" ");
  2062  00146E  0E61               	movlw	low (STR_9+8)
  2063  001470  6E17               	movwf	putStringLCD@input,c
  2064  001472  0E0E               	movlw	high (STR_9+8)
  2065  001474  6E18               	movwf	putStringLCD@input+1,c
  2066  001476  EC73  F009         	call	_putStringLCD	;wreg free
  2067                           
  2068                           ;LCD_Game_Printer.c: 42: }
  2069  00147A  D00C               	goto	l284
  2070  00147C                     l282:
  2071  00147C                     l2326:
  2072                           
  2073                           ;LCD_Game_Printer.c: 43: else if(stat < 10){
  2074  00147C  5027               	movf	printStat@stat+1,w,c
  2075  00147E  E10A               	bnz	l283
  2076  001480  0E0A               	movlw	10
  2077  001482  5C26               	subwf	printStat@stat,w,c
  2078  001484  B0D8               	btfsc	status,0,c
  2079  001486  D006               	goto	l284
  2080                           
  2081                           ;LCD_Game_Printer.c: 44: putStringLCD("  ");
  2082  001488  0E60               	movlw	low (STR_9+7)
  2083  00148A  6E17               	movwf	putStringLCD@input,c
  2084  00148C  0E0E               	movlw	high (STR_9+7)
  2085  00148E  6E18               	movwf	putStringLCD@input+1,c
  2086  001490  EC73  F009         	call	_putStringLCD	;wreg free
  2087  001494                     l284:
  2088  001494                     l283:
  2089                           
  2090                           ;LCD_Game_Printer.c: 45: }
  2091                           ;LCD_Game_Printer.c: 47: putStringLCD(statArray);
  2092  001494  0E28               	movlw	low printStat@statArray
  2093  001496  6E17               	movwf	putStringLCD@input,c
  2094  001498  0E00               	movlw	high printStat@statArray
  2095  00149A  6E18               	movwf	putStringLCD@input+1,c
  2096  00149C  EC73  F009         	call	_putStringLCD	;wreg free
  2097  0014A0  0012               	return		;funcret
  2098  0014A2                     __end_of_printStat:
  2099                           	opt stack 0
  2100                           tblptru	equ	0xFF8
  2101                           tblptrh	equ	0xFF7
  2102                           tblptrl	equ	0xFF6
  2103                           tablat	equ	0xFF5
  2104                           intcon	equ	0xFF2
  2105                           intcon2	equ	0xFF1
  2106                           intcon3	equ	0xFF0
  2107                           postinc0	equ	0xFEE
  2108                           wreg	equ	0xFE8
  2109                           postdec1	equ	0xFE5
  2110                           fsr1l	equ	0xFE1
  2111                           status	equ	0xFD8
  2112                           
  2113 ;; *************** function _printMBED *****************
  2114 ;; Defined at:
  2115 ;;		line 4 in file "LCD_Game_Printer.c"
  2116 ;; Parameters:    Size  Location     Type
  2117 ;;		None
  2118 ;; Auto vars:     Size  Location     Type
  2119 ;;		None
  2120 ;; Return value:  Size  Location     Type
  2121 ;;                  1    wreg      void 
  2122 ;; Registers used:
  2123 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2124 ;; Tracked objects:
  2125 ;;		On entry : 0/0
  2126 ;;		On exit  : 0/0
  2127 ;;		Unchanged: 0/0
  2128 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2129 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2130 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2131 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2132 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2133 ;;Total ram usage:        0 bytes
  2134 ;; Hardware stack levels used:    1
  2135 ;; Hardware stack levels required when called:    5
  2136 ;; This function calls:
  2137 ;;		_clearDisplay
  2138 ;;		_moveCursor
  2139 ;;		_putStringLCD
  2140 ;;		_waitASec
  2141 ;; This function is called by:
  2142 ;;		_main
  2143 ;; This function uses a non-reentrant model
  2144 ;;
  2145                           
  2146                           	psect	text13
  2147  001828                     __ptext13:
  2148                           	opt stack 0
  2149  001828                     _printMBED:
  2150                           	opt stack 25
  2151                           
  2152                           ;LCD_Game_Printer.c: 5: moveCursor(1,0);
  2153                           
  2154                           ;incstack = 0
  2155  001828  0E00               	movlw	0
  2156  00182A  6E17               	movwf	moveCursor@row+1,c
  2157  00182C  0E01               	movlw	1
  2158  00182E  6E16               	movwf	moveCursor@row,c
  2159  001830  0E00               	movlw	0
  2160  001832  6E19               	movwf	moveCursor@col+1,c
  2161  001834  0E00               	movlw	0
  2162  001836  6E18               	movwf	moveCursor@col,c
  2163  001838  ECF7  F00A         	call	_moveCursor	;wreg free
  2164                           
  2165                           ;LCD_Game_Printer.c: 6: putStringLCD("  EMBEDDED UNIVERSE");
  2166  00183C  0E35               	movlw	low STR_1
  2167  00183E  6E17               	movwf	putStringLCD@input,c
  2168  001840  0E0E               	movlw	high STR_1
  2169  001842  6E18               	movwf	putStringLCD@input+1,c
  2170  001844  EC73  F009         	call	_putStringLCD	;wreg free
  2171                           
  2172                           ;LCD_Game_Printer.c: 7: waitASec();
  2173  001848  EC2B  F00C         	call	_waitASec	;wreg free
  2174                           
  2175                           ;LCD_Game_Printer.c: 8: waitASec();
  2176  00184C  EC2B  F00C         	call	_waitASec	;wreg free
  2177                           
  2178                           ;LCD_Game_Printer.c: 9: clearDisplay();
  2179  001850  EC86  F00C         	call	_clearDisplay	;wreg free
  2180  001854  0012               	return		;funcret
  2181  001856                     __end_of_printMBED:
  2182                           	opt stack 0
  2183                           tblptru	equ	0xFF8
  2184                           tblptrh	equ	0xFF7
  2185                           tblptrl	equ	0xFF6
  2186                           tablat	equ	0xFF5
  2187                           intcon	equ	0xFF2
  2188                           intcon2	equ	0xFF1
  2189                           intcon3	equ	0xFF0
  2190                           postinc0	equ	0xFEE
  2191                           wreg	equ	0xFE8
  2192                           postdec1	equ	0xFE5
  2193                           fsr1l	equ	0xFE1
  2194                           status	equ	0xFD8
  2195                           
  2196 ;; *************** function _waitASec *****************
  2197 ;; Defined at:
  2198 ;;		line 61 in file "LCD_Game_Printer.c"
  2199 ;; Parameters:    Size  Location     Type
  2200 ;;		None
  2201 ;; Auto vars:     Size  Location     Type
  2202 ;;  i               2   19[COMRAM] int 
  2203 ;; Return value:  Size  Location     Type
  2204 ;;                  1    wreg      void 
  2205 ;; Registers used:
  2206 ;;		wreg, status,2, status,0
  2207 ;; Tracked objects:
  2208 ;;		On entry : 0/0
  2209 ;;		On exit  : 0/0
  2210 ;;		Unchanged: 0/0
  2211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2212 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2213 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2214 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2215 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2216 ;;Total ram usage:        3 bytes
  2217 ;; Hardware stack levels used:    1
  2218 ;; Hardware stack levels required when called:    1
  2219 ;; This function calls:
  2220 ;;		Nothing
  2221 ;; This function is called by:
  2222 ;;		_main
  2223 ;;		_printMBED
  2224 ;;		_printStartGame
  2225 ;; This function uses a non-reentrant model
  2226 ;;
  2227                           
  2228                           	psect	text14
  2229  001856                     __ptext14:
  2230                           	opt stack 0
  2231  001856                     _waitASec:
  2232                           	opt stack 29
  2233                           
  2234                           ;LCD_Game_Printer.c: 62: for(int i = 0; i < 20; i++)
  2235                           
  2236                           ;incstack = 0
  2237  001856  0E00               	movlw	0
  2238  001858  6E15               	movwf	waitASec@i+1,c
  2239  00185A  0E00               	movlw	0
  2240  00185C  6E14               	movwf	waitASec@i,c
  2241  00185E                     l2278:
  2242  00185E  BE15               	btfsc	waitASec@i+1,7,c
  2243  001860  D006               	goto	l291
  2244  001862  5015               	movf	waitASec@i+1,w,c
  2245  001864  E10E               	bnz	l293
  2246  001866  0E14               	movlw	20
  2247  001868  5C14               	subwf	waitASec@i,w,c
  2248  00186A  B0D8               	btfsc	status,0,c
  2249  00186C  0012               	return	
  2250  00186E                     l291:
  2251                           
  2252                           ;LCD_Game_Printer.c: 63: _delay((unsigned long)((50)*(8000000/4000.0)));
  2253  00186E  0E82               	movlw	130
  2254  001870  6E13               	movwf	??_waitASec& (0+255),c
  2255  001872  0EDE               	movlw	222
  2256  001874                     u1757:
  2257  001874  2EE8               	decfsz	wreg,f,c
  2258  001876  D7FE               	bra	u1757
  2259  001878  2E13               	decfsz	??_waitASec& (0+255),f,c
  2260  00187A  D7FC               	bra	u1757
  2261  00187C  4A14               	infsnz	waitASec@i,f,c
  2262  00187E  2A15               	incf	waitASec@i+1,f,c
  2263  001880  D7EE               	goto	l2278
  2264  001882                     l293:
  2265  001882  0012               	return		;funcret
  2266  001884                     __end_of_waitASec:
  2267                           	opt stack 0
  2268                           tblptru	equ	0xFF8
  2269                           tblptrh	equ	0xFF7
  2270                           tblptrl	equ	0xFF6
  2271                           tablat	equ	0xFF5
  2272                           intcon	equ	0xFF2
  2273                           intcon2	equ	0xFF1
  2274                           intcon3	equ	0xFF0
  2275                           postinc0	equ	0xFEE
  2276                           wreg	equ	0xFE8
  2277                           postdec1	equ	0xFE5
  2278                           fsr1l	equ	0xFE1
  2279                           status	equ	0xFD8
  2280                           
  2281 ;; *************** function _printEndGame *****************
  2282 ;; Defined at:
  2283 ;;		line 50 in file "LCD_Game_Printer.c"
  2284 ;; Parameters:    Size  Location     Type
  2285 ;;  nbPoints        2   37[COMRAM] unsigned int 
  2286 ;; Auto vars:     Size  Location     Type
  2287 ;;  statArray       3   39[COMRAM] unsigned char [3]
  2288 ;; Return value:  Size  Location     Type
  2289 ;;                  1    wreg      void 
  2290 ;; Registers used:
  2291 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2292 ;; Tracked objects:
  2293 ;;		On entry : 0/0
  2294 ;;		On exit  : 0/0
  2295 ;;		Unchanged: 0/0
  2296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2297 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2298 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2299 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2300 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2301 ;;Total ram usage:        5 bytes
  2302 ;; Hardware stack levels used:    1
  2303 ;; Hardware stack levels required when called:    5
  2304 ;; This function calls:
  2305 ;;		_clearDisplay
  2306 ;;		_moveCursor
  2307 ;;		_putStringLCD
  2308 ;;		_sprintf
  2309 ;; This function is called by:
  2310 ;;		_main
  2311 ;; This function uses a non-reentrant model
  2312 ;;
  2313                           
  2314                           	psect	text15
  2315  0013CC                     __ptext15:
  2316                           	opt stack 0
  2317  0013CC                     _printEndGame:
  2318                           	opt stack 25
  2319                           
  2320                           ;LCD_Game_Printer.c: 51: clearDisplay();
  2321                           
  2322                           ;incstack = 0
  2323  0013CC  EC86  F00C         	call	_clearDisplay	;wreg free
  2324                           
  2325                           ;LCD_Game_Printer.c: 52: moveCursor(1,0);
  2326  0013D0  0E00               	movlw	0
  2327  0013D2  6E17               	movwf	moveCursor@row+1,c
  2328  0013D4  0E01               	movlw	1
  2329  0013D6  6E16               	movwf	moveCursor@row,c
  2330  0013D8  0E00               	movlw	0
  2331  0013DA  6E19               	movwf	moveCursor@col+1,c
  2332  0013DC  0E00               	movlw	0
  2333  0013DE  6E18               	movwf	moveCursor@col,c
  2334  0013E0  ECF7  F00A         	call	_moveCursor	;wreg free
  2335                           
  2336                           ;LCD_Game_Printer.c: 53: unsigned char statArray[3];
  2337                           ;LCD_Game_Printer.c: 54: sprintf(statArray, "%d", nbPoints);
  2338  0013E4  0E28               	movlw	low printEndGame@statArray
  2339  0013E6  6E1F               	movwf	sprintf@sp,c
  2340  0013E8  0E00               	movlw	high printEndGame@statArray
  2341  0013EA  6E20               	movwf	sprintf@sp+1,c
  2342  0013EC  0E63               	movlw	low STR_4
  2343  0013EE  6E21               	movwf	sprintf@f,c
  2344  0013F0  0E0E               	movlw	high STR_4
  2345  0013F2  6E22               	movwf	sprintf@f+1,c
  2346  0013F4  C026  F023         	movff	printEndGame@nbPoints,?_sprintf+4
  2347  0013F8  C027  F024         	movff	printEndGame@nbPoints+1,?_sprintf+5
  2348  0013FC  EC43  F008         	call	_sprintf	;wreg free
  2349                           
  2350                           ;LCD_Game_Printer.c: 55: putStringLCD("E  N  D   G  A  M  E ");
  2351  001400  0E0B               	movlw	low STR_8
  2352  001402  6E17               	movwf	putStringLCD@input,c
  2353  001404  0E0E               	movlw	high STR_8
  2354  001406  6E18               	movwf	putStringLCD@input+1,c
  2355  001408  EC73  F009         	call	_putStringLCD	;wreg free
  2356                           
  2357                           ;LCD_Game_Printer.c: 56: moveCursor(3,0);
  2358  00140C  0E00               	movlw	0
  2359  00140E  6E17               	movwf	moveCursor@row+1,c
  2360  001410  0E03               	movlw	3
  2361  001412  6E16               	movwf	moveCursor@row,c
  2362  001414  0E00               	movlw	0
  2363  001416  6E19               	movwf	moveCursor@col+1,c
  2364  001418  0E00               	movlw	0
  2365  00141A  6E18               	movwf	moveCursor@col,c
  2366  00141C  ECF7  F00A         	call	_moveCursor	;wreg free
  2367                           
  2368                           ;LCD_Game_Printer.c: 57: putStringLCD("POINTS   ");
  2369  001420  0E59               	movlw	low STR_9
  2370  001422  6E17               	movwf	putStringLCD@input,c
  2371  001424  0E0E               	movlw	high STR_9
  2372  001426  6E18               	movwf	putStringLCD@input+1,c
  2373  001428  EC73  F009         	call	_putStringLCD	;wreg free
  2374                           
  2375                           ;LCD_Game_Printer.c: 58: putStringLCD(statArray);
  2376  00142C  0E28               	movlw	low printEndGame@statArray
  2377  00142E  6E17               	movwf	putStringLCD@input,c
  2378  001430  0E00               	movlw	high printEndGame@statArray
  2379  001432  6E18               	movwf	putStringLCD@input+1,c
  2380  001434  EC73  F009         	call	_putStringLCD	;wreg free
  2381  001438  0012               	return		;funcret
  2382  00143A                     __end_of_printEndGame:
  2383                           	opt stack 0
  2384                           tblptru	equ	0xFF8
  2385                           tblptrh	equ	0xFF7
  2386                           tblptrl	equ	0xFF6
  2387                           tablat	equ	0xFF5
  2388                           intcon	equ	0xFF2
  2389                           intcon2	equ	0xFF1
  2390                           intcon3	equ	0xFF0
  2391                           postinc0	equ	0xFEE
  2392                           wreg	equ	0xFE8
  2393                           postdec1	equ	0xFE5
  2394                           fsr1l	equ	0xFE1
  2395                           status	equ	0xFD8
  2396                           
  2397 ;; *************** function _sprintf *****************
  2398 ;; Defined at:
  2399 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\doprnt.c"
  2400 ;; Parameters:    Size  Location     Type
  2401 ;;  sp              2   30[COMRAM] PTR unsigned char 
  2402 ;;		 -> printEndGame@statArray(3), printStat@statArray(3), 
  2403 ;;  f               2   32[COMRAM] PTR const unsigned char 
  2404 ;;		 -> STR_7(3), STR_4(3), 
  2405 ;; Auto vars:     Size  Location     Type
  2406 ;;  tmpval          4    0        struct .
  2407 ;;  cp              3    0        PTR const unsigned char 
  2408 ;;  val             2    4[BANK0 ] unsigned int 
  2409 ;;  ap              2    0[BANK0 ] PTR void [1]
  2410 ;;		 -> ?_sprintf(2), 
  2411 ;;  len             2    0        unsigned int 
  2412 ;;  c               1    6[BANK0 ] char 
  2413 ;;  prec            1    3[BANK0 ] char 
  2414 ;;  flag            1    2[BANK0 ] unsigned char 
  2415 ;; Return value:  Size  Location     Type
  2416 ;;                  2   30[COMRAM] int 
  2417 ;; Registers used:
  2418 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2419 ;; Tracked objects:
  2420 ;;		On entry : 0/0
  2421 ;;		On exit  : 0/0
  2422 ;;		Unchanged: 0/0
  2423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2424 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2425 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2426 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2427 ;;      Totals:         7       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2428 ;;Total ram usage:       14 bytes
  2429 ;; Hardware stack levels used:    1
  2430 ;; Hardware stack levels required when called:    2
  2431 ;; This function calls:
  2432 ;;		___lwdiv
  2433 ;;		___lwmod
  2434 ;; This function is called by:
  2435 ;;		_printStat
  2436 ;;		_printEndGame
  2437 ;; This function uses a non-reentrant model
  2438 ;;
  2439                           
  2440                           	psect	text16
  2441  001086                     __ptext16:
  2442                           	opt stack 0
  2443  001086                     _sprintf:
  2444                           	opt stack 26
  2445                           
  2446                           ;doprnt.c: 494: va_list ap;
  2447                           ;doprnt.c: 499: signed char c;
  2448                           ;doprnt.c: 506: signed char prec;
  2449                           ;doprnt.c: 508: unsigned char flag;
  2450                           ;doprnt.c: 523: union {
  2451                           ;doprnt.c: 524: unsigned long vd;
  2452                           ;doprnt.c: 525: double integ;
  2453                           ;doprnt.c: 526: } tmpval;
  2454                           ;doprnt.c: 528: unsigned int val;
  2455                           ;doprnt.c: 529: unsigned len;
  2456                           ;doprnt.c: 530: const char * cp;
  2457                           ;doprnt.c: 533: *ap = __va_start();
  2458                           
  2459                           ;incstack = 0
  2460  001086  0E23               	movlw	low (?_sprintf+4)
  2461  001088  0100               	movlb	0	; () banked
  2462  00108A  6F60               	movwf	sprintf@ap& (0+255),b
  2463  00108C  0E00               	movlw	high (?_sprintf+4)
  2464  00108E  0100               	movlb	0	; () banked
  2465  001090  6F61               	movwf	(sprintf@ap+1)& (0+255),b
  2466                           
  2467                           ;doprnt.c: 536: while(c = *f++) {
  2468  001092  D0A5               	goto	u1350
  2469  001094                     
  2470                           ; BSR set to: 0
  2471                           ;doprnt.c: 538: if(c != '%')
  2472                           
  2473                           ; BSR set to: 0
  2474  001094  0E25               	movlw	37
  2475  001096  0100               	movlb	0	; () banked
  2476  001098  1966               	xorwf	sprintf@c& (0+255),w,b
  2477  00109A  B4D8               	btfsc	status,2,c
  2478  00109C  D009               	goto	l395
  2479                           
  2480                           ; BSR set to: 0
  2481                           ;doprnt.c: 540: {
  2482                           ;doprnt.c: 541: ((*sp++ = (c)));
  2483  00109E  C01F  FFD9         	movff	sprintf@sp,fsr2l
  2484  0010A2  C020  FFDA         	movff	sprintf@sp+1,fsr2h
  2485  0010A6  C066  FFDF         	movff	sprintf@c,indf2
  2486                           
  2487                           ; BSR set to: 0
  2488  0010AA  4A1F               	infsnz	sprintf@sp,f,c
  2489  0010AC  2A20               	incf	sprintf@sp+1,f,c
  2490                           
  2491                           ;doprnt.c: 542: continue;
  2492  0010AE  D097               	goto	u1350
  2493  0010B0                     l395:
  2494                           
  2495                           ; BSR set to: 0
  2496                           ;doprnt.c: 543: }
  2497                           ;doprnt.c: 548: flag = 0;
  2498                           
  2499                           ; BSR set to: 0
  2500  0010B0  0E00               	movlw	0
  2501  0010B2  0100               	movlb	0	; () banked
  2502  0010B4  6F62               	movwf	sprintf@flag& (0+255),b
  2503                           
  2504                           ; BSR set to: 0
  2505                           
  2506                           ; BSR set to: 0
  2507                           
  2508                           ; BSR set to: 0
  2509                           ;doprnt.c: 822: }
  2510                           
  2511                           ; BSR set to: 0
  2512                           ;doprnt.c: 813: continue;
  2513                           
  2514                           ;doprnt.c: 802: default:
  2515                           
  2516                           ; BSR set to: 0
  2517                           ;doprnt.c: 698: case 'i':
  2518                           ;doprnt.c: 699: break;
  2519                           
  2520                           ; BSR set to: 0
  2521                           
  2522                           ;doprnt.c: 697: case 'd':
  2523                           
  2524                           ; BSR set to: 0
  2525                           ;doprnt.c: 638: goto alldone;
  2526                           
  2527                           ;doprnt.c: 637: case 0:
  2528                           
  2529                           ;doprnt.c: 635: switch(c = *f++) {
  2530  0010B6  C021  FFF6         	movff	sprintf@f,tblptrl
  2531  0010BA  C022  FFF7         	movff	sprintf@f+1,tblptrh
  2532  0010BE  4A21               	infsnz	sprintf@f,f,c
  2533  0010C0  2A22               	incf	sprintf@f+1,f,c
  2534  0010C2                     	if	0	;tblptru may be non-zero
  2535  0010C2                     	endif
  2536  0010C2                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2537  0010C2  0E00               	movlw	low (__mediumconst shr (0+16))
  2538  0010C4  6EF8               	movwf	tblptru,c
  2539  0010C6                     	endif
  2540  0010C6  0008               	tblrd		*
  2541  0010C8  CFF5 F066          	movff	tablat,sprintf@c
  2542  0010CC  0100               	movlb	0	; () banked
  2543  0010CE  5166               	movf	sprintf@c& (0+255),w,b
  2544                           
  2545                           ; Switch size 1, requested type "space"
  2546                           ; Number of cases is 3, Range of values is 0 to 105
  2547                           ; switch strategies available:
  2548                           ; Name         Instructions Cycles
  2549                           ; simple_byte           10     6 (average)
  2550                           ;	Chosen strategy is simple_byte
  2551  0010D0  0A00               	xorlw	0	; case 0
  2552  0010D2  B4D8               	btfsc	status,2,c
  2553  0010D4  D093               	goto	u1360
  2554  0010D6  0A64               	xorlw	100	; case 100
  2555  0010D8  B4D8               	btfsc	status,2,c
  2556  0010DA  D003               	goto	l401
  2557  0010DC  0A0D               	xorlw	13	; case 105
  2558  0010DE  A4D8               	btfss	status,2,c
  2559  0010E0  D07E               	goto	u1350
  2560  0010E2                     l401:
  2561                           
  2562                           ; BSR set to: 0
  2563                           ;doprnt.c: 1253: {
  2564                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2565                           
  2566                           ; BSR set to: 0
  2567  0010E2  C060  FFD9         	movff	sprintf@ap,fsr2l
  2568  0010E6  C061  FFDA         	movff	sprintf@ap+1,fsr2h
  2569  0010EA  CFDE F064          	movff	postinc2,sprintf@val
  2570  0010EE  CFDD F065          	movff	postdec2,sprintf@val+1
  2571                           
  2572                           ; BSR set to: 0
  2573  0010F2  0E02               	movlw	2
  2574  0010F4  0100               	movlb	0	; () banked
  2575  0010F6  2760               	addwf	sprintf@ap& (0+255),f,b
  2576  0010F8  0E00               	movlw	0
  2577  0010FA  2361               	addwfc	(sprintf@ap+1)& (0+255),f,b
  2578                           
  2579                           ; BSR set to: 0
  2580                           ;doprnt.c: 1261: if((int)val < 0) {
  2581  0010FC  0100               	movlb	0	; () banked
  2582  0010FE  AF65               	btfss	(sprintf@val+1)& (0+255),7,b
  2583  001100  D008               	goto	l403
  2584                           
  2585                           ; BSR set to: 0
  2586                           ;doprnt.c: 1262: flag |= 0x03;
  2587  001102  0E03               	movlw	3
  2588  001104  0100               	movlb	0	; () banked
  2589  001106  1362               	iorwf	sprintf@flag& (0+255),f,b
  2590                           
  2591                           ; BSR set to: 0
  2592                           ;doprnt.c: 1263: val = -val;
  2593  001108  0100               	movlb	0	; () banked
  2594  00110A  6D64               	negf	sprintf@val& (0+255),b
  2595  00110C  1F65               	comf	(sprintf@val+1)& (0+255),f,b
  2596  00110E  B0D8               	btfsc	status,0,c
  2597  001110  2B65               	incf	(sprintf@val+1)& (0+255),f,b
  2598  001112                     l403:
  2599                           
  2600                           ; BSR set to: 0
  2601                           ;doprnt.c: 1264: }
  2602                           ;doprnt.c: 1266: }
  2603                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2604                           
  2605                           ; BSR set to: 0
  2606  001112  0E01               	movlw	1
  2607  001114  0100               	movlb	0	; () banked
  2608  001116  6F66               	movwf	sprintf@c& (0+255),b
  2609  001118                     l2232:
  2610                           
  2611                           ; BSR set to: 0
  2612  001118  0E05               	movlw	5
  2613  00111A  0100               	movlb	0	; () banked
  2614  00111C  1966               	xorwf	sprintf@c& (0+255),w,b
  2615  00111E  B4D8               	btfsc	status,2,c
  2616  001120  D019               	goto	u1330
  2617                           
  2618                           ; BSR set to: 0
  2619                           ;doprnt.c: 1306: if(val < dpowers[c])
  2620                           
  2621                           ; BSR set to: 0
  2622                           
  2623                           ; BSR set to: 0
  2624  001122  0100               	movlb	0	; () banked
  2625  001124  5166               	movf	sprintf@c& (0+255),w,b
  2626  001126  0D02               	mullw	2
  2627  001128  0E01               	movlw	low _dpowers
  2628  00112A  24F3               	addwf	prodl,w,c
  2629  00112C  6EF6               	movwf	tblptrl,c
  2630  00112E  0E0E               	movlw	high _dpowers
  2631  001130  20F4               	addwfc	prodh,w,c
  2632  001132  6EF7               	movwf	tblptrh,c
  2633  001134                     	if	1	;There are 3 active tblptr bytes
  2634  001134  6AF8               	clrf	tblptru,c
  2635  001136  0E00               	movlw	low (__mediumconst shr (0+16))
  2636  001138  22F8               	addwfc	tblptru,f,c
  2637  00113A                     	endif
  2638  00113A  0009               	tblrd		*+
  2639  00113C  50F5               	movf	tablat,w,c
  2640  00113E  0100               	movlb	0	; () banked
  2641  001140  5D64               	subwf	sprintf@val& (0+255),w,b
  2642  001142  0009               	tblrd		*+
  2643  001144  50F5               	movf	tablat,w,c
  2644  001146  0100               	movlb	0	; () banked
  2645  001148  5965               	subwfb	(sprintf@val+1)& (0+255),w,b
  2646  00114A  A0D8               	btfss	status,0,c
  2647  00114C  D003               	goto	u1330
  2648                           
  2649                           ; BSR set to: 0
  2650                           
  2651                           ; BSR set to: 0
  2652                           
  2653                           ; BSR set to: 0
  2654                           ;doprnt.c: 1307: break;
  2655  00114E  0100               	movlb	0	; () banked
  2656  001150  2B66               	incf	sprintf@c& (0+255),f,b
  2657  001152  D7E2               	goto	l2232
  2658  001154                     u1330:
  2659                           
  2660                           ; BSR set to: 0
  2661                           ;doprnt.c: 1422: {
  2662                           ;doprnt.c: 1438: if(flag & 0x03)
  2663                           
  2664                           ; BSR set to: 0
  2665  001154  C062  F025         	movff	sprintf@flag,??_sprintf
  2666  001158  0E03               	movlw	3
  2667  00115A  1625               	andwf	??_sprintf,f,c
  2668  00115C  B4D8               	btfsc	status,2,c
  2669  00115E  D008               	goto	l407
  2670                           
  2671                           ; BSR set to: 0
  2672                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  2673  001160  C01F  FFD9         	movff	sprintf@sp,fsr2l
  2674  001164  C020  FFDA         	movff	sprintf@sp+1,fsr2h
  2675  001168  0E2D               	movlw	45
  2676  00116A  6EDF               	movwf	indf2,c
  2677                           
  2678                           ; BSR set to: 0
  2679  00116C  4A1F               	infsnz	sprintf@sp,f,c
  2680  00116E  2A20               	incf	sprintf@sp+1,f,c
  2681  001170                     l407:
  2682                           
  2683                           ; BSR set to: 0
  2684                           ;doprnt.c: 1469: }
  2685                           ;doprnt.c: 1472: prec = c;
  2686                           
  2687                           ; BSR set to: 0
  2688  001170  C066  F063         	movff	sprintf@c,sprintf@prec
  2689                           
  2690                           ;doprnt.c: 1474: while(prec--) {
  2691  001174  D02E               	goto	l408
  2692  001176                     
  2693                           ; BSR set to: 0
  2694                           ;doprnt.c: 1478: {
  2695                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2696                           
  2697                           ; BSR set to: 0
  2698  001176  0100               	movlb	0	; () banked
  2699  001178  5163               	movf	sprintf@prec& (0+255),w,b
  2700  00117A  0D02               	mullw	2
  2701  00117C  0E01               	movlw	low _dpowers
  2702  00117E  24F3               	addwf	prodl,w,c
  2703  001180  6EF6               	movwf	tblptrl,c
  2704  001182  0E0E               	movlw	high _dpowers
  2705  001184  20F4               	addwfc	prodh,w,c
  2706  001186  6EF7               	movwf	tblptrh,c
  2707  001188                     	if	1	;There are 3 active tblptr bytes
  2708  001188  6AF8               	clrf	tblptru,c
  2709  00118A  0E00               	movlw	low (__mediumconst shr (0+16))
  2710  00118C  22F8               	addwfc	tblptru,f,c
  2711  00118E                     	endif
  2712  00118E  0009               	tblrd		*+
  2713  001190  CFF5 F015          	movff	tablat,___lwdiv@divisor
  2714  001194  000A               	tblrd		*-
  2715  001196  CFF5 F016          	movff	tablat,___lwdiv@divisor+1
  2716  00119A  C064  F013         	movff	sprintf@val,___lwdiv@dividend
  2717  00119E  C065  F014         	movff	sprintf@val+1,___lwdiv@dividend+1
  2718  0011A2  EC7C  F00A         	call	___lwdiv	;wreg free
  2719  0011A6  C013  F01A         	movff	?___lwdiv,___lwmod@dividend
  2720  0011AA  C014  F01B         	movff	?___lwdiv+1,___lwmod@dividend+1
  2721  0011AE  0E00               	movlw	0
  2722  0011B0  6E1D               	movwf	___lwmod@divisor+1,c
  2723  0011B2  0E0A               	movlw	10
  2724  0011B4  6E1C               	movwf	___lwmod@divisor,c
  2725  0011B6  EC64  F00B         	call	___lwmod	;wreg free
  2726  0011BA  501A               	movf	?___lwmod,w,c
  2727  0011BC  0F30               	addlw	48
  2728  0011BE  0100               	movlb	0	; () banked
  2729  0011C0  6F66               	movwf	sprintf@c& (0+255),b
  2730                           
  2731                           ; BSR set to: 0
  2732                           ;doprnt.c: 1523: }
  2733                           ;doprnt.c: 1524: ((*sp++ = (c)));
  2734  0011C2  C01F  FFD9         	movff	sprintf@sp,fsr2l
  2735  0011C6  C020  FFDA         	movff	sprintf@sp+1,fsr2h
  2736  0011CA  C066  FFDF         	movff	sprintf@c,indf2
  2737                           
  2738                           ; BSR set to: 0
  2739  0011CE  4A1F               	infsnz	sprintf@sp,f,c
  2740  0011D0  2A20               	incf	sprintf@sp+1,f,c
  2741  0011D2                     l408:
  2742                           
  2743                           ; BSR set to: 0
  2744                           
  2745                           ; BSR set to: 0
  2746  0011D2  0100               	movlb	0	; () banked
  2747  0011D4  0763               	decf	sprintf@prec& (0+255),f,b
  2748  0011D6  0100               	movlb	0	; () banked
  2749  0011D8  2963               	incf	sprintf@prec& (0+255),w,b
  2750  0011DA  A4D8               	btfss	status,2,c
  2751  0011DC  D7CC               	goto	l409
  2752  0011DE                     u1350:
  2753                           
  2754                           ; BSR set to: 0
  2755                           
  2756                           ; BSR set to: 0
  2757                           
  2758                           ; BSR set to: 0
  2759  0011DE  C021  FFF6         	movff	sprintf@f,tblptrl
  2760  0011E2  C022  FFF7         	movff	sprintf@f+1,tblptrh
  2761  0011E6  4A21               	infsnz	sprintf@f,f,c
  2762  0011E8  2A22               	incf	sprintf@f+1,f,c
  2763  0011EA                     	if	0	;tblptru may be non-zero
  2764  0011EA                     	endif
  2765  0011EA                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2766  0011EA  0E00               	movlw	low (__mediumconst shr (0+16))
  2767  0011EC  6EF8               	movwf	tblptru,c
  2768  0011EE                     	endif
  2769  0011EE  0008               	tblrd		*
  2770  0011F0  CFF5 F066          	movff	tablat,sprintf@c
  2771  0011F4  0100               	movlb	0	; () banked
  2772  0011F6  5166               	movf	sprintf@c& (0+255),w,b
  2773  0011F8  A4D8               	btfss	status,2,c
  2774  0011FA  D74C               	goto	l394
  2775  0011FC                     u1360:
  2776                           
  2777                           ; BSR set to: 0
  2778                           ;doprnt.c: 1538: *sp = 0;
  2779                           
  2780                           ; BSR set to: 0
  2781                           
  2782                           ;doprnt.c: 1525: }
  2783                           ;doprnt.c: 1533: }
  2784                           ;doprnt.c: 1535: alldone:
  2785                           
  2786                           ; BSR set to: 0
  2787  0011FC  C01F  FFD9         	movff	sprintf@sp,fsr2l
  2788  001200  C020  FFDA         	movff	sprintf@sp+1,fsr2h
  2789  001204  0E00               	movlw	0
  2790  001206  6EDF               	movwf	indf2,c
  2791  001208  0012               	return	
  2792  00120A                     __end_of_sprintf:
  2793                           	opt stack 0
  2794                           tblptru	equ	0xFF8
  2795                           tblptrh	equ	0xFF7
  2796                           tblptrl	equ	0xFF6
  2797                           tablat	equ	0xFF5
  2798                           prodh	equ	0xFF4
  2799                           prodl	equ	0xFF3
  2800                           intcon	equ	0xFF2
  2801                           intcon2	equ	0xFF1
  2802                           intcon3	equ	0xFF0
  2803                           postinc0	equ	0xFEE
  2804                           wreg	equ	0xFE8
  2805                           postdec1	equ	0xFE5
  2806                           fsr1l	equ	0xFE1
  2807                           indf2	equ	0xFDF
  2808                           postinc2	equ	0xFDE
  2809                           postdec2	equ	0xFDD
  2810                           fsr2h	equ	0xFDA
  2811                           fsr2l	equ	0xFD9
  2812                           status	equ	0xFD8
  2813                           
  2814 ;; *************** function ___lwmod *****************
  2815 ;; Defined at:
  2816 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lwmod.c"
  2817 ;; Parameters:    Size  Location     Type
  2818 ;;  dividend        2   25[COMRAM] unsigned int 
  2819 ;;  divisor         2   27[COMRAM] unsigned int 
  2820 ;; Auto vars:     Size  Location     Type
  2821 ;;  counter         1   29[COMRAM] unsigned char 
  2822 ;; Return value:  Size  Location     Type
  2823 ;;                  2   25[COMRAM] unsigned int 
  2824 ;; Registers used:
  2825 ;;		wreg, status,2, status,0
  2826 ;; Tracked objects:
  2827 ;;		On entry : 0/0
  2828 ;;		On exit  : 0/0
  2829 ;;		Unchanged: 0/0
  2830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2831 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2832 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2833 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2834 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2835 ;;Total ram usage:        5 bytes
  2836 ;; Hardware stack levels used:    1
  2837 ;; Hardware stack levels required when called:    1
  2838 ;; This function calls:
  2839 ;;		Nothing
  2840 ;; This function is called by:
  2841 ;;		_sprintf
  2842 ;; This function uses a non-reentrant model
  2843 ;;
  2844                           
  2845                           	psect	text17
  2846  0016C8                     __ptext17:
  2847                           	opt stack 0
  2848  0016C8                     ___lwmod:
  2849                           	opt stack 26
  2850                           
  2851                           ; BSR set to: 0
  2852                           ;incstack = 0
  2853  0016C8  501C               	movf	___lwmod@divisor,w,c
  2854  0016CA  101D               	iorwf	___lwmod@divisor+1,w,c
  2855  0016CC  B4D8               	btfsc	status,2,c
  2856  0016CE  D018               	goto	l831
  2857  0016D0  0E01               	movlw	1
  2858  0016D2  6E1E               	movwf	___lwmod@counter,c
  2859  0016D4  D004               	goto	l826
  2860  0016D6  90D8               	bcf	status,0,c
  2861  0016D8  361C               	rlcf	___lwmod@divisor,f,c
  2862  0016DA  361D               	rlcf	___lwmod@divisor+1,f,c
  2863  0016DC  2A1E               	incf	___lwmod@counter,f,c
  2864  0016DE                     l826:
  2865  0016DE  AE1D               	btfss	___lwmod@divisor+1,7,c
  2866  0016E0  D7FA               	goto	l827
  2867  0016E2                     u1240:
  2868  0016E2  501C               	movf	___lwmod@divisor,w,c
  2869  0016E4  5C1A               	subwf	___lwmod@dividend,w,c
  2870  0016E6  501D               	movf	___lwmod@divisor+1,w,c
  2871  0016E8  581B               	subwfb	___lwmod@dividend+1,w,c
  2872  0016EA  A0D8               	btfss	status,0,c
  2873  0016EC  D004               	goto	l830
  2874  0016EE  501C               	movf	___lwmod@divisor,w,c
  2875  0016F0  5E1A               	subwf	___lwmod@dividend,f,c
  2876  0016F2  501D               	movf	___lwmod@divisor+1,w,c
  2877  0016F4  5A1B               	subwfb	___lwmod@dividend+1,f,c
  2878  0016F6                     l830:
  2879  0016F6  90D8               	bcf	status,0,c
  2880  0016F8  321D               	rrcf	___lwmod@divisor+1,f,c
  2881  0016FA  321C               	rrcf	___lwmod@divisor,f,c
  2882  0016FC  2E1E               	decfsz	___lwmod@counter,f,c
  2883  0016FE  D7F1               	goto	u1240
  2884  001700                     l831:
  2885  001700  C01A  F01A         	movff	___lwmod@dividend,?___lwmod
  2886  001704  C01B  F01B         	movff	___lwmod@dividend+1,?___lwmod+1
  2887  001708  0012               	return		;funcret
  2888  00170A                     __end_of___lwmod:
  2889                           	opt stack 0
  2890                           tblptru	equ	0xFF8
  2891                           tblptrh	equ	0xFF7
  2892                           tblptrl	equ	0xFF6
  2893                           tablat	equ	0xFF5
  2894                           prodh	equ	0xFF4
  2895                           prodl	equ	0xFF3
  2896                           intcon	equ	0xFF2
  2897                           intcon2	equ	0xFF1
  2898                           intcon3	equ	0xFF0
  2899                           postinc0	equ	0xFEE
  2900                           wreg	equ	0xFE8
  2901                           postdec1	equ	0xFE5
  2902                           fsr1l	equ	0xFE1
  2903                           indf2	equ	0xFDF
  2904                           postinc2	equ	0xFDE
  2905                           postdec2	equ	0xFDD
  2906                           fsr2h	equ	0xFDA
  2907                           fsr2l	equ	0xFD9
  2908                           status	equ	0xFD8
  2909                           
  2910 ;; *************** function ___lwdiv *****************
  2911 ;; Defined at:
  2912 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lwdiv.c"
  2913 ;; Parameters:    Size  Location     Type
  2914 ;;  dividend        2   18[COMRAM] unsigned int 
  2915 ;;  divisor         2   20[COMRAM] unsigned int 
  2916 ;; Auto vars:     Size  Location     Type
  2917 ;;  quotient        2   23[COMRAM] unsigned int 
  2918 ;;  counter         1   22[COMRAM] unsigned char 
  2919 ;; Return value:  Size  Location     Type
  2920 ;;                  2   18[COMRAM] unsigned int 
  2921 ;; Registers used:
  2922 ;;		wreg, status,2, status,0
  2923 ;; Tracked objects:
  2924 ;;		On entry : 0/0
  2925 ;;		On exit  : 0/0
  2926 ;;		Unchanged: 0/0
  2927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2928 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2929 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2930 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2931 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2932 ;;Total ram usage:        7 bytes
  2933 ;; Hardware stack levels used:    1
  2934 ;; Hardware stack levels required when called:    1
  2935 ;; This function calls:
  2936 ;;		Nothing
  2937 ;; This function is called by:
  2938 ;;		_sprintf
  2939 ;; This function uses a non-reentrant model
  2940 ;;
  2941                           
  2942                           	psect	text18
  2943  0014F8                     __ptext18:
  2944                           	opt stack 0
  2945  0014F8                     ___lwdiv:
  2946                           	opt stack 26
  2947                           
  2948                           ;incstack = 0
  2949  0014F8  0E00               	movlw	0
  2950  0014FA  6E19               	movwf	___lwdiv@quotient+1,c
  2951  0014FC  0E00               	movlw	0
  2952  0014FE  6E18               	movwf	___lwdiv@quotient,c
  2953  001500  5015               	movf	___lwdiv@divisor,w,c
  2954  001502  1016               	iorwf	___lwdiv@divisor+1,w,c
  2955  001504  B4D8               	btfsc	status,2,c
  2956  001506  D01C               	goto	l821
  2957  001508  0E01               	movlw	1
  2958  00150A  6E17               	movwf	___lwdiv@counter,c
  2959  00150C  D004               	goto	l816
  2960  00150E  90D8               	bcf	status,0,c
  2961  001510  3615               	rlcf	___lwdiv@divisor,f,c
  2962  001512  3616               	rlcf	___lwdiv@divisor+1,f,c
  2963  001514  2A17               	incf	___lwdiv@counter,f,c
  2964  001516                     l816:
  2965  001516  AE16               	btfss	___lwdiv@divisor+1,7,c
  2966  001518  D7FA               	goto	l817
  2967  00151A                     u1210:
  2968  00151A  90D8               	bcf	status,0,c
  2969  00151C  3618               	rlcf	___lwdiv@quotient,f,c
  2970  00151E  3619               	rlcf	___lwdiv@quotient+1,f,c
  2971  001520  5015               	movf	___lwdiv@divisor,w,c
  2972  001522  5C13               	subwf	___lwdiv@dividend,w,c
  2973  001524  5016               	movf	___lwdiv@divisor+1,w,c
  2974  001526  5814               	subwfb	___lwdiv@dividend+1,w,c
  2975  001528  A0D8               	btfss	status,0,c
  2976  00152A  D005               	goto	l820
  2977  00152C  5015               	movf	___lwdiv@divisor,w,c
  2978  00152E  5E13               	subwf	___lwdiv@dividend,f,c
  2979  001530  5016               	movf	___lwdiv@divisor+1,w,c
  2980  001532  5A14               	subwfb	___lwdiv@dividend+1,f,c
  2981  001534  8018               	bsf	___lwdiv@quotient,0,c
  2982  001536                     l820:
  2983  001536  90D8               	bcf	status,0,c
  2984  001538  3216               	rrcf	___lwdiv@divisor+1,f,c
  2985  00153A  3215               	rrcf	___lwdiv@divisor,f,c
  2986  00153C  2E17               	decfsz	___lwdiv@counter,f,c
  2987  00153E  D7ED               	goto	u1210
  2988  001540                     l821:
  2989  001540  C018  F013         	movff	___lwdiv@quotient,?___lwdiv
  2990  001544  C019  F014         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2991  001548  0012               	return		;funcret
  2992  00154A                     __end_of___lwdiv:
  2993                           	opt stack 0
  2994                           tblptru	equ	0xFF8
  2995                           tblptrh	equ	0xFF7
  2996                           tblptrl	equ	0xFF6
  2997                           tablat	equ	0xFF5
  2998                           prodh	equ	0xFF4
  2999                           prodl	equ	0xFF3
  3000                           intcon	equ	0xFF2
  3001                           intcon2	equ	0xFF1
  3002                           intcon3	equ	0xFF0
  3003                           postinc0	equ	0xFEE
  3004                           wreg	equ	0xFE8
  3005                           postdec1	equ	0xFE5
  3006                           fsr1l	equ	0xFE1
  3007                           indf2	equ	0xFDF
  3008                           postinc2	equ	0xFDE
  3009                           postdec2	equ	0xFDD
  3010                           fsr2h	equ	0xFDA
  3011                           fsr2l	equ	0xFD9
  3012                           status	equ	0xFD8
  3013                           
  3014 ;; *************** function _putStringLCD *****************
  3015 ;; Defined at:
  3016 ;;		line 49 in file "LCD_SPI.c"
  3017 ;; Parameters:    Size  Location     Type
  3018 ;;  input           2   22[COMRAM] PTR const unsigned char 
  3019 ;;		 -> STR_9(10), STR_8(22), printEndGame@statArray(3), STR_6(3), 
  3020 ;;		 -> STR_5(2), printStat@statArray(3), STR_3(20), STR_2(16), 
  3021 ;;		 -> STR_1(20), 
  3022 ;; Auto vars:     Size  Location     Type
  3023 ;;  i               2   26[COMRAM] int 
  3024 ;; Return value:  Size  Location     Type
  3025 ;;                  1    wreg      void 
  3026 ;; Registers used:
  3027 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3028 ;; Tracked objects:
  3029 ;;		On entry : 0/0
  3030 ;;		On exit  : 0/0
  3031 ;;		Unchanged: 0/0
  3032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3033 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3034 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3035 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3036 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3037 ;;Total ram usage:        6 bytes
  3038 ;; Hardware stack levels used:    1
  3039 ;; Hardware stack levels required when called:    4
  3040 ;; This function calls:
  3041 ;;		_putchLCD
  3042 ;; This function is called by:
  3043 ;;		_printMBED
  3044 ;;		_printStartGame
  3045 ;;		_printStat
  3046 ;;		_printEndGame
  3047 ;; This function uses a non-reentrant model
  3048 ;;
  3049                           
  3050                           	psect	text19
  3051  0012E6                     __ptext19:
  3052                           	opt stack 0
  3053  0012E6                     _putStringLCD:
  3054                           	opt stack 25
  3055                           
  3056                           ;LCD_SPI.c: 51: int i;
  3057                           ;LCD_SPI.c: 52: for (i = 0; input[i] != '\0'; i++)
  3058                           
  3059                           ;incstack = 0
  3060  0012E6  0E00               	movlw	0
  3061  0012E8  6E1C               	movwf	putStringLCD@i+1,c
  3062  0012EA  0E00               	movlw	0
  3063  0012EC  6E1B               	movwf	putStringLCD@i,c
  3064  0012EE  D01B               	goto	l348
  3065  0012F0                     
  3066                           ;LCD_SPI.c: 53: {
  3067                           ;LCD_SPI.c: 54: putchLCD(input[i]);
  3068  0012F0  501B               	movf	putStringLCD@i,w,c
  3069  0012F2  2417               	addwf	putStringLCD@input,w,c
  3070  0012F4  6E19               	movwf	??_putStringLCD& (0+255),c
  3071  0012F6  501C               	movf	putStringLCD@i+1,w,c
  3072  0012F8  2018               	addwfc	putStringLCD@input+1,w,c
  3073  0012FA  6E1A               	movwf	(??_putStringLCD+1)& (0+255),c
  3074  0012FC  C019  FFF6         	movff	??_putStringLCD,tblptrl
  3075  001300  C01A  FFF7         	movff	??_putStringLCD+1,tblptrh
  3076  001304  0E00               	movlw	low (__smallconst shr (0+16))
  3077  001306  6EF8               	movwf	tblptru,c
  3078  001308  0E0D               	movlw	(high __ramtop+-1)
  3079  00130A  64F7               	cpfsgt	tblptrh,c
  3080  00130C  D003               	bra	u1267
  3081  00130E  0008               	tblrd		*
  3082  001310  50F5               	movf	tablat,w,c
  3083  001312  D005               	bra	u1260
  3084  001314                     u1267:
  3085  001314  CFF6 FFE9          	movff	tblptrl,fsr0l
  3086  001318  CFF7 FFEA          	movff	tblptrh,fsr0h
  3087  00131C  50EF               	movf	indf0,w,c
  3088  00131E                     u1260:
  3089  00131E  ECFC  F00B         	call	_putchLCD
  3090  001322  4A1B               	infsnz	putStringLCD@i,f,c
  3091  001324  2A1C               	incf	putStringLCD@i+1,f,c
  3092  001326                     l348:
  3093  001326  501B               	movf	putStringLCD@i,w,c
  3094  001328  2417               	addwf	putStringLCD@input,w,c
  3095  00132A  6E19               	movwf	??_putStringLCD& (0+255),c
  3096  00132C  501C               	movf	putStringLCD@i+1,w,c
  3097  00132E  2018               	addwfc	putStringLCD@input+1,w,c
  3098  001330  6E1A               	movwf	(??_putStringLCD+1)& (0+255),c
  3099  001332  C019  FFF6         	movff	??_putStringLCD,tblptrl
  3100  001336  C01A  FFF7         	movff	??_putStringLCD+1,tblptrh
  3101  00133A  0E00               	movlw	low (__smallconst shr (0+16))
  3102  00133C  6EF8               	movwf	tblptru,c
  3103  00133E  0E0D               	movlw	(high __ramtop+-1)
  3104  001340  64F7               	cpfsgt	tblptrh,c
  3105  001342  D003               	bra	u1277
  3106  001344  0008               	tblrd		*
  3107  001346  50F5               	movf	tablat,w,c
  3108  001348  D005               	bra	u1270
  3109  00134A                     u1277:
  3110  00134A  CFF6 FFE9          	movff	tblptrl,fsr0l
  3111  00134E  CFF7 FFEA          	movff	tblptrh,fsr0h
  3112  001352  50EF               	movf	indf0,w,c
  3113  001354                     u1270:
  3114  001354  0900               	iorlw	0
  3115  001356  B4D8               	btfsc	status,2,c
  3116  001358  0012               	return	
  3117  00135A  D7CA               	goto	l349
  3118  00135C                     __end_of_putStringLCD:
  3119                           	opt stack 0
  3120                           tblptru	equ	0xFF8
  3121                           tblptrh	equ	0xFF7
  3122                           tblptrl	equ	0xFF6
  3123                           tablat	equ	0xFF5
  3124                           prodh	equ	0xFF4
  3125                           prodl	equ	0xFF3
  3126                           intcon	equ	0xFF2
  3127                           intcon2	equ	0xFF1
  3128                           intcon3	equ	0xFF0
  3129                           indf0	equ	0xFEF
  3130                           postinc0	equ	0xFEE
  3131                           fsr0h	equ	0xFEA
  3132                           fsr0l	equ	0xFE9
  3133                           wreg	equ	0xFE8
  3134                           postdec1	equ	0xFE5
  3135                           fsr1l	equ	0xFE1
  3136                           indf2	equ	0xFDF
  3137                           postinc2	equ	0xFDE
  3138                           postdec2	equ	0xFDD
  3139                           fsr2h	equ	0xFDA
  3140                           fsr2l	equ	0xFD9
  3141                           status	equ	0xFD8
  3142                           
  3143 ;; *************** function _putchLCD *****************
  3144 ;; Defined at:
  3145 ;;		line 58 in file "LCD_SPI.c"
  3146 ;; Parameters:    Size  Location     Type
  3147 ;;  input           1    wreg     unsigned char 
  3148 ;; Auto vars:     Size  Location     Type
  3149 ;;  input           1   21[COMRAM] unsigned char 
  3150 ;; Return value:  Size  Location     Type
  3151 ;;                  1    wreg      void 
  3152 ;; Registers used:
  3153 ;;		wreg, status,2, status,0, cstack
  3154 ;; Tracked objects:
  3155 ;;		On entry : 0/0
  3156 ;;		On exit  : 0/0
  3157 ;;		Unchanged: 0/0
  3158 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3159 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3160 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3161 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3162 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3163 ;;Total ram usage:        1 bytes
  3164 ;; Hardware stack levels used:    1
  3165 ;; Hardware stack levels required when called:    3
  3166 ;; This function calls:
  3167 ;;		_fliplr
  3168 ;;		_readBusyFlag
  3169 ;;		_spi_Send_Read
  3170 ;; This function is called by:
  3171 ;;		_putStringLCD
  3172 ;; This function uses a non-reentrant model
  3173 ;;
  3174                           
  3175                           	psect	text20
  3176  0017F8                     __ptext20:
  3177                           	opt stack 0
  3178  0017F8                     _putchLCD:
  3179                           	opt stack 25
  3180                           
  3181                           ;incstack = 0
  3182                           ;putchLCD@input stored from wreg
  3183  0017F8  6E16               	movwf	putchLCD@input,c
  3184                           
  3185                           ;LCD_SPI.c: 60: input = fliplr(input);
  3186  0017FA  5016               	movf	putchLCD@input,w,c
  3187  0017FC  ECA5  F00A         	call	_fliplr
  3188  001800  6E16               	movwf	putchLCD@input,c
  3189  001802  ECD2  F00C         	call	_readBusyFlag	;wreg free
  3190  001806  0900               	iorlw	0
  3191  001808  A4D8               	btfss	status,2,c
  3192  00180A  D7FB               	goto	l355
  3193                           
  3194                           ;LCD_SPI.c: 63: LATDbits.LATD3 = 0;
  3195  00180C  968C               	bcf	3980,3,c	;volatile
  3196                           
  3197                           ;LCD_SPI.c: 64: spi_Send_Read(0xFA);
  3198  00180E  0EFA               	movlw	250
  3199  001810  ECE9  F00C         	call	_spi_Send_Read
  3200                           
  3201                           ;LCD_SPI.c: 65: spi_Send_Read(input & 0xF0);
  3202  001814  5016               	movf	putchLCD@input,w,c
  3203  001816  0BF0               	andlw	240
  3204  001818  ECE9  F00C         	call	_spi_Send_Read
  3205                           
  3206                           ;LCD_SPI.c: 66: spi_Send_Read(input << 4);
  3207  00181C  3816               	swapf	putchLCD@input,w,c
  3208  00181E  0BF0               	andlw	240
  3209  001820  ECE9  F00C         	call	_spi_Send_Read
  3210                           
  3211                           ;LCD_SPI.c: 67: LATDbits.LATD3 = 1;
  3212  001824  868C               	bsf	3980,3,c	;volatile
  3213  001826  0012               	return		;funcret
  3214  001828                     __end_of_putchLCD:
  3215                           	opt stack 0
  3216                           tblptru	equ	0xFF8
  3217                           tblptrh	equ	0xFF7
  3218                           tblptrl	equ	0xFF6
  3219                           tablat	equ	0xFF5
  3220                           prodh	equ	0xFF4
  3221                           prodl	equ	0xFF3
  3222                           intcon	equ	0xFF2
  3223                           intcon2	equ	0xFF1
  3224                           intcon3	equ	0xFF0
  3225                           indf0	equ	0xFEF
  3226                           postinc0	equ	0xFEE
  3227                           fsr0h	equ	0xFEA
  3228                           fsr0l	equ	0xFE9
  3229                           wreg	equ	0xFE8
  3230                           postdec1	equ	0xFE5
  3231                           fsr1l	equ	0xFE1
  3232                           indf2	equ	0xFDF
  3233                           postinc2	equ	0xFDE
  3234                           postdec2	equ	0xFDD
  3235                           fsr2h	equ	0xFDA
  3236                           fsr2l	equ	0xFD9
  3237                           status	equ	0xFD8
  3238                           
  3239 ;; *************** function _moveCursor *****************
  3240 ;; Defined at:
  3241 ;;		line 79 in file "LCD_SPI.c"
  3242 ;; Parameters:    Size  Location     Type
  3243 ;;  row             2   21[COMRAM] int 
  3244 ;;  col             2   23[COMRAM] int 
  3245 ;; Auto vars:     Size  Location     Type
  3246 ;;  address         1   25[COMRAM] unsigned char 
  3247 ;; Return value:  Size  Location     Type
  3248 ;;                  1    wreg      void 
  3249 ;; Registers used:
  3250 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3251 ;; Tracked objects:
  3252 ;;		On entry : 0/0
  3253 ;;		On exit  : 0/0
  3254 ;;		Unchanged: 0/0
  3255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3256 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3257 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3258 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3259 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3260 ;;Total ram usage:        5 bytes
  3261 ;; Hardware stack levels used:    1
  3262 ;; Hardware stack levels required when called:    3
  3263 ;; This function calls:
  3264 ;;		_fliplr
  3265 ;;		_readBusyFlag
  3266 ;;		_spi_Send_Read
  3267 ;; This function is called by:
  3268 ;;		_printMBED
  3269 ;;		_printStartGame
  3270 ;;		_printRemBullets
  3271 ;;		_printRemTime
  3272 ;;		_printPoints
  3273 ;;		_printEndGame
  3274 ;; This function uses a non-reentrant model
  3275 ;;
  3276                           
  3277                           	psect	text21
  3278  0015EE                     __ptext21:
  3279                           	opt stack 0
  3280  0015EE                     _moveCursor:
  3281                           	opt stack 26
  3282                           
  3283                           ;LCD_SPI.c: 81: char address = row * 20 + col;
  3284                           
  3285                           ;incstack = 0
  3286  0015EE  5016               	movf	moveCursor@row,w,c
  3287  0015F0  0D14               	mullw	20
  3288  0015F2  50F3               	movf	prodl,w,c
  3289  0015F4  2418               	addwf	moveCursor@col,w,c
  3290  0015F6  6E1A               	movwf	moveCursor@address,c
  3291                           
  3292                           ;LCD_SPI.c: 82: if (row >= 2)
  3293  0015F8  BE17               	btfsc	moveCursor@row+1,7,c
  3294  0015FA  D008               	goto	l363
  3295  0015FC  5017               	movf	moveCursor@row+1,w,c
  3296  0015FE  E104               	bnz	u1410
  3297  001600  0E02               	movlw	2
  3298  001602  5C16               	subwf	moveCursor@row,w,c
  3299  001604  A0D8               	btfss	status,0,c
  3300  001606  D002               	goto	l363
  3301  001608                     u1410:
  3302                           
  3303                           ;LCD_SPI.c: 83: {
  3304                           ;LCD_SPI.c: 84: address += 24;
  3305  001608  0E18               	movlw	24
  3306  00160A  261A               	addwf	moveCursor@address,f,c
  3307  00160C                     l363:
  3308                           
  3309                           ;LCD_SPI.c: 85: }
  3310                           ;LCD_SPI.c: 86: address = fliplr(address);
  3311  00160C  501A               	movf	moveCursor@address,w,c
  3312  00160E  ECA5  F00A         	call	_fliplr
  3313  001612  6E1A               	movwf	moveCursor@address,c
  3314  001614  ECD2  F00C         	call	_readBusyFlag	;wreg free
  3315  001618  0900               	iorlw	0
  3316  00161A  A4D8               	btfss	status,2,c
  3317  00161C  D7FB               	goto	l365
  3318                           
  3319                           ;LCD_SPI.c: 88: LATDbits.LATD3 = 0;
  3320  00161E  968C               	bcf	3980,3,c	;volatile
  3321                           
  3322                           ;LCD_SPI.c: 89: spi_Send_Read(0xF8);
  3323  001620  0EF8               	movlw	248
  3324  001622  ECE9  F00C         	call	_spi_Send_Read
  3325                           
  3326                           ;LCD_SPI.c: 90: spi_Send_Read(address & 0xF0);
  3327  001626  501A               	movf	moveCursor@address,w,c
  3328  001628  0BF0               	andlw	240
  3329  00162A  ECE9  F00C         	call	_spi_Send_Read
  3330                           
  3331                           ;LCD_SPI.c: 91: spi_Send_Read((address << 4) | 0x10);
  3332  00162E  381A               	swapf	moveCursor@address,w,c
  3333  001630  0BF0               	andlw	240
  3334  001632  0910               	iorlw	16
  3335  001634  ECE9  F00C         	call	_spi_Send_Read
  3336  001638  0012               	return		;funcret
  3337  00163A                     __end_of_moveCursor:
  3338                           	opt stack 0
  3339                           tblptru	equ	0xFF8
  3340                           tblptrh	equ	0xFF7
  3341                           tblptrl	equ	0xFF6
  3342                           tablat	equ	0xFF5
  3343                           prodh	equ	0xFF4
  3344                           prodl	equ	0xFF3
  3345                           intcon	equ	0xFF2
  3346                           intcon2	equ	0xFF1
  3347                           intcon3	equ	0xFF0
  3348                           indf0	equ	0xFEF
  3349                           postinc0	equ	0xFEE
  3350                           fsr0h	equ	0xFEA
  3351                           fsr0l	equ	0xFE9
  3352                           wreg	equ	0xFE8
  3353                           postdec1	equ	0xFE5
  3354                           fsr1l	equ	0xFE1
  3355                           indf2	equ	0xFDF
  3356                           postinc2	equ	0xFDE
  3357                           postdec2	equ	0xFDD
  3358                           fsr2h	equ	0xFDA
  3359                           fsr2l	equ	0xFD9
  3360                           status	equ	0xFD8
  3361                           
  3362 ;; *************** function _fliplr *****************
  3363 ;; Defined at:
  3364 ;;		line 70 in file "LCD_SPI.c"
  3365 ;; Parameters:    Size  Location     Type
  3366 ;;  input           1    wreg     unsigned char 
  3367 ;; Auto vars:     Size  Location     Type
  3368 ;;  input           1   20[COMRAM] unsigned char 
  3369 ;; Return value:  Size  Location     Type
  3370 ;;                  1    wreg      unsigned char 
  3371 ;; Registers used:
  3372 ;;		wreg, status,2, status,0
  3373 ;; Tracked objects:
  3374 ;;		On entry : 0/0
  3375 ;;		On exit  : 0/0
  3376 ;;		Unchanged: 0/0
  3377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3378 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3379 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3380 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3381 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3382 ;;Total ram usage:        3 bytes
  3383 ;; Hardware stack levels used:    1
  3384 ;; Hardware stack levels required when called:    1
  3385 ;; This function calls:
  3386 ;;		Nothing
  3387 ;; This function is called by:
  3388 ;;		_putchLCD
  3389 ;;		_moveCursor
  3390 ;; This function uses a non-reentrant model
  3391 ;;
  3392                           
  3393                           	psect	text22
  3394  00154A                     __ptext22:
  3395                           	opt stack 0
  3396  00154A                     _fliplr:
  3397                           	opt stack 26
  3398                           
  3399                           ;incstack = 0
  3400                           ;fliplr@input stored from wreg
  3401  00154A  6E15               	movwf	fliplr@input,c
  3402                           
  3403                           ;LCD_SPI.c: 73: input = (input & 0xF0) >> 4 | (input & 0x0F) << 4;
  3404  00154C  C015  F013         	movff	fliplr@input,??_fliplr
  3405  001550  0E0F               	movlw	15
  3406  001552  1613               	andwf	??_fliplr,f,c
  3407  001554  3A13               	swapf	??_fliplr,f,c
  3408  001556  0EF0               	movlw	240
  3409  001558  1613               	andwf	??_fliplr,f,c
  3410  00155A  3815               	swapf	fliplr@input,w,c
  3411  00155C  0B0F               	andlw	15
  3412  00155E  0B0F               	andlw	15
  3413  001560  1013               	iorwf	??_fliplr,w,c
  3414  001562  6E15               	movwf	fliplr@input,c
  3415                           
  3416                           ;LCD_SPI.c: 74: input = (input & 0xCC) >> 2 | (input & 0x33) << 2;
  3417  001564  C015  F013         	movff	fliplr@input,??_fliplr
  3418  001568  0E33               	movlw	51
  3419  00156A  1613               	andwf	??_fliplr,f,c
  3420  00156C  90D8               	bcf	status,0,c
  3421  00156E  3613               	rlcf	??_fliplr,f,c
  3422  001570  90D8               	bcf	status,0,c
  3423  001572  3613               	rlcf	??_fliplr,f,c
  3424  001574  4015               	rrncf	fliplr@input,w,c
  3425  001576  42E8               	rrncf	wreg,f,c
  3426  001578  0B3F               	andlw	63
  3427  00157A  0B33               	andlw	51
  3428  00157C  1013               	iorwf	??_fliplr,w,c
  3429  00157E  6E15               	movwf	fliplr@input,c
  3430                           
  3431                           ;LCD_SPI.c: 75: input = (input & 0xAA) >> 1 | (input & 0x55) << 1;
  3432  001580  C015  F013         	movff	fliplr@input,??_fliplr
  3433  001584  0E55               	movlw	85
  3434  001586  1613               	andwf	??_fliplr,f,c
  3435  001588  90D8               	bcf	status,0,c
  3436  00158A  3413               	rlcf	??_fliplr,w,c
  3437  00158C  6E14               	movwf	(??_fliplr+1)& (0+255),c
  3438  00158E  90D8               	bcf	status,0,c
  3439  001590  3015               	rrcf	fliplr@input,w,c
  3440  001592  0B55               	andlw	85
  3441  001594  1014               	iorwf	??_fliplr+1,w,c
  3442  001596  6E15               	movwf	fliplr@input,c
  3443                           
  3444                           ;LCD_SPI.c: 77: return input;
  3445  001598  5015               	movf	fliplr@input,w,c
  3446  00159A  0012               	return	
  3447  00159C                     __end_of_fliplr:
  3448                           	opt stack 0
  3449                           tblptru	equ	0xFF8
  3450                           tblptrh	equ	0xFF7
  3451                           tblptrl	equ	0xFF6
  3452                           tablat	equ	0xFF5
  3453                           prodh	equ	0xFF4
  3454                           prodl	equ	0xFF3
  3455                           intcon	equ	0xFF2
  3456                           intcon2	equ	0xFF1
  3457                           intcon3	equ	0xFF0
  3458                           indf0	equ	0xFEF
  3459                           postinc0	equ	0xFEE
  3460                           fsr0h	equ	0xFEA
  3461                           fsr0l	equ	0xFE9
  3462                           wreg	equ	0xFE8
  3463                           postdec1	equ	0xFE5
  3464                           fsr1l	equ	0xFE1
  3465                           indf2	equ	0xFDF
  3466                           postinc2	equ	0xFDE
  3467                           postdec2	equ	0xFDD
  3468                           fsr2h	equ	0xFDA
  3469                           fsr2l	equ	0xFD9
  3470                           status	equ	0xFD8
  3471                           
  3472 ;; *************** function _initialisation_LCD *****************
  3473 ;; Defined at:
  3474 ;;		line 150 in file "LCD_SPI.c"
  3475 ;; Parameters:    Size  Location     Type
  3476 ;;		None
  3477 ;; Auto vars:     Size  Location     Type
  3478 ;;		None
  3479 ;; Return value:  Size  Location     Type
  3480 ;;                  1    wreg      void 
  3481 ;; Registers used:
  3482 ;;		wreg, status,2, status,0, cstack
  3483 ;; Tracked objects:
  3484 ;;		On entry : 0/0
  3485 ;;		On exit  : 0/0
  3486 ;;		Unchanged: 0/0
  3487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3488 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3489 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3490 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3491 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3492 ;;Total ram usage:        0 bytes
  3493 ;; Hardware stack levels used:    1
  3494 ;; Hardware stack levels required when called:    4
  3495 ;; This function calls:
  3496 ;;		_clearDisplay
  3497 ;;		_displayCtrl
  3498 ;;		_initialisation_PORT
  3499 ;;		_initialisation_SPI
  3500 ;; This function is called by:
  3501 ;;		_main
  3502 ;; This function uses a non-reentrant model
  3503 ;;
  3504                           
  3505                           	psect	text23
  3506  001988                     __ptext23:
  3507                           	opt stack 0
  3508  001988                     _initialisation_LCD:
  3509                           	opt stack 26
  3510                           
  3511                           ;LCD_SPI.c: 152: initialisation_PORT();
  3512                           
  3513                           ;incstack = 0
  3514  001988  EC85  F00B         	call	_initialisation_PORT	;wreg free
  3515                           
  3516                           ;LCD_SPI.c: 153: initialisation_SPI();
  3517  00198C  ECA5  F00B         	call	_initialisation_SPI	;wreg free
  3518                           
  3519                           ;LCD_SPI.c: 154: clearDisplay();
  3520  001990  EC86  F00C         	call	_clearDisplay	;wreg free
  3521                           
  3522                           ;LCD_SPI.c: 155: displayCtrl(1,1,0);
  3523  001994  0E01               	movlw	1
  3524  001996  6E15               	movwf	displayCtrl@cursor,c
  3525  001998  0E00               	movlw	0
  3526  00199A  6E16               	movwf	displayCtrl@blink,c
  3527  00199C  0E01               	movlw	1
  3528  00199E  EC42  F00B         	call	_displayCtrl
  3529  0019A2  0012               	return		;funcret
  3530  0019A4                     __end_of_initialisation_LCD:
  3531                           	opt stack 0
  3532                           tblptru	equ	0xFF8
  3533                           tblptrh	equ	0xFF7
  3534                           tblptrl	equ	0xFF6
  3535                           tablat	equ	0xFF5
  3536                           prodh	equ	0xFF4
  3537                           prodl	equ	0xFF3
  3538                           intcon	equ	0xFF2
  3539                           intcon2	equ	0xFF1
  3540                           intcon3	equ	0xFF0
  3541                           indf0	equ	0xFEF
  3542                           postinc0	equ	0xFEE
  3543                           fsr0h	equ	0xFEA
  3544                           fsr0l	equ	0xFE9
  3545                           wreg	equ	0xFE8
  3546                           postdec1	equ	0xFE5
  3547                           fsr1l	equ	0xFE1
  3548                           indf2	equ	0xFDF
  3549                           postinc2	equ	0xFDE
  3550                           postdec2	equ	0xFDD
  3551                           fsr2h	equ	0xFDA
  3552                           fsr2l	equ	0xFD9
  3553                           status	equ	0xFD8
  3554                           
  3555 ;; *************** function _initialisation_SPI *****************
  3556 ;; Defined at:
  3557 ;;		line 113 in file "LCD_SPI.c"
  3558 ;; Parameters:    Size  Location     Type
  3559 ;;		None
  3560 ;; Auto vars:     Size  Location     Type
  3561 ;;		None
  3562 ;; Return value:  Size  Location     Type
  3563 ;;                  1    wreg      void 
  3564 ;; Registers used:
  3565 ;;		wreg, status,2, status,0
  3566 ;; Tracked objects:
  3567 ;;		On entry : 0/0
  3568 ;;		On exit  : 0/0
  3569 ;;		Unchanged: 0/0
  3570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3571 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3572 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3573 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3574 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3575 ;;Total ram usage:        0 bytes
  3576 ;; Hardware stack levels used:    1
  3577 ;; Hardware stack levels required when called:    1
  3578 ;; This function calls:
  3579 ;;		Nothing
  3580 ;; This function is called by:
  3581 ;;		_initialisation_LCD
  3582 ;; This function uses a non-reentrant model
  3583 ;;
  3584                           
  3585                           	psect	text24
  3586  00174A                     __ptext24:
  3587                           	opt stack 0
  3588  00174A                     _initialisation_SPI:
  3589                           	opt stack 28
  3590                           
  3591                           ;LCD_SPI.c: 117: RPOR24_25 |= 0x04;
  3592                           
  3593                           ;incstack = 0
  3594  00174A  010E               	movlb	14	; () banked
  3595  00174C  851E               	bsf	30,2,b	;volatile
  3596                           
  3597                           ; BSR set to: 14
  3598                           ;LCD_SPI.c: 118: RPOR24_25 &= 0xF4;
  3599  00174E  0EF4               	movlw	244
  3600  001750  010E               	movlb	14	; () banked
  3601  001752  171E               	andwf	30,f,b	;volatile
  3602                           
  3603                           ; BSR set to: 14
  3604                           ;LCD_SPI.c: 120: RPOR22_23 |= 0x05;
  3605  001754  0E05               	movlw	5
  3606  001756  010E               	movlb	14	; () banked
  3607  001758  131D               	iorwf	29,f,b	;volatile
  3608                           
  3609                           ; BSR set to: 14
  3610                           ;LCD_SPI.c: 121: RPOR22_23 &= 0xF5;
  3611  00175A  0EF5               	movlw	245
  3612  00175C  010E               	movlb	14	; () banked
  3613  00175E  171D               	andwf	29,f,b	;volatile
  3614                           
  3615                           ; BSR set to: 14
  3616                           ;LCD_SPI.c: 123: RPINR12_13 |= 0x50;
  3617  001760  0E50               	movlw	80
  3618  001762  010E               	movlb	14	; () banked
  3619  001764  1330               	iorwf	48,f,b	;volatile
  3620                           
  3621                           ; BSR set to: 14
  3622                           ;LCD_SPI.c: 124: RPINR12_13 &= 0x5F;
  3623  001766  0E5F               	movlw	95
  3624  001768  010E               	movlb	14	; () banked
  3625  00176A  1730               	andwf	48,f,b	;volatile
  3626                           
  3627                           ; BSR set to: 14
  3628                           ;LCD_SPI.c: 127: SSP2CON1 &= 0xF1;
  3629  00176C  0EF1               	movlw	241
  3630  00176E  010F               	movlb	15	; () banked
  3631  001770  1719               	andwf	25,f,b	;volatile
  3632                           
  3633                           ; BSR set to: 15
  3634                           ;LCD_SPI.c: 128: SSP2CON1 |= 0x31;
  3635  001772  0E31               	movlw	49
  3636  001774  010F               	movlb	15	; () banked
  3637  001776  1319               	iorwf	25,f,b	;volatile
  3638                           
  3639                           ; BSR set to: 15
  3640                           ;LCD_SPI.c: 129: SSP2STAT |= 0x80;
  3641  001778  010F               	movlb	15	; () banked
  3642  00177A  8F1A               	bsf	26,7,b	;volatile
  3643                           
  3644                           ; BSR set to: 15
  3645                           ;LCD_SPI.c: 130: SSP2STAT &= ~0x40;
  3646  00177C  010F               	movlb	15	; () banked
  3647  00177E  9D1A               	bcf	26,6,b	;volatile
  3648                           
  3649                           ; BSR set to: 15
  3650                           ;LCD_SPI.c: 131: SSP2CON3 &= 0x8F;
  3651  001780  0E8F               	movlw	143
  3652  001782  010F               	movlb	15	; () banked
  3653  001784  1739               	andwf	57,f,b	;volatile
  3654                           
  3655                           ; BSR set to: 15
  3656  001786  0012               	return		;funcret
  3657  001788                     __end_of_initialisation_SPI:
  3658                           	opt stack 0
  3659                           tblptru	equ	0xFF8
  3660                           tblptrh	equ	0xFF7
  3661                           tblptrl	equ	0xFF6
  3662                           tablat	equ	0xFF5
  3663                           prodh	equ	0xFF4
  3664                           prodl	equ	0xFF3
  3665                           intcon	equ	0xFF2
  3666                           intcon2	equ	0xFF1
  3667                           intcon3	equ	0xFF0
  3668                           indf0	equ	0xFEF
  3669                           postinc0	equ	0xFEE
  3670                           fsr0h	equ	0xFEA
  3671                           fsr0l	equ	0xFE9
  3672                           wreg	equ	0xFE8
  3673                           postdec1	equ	0xFE5
  3674                           fsr1l	equ	0xFE1
  3675                           indf2	equ	0xFDF
  3676                           postinc2	equ	0xFDE
  3677                           postdec2	equ	0xFDD
  3678                           fsr2h	equ	0xFDA
  3679                           fsr2l	equ	0xFD9
  3680                           status	equ	0xFD8
  3681                           
  3682 ;; *************** function _initialisation_PORT *****************
  3683 ;; Defined at:
  3684 ;;		line 135 in file "LCD_SPI.c"
  3685 ;; Parameters:    Size  Location     Type
  3686 ;;		None
  3687 ;; Auto vars:     Size  Location     Type
  3688 ;;		None
  3689 ;; Return value:  Size  Location     Type
  3690 ;;                  1    wreg      void 
  3691 ;; Registers used:
  3692 ;;		wreg, status,2, status,0
  3693 ;; Tracked objects:
  3694 ;;		On entry : 0/0
  3695 ;;		On exit  : 0/0
  3696 ;;		Unchanged: 0/0
  3697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3698 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3699 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3700 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3701 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3702 ;;Total ram usage:        1 bytes
  3703 ;; Hardware stack levels used:    1
  3704 ;; Hardware stack levels required when called:    1
  3705 ;; This function calls:
  3706 ;;		Nothing
  3707 ;; This function is called by:
  3708 ;;		_initialisation_LCD
  3709 ;; This function uses a non-reentrant model
  3710 ;;
  3711                           
  3712                           	psect	text25
  3713  00170A                     __ptext25:
  3714                           	opt stack 0
  3715  00170A                     _initialisation_PORT:
  3716                           	opt stack 28
  3717                           
  3718                           ;LCD_SPI.c: 137: OSCCON = OSCCON | 0b01110000;
  3719                           
  3720                           ; BSR set to: 15
  3721                           ;incstack = 0
  3722  00170A  50D3               	movf	4051,w,c	;volatile
  3723  00170C  0970               	iorlw	112
  3724  00170E  6ED3               	movwf	4051,c	;volatile
  3725                           
  3726                           ;LCD_SPI.c: 138: TRISDbits.TRISD4 = 0;
  3727  001710  9895               	bcf	3989,4,c	;volatile
  3728                           
  3729                           ;LCD_SPI.c: 139: TRISDbits.TRISD2 = 0;
  3730  001712  9495               	bcf	3989,2,c	;volatile
  3731                           
  3732                           ;LCD_SPI.c: 140: TRISDbits.TRISD3 = 0;
  3733  001714  9695               	bcf	3989,3,c	;volatile
  3734                           
  3735                           ;LCD_SPI.c: 141: TRISDbits.TRISD1 = 1;
  3736  001716  8295               	bsf	3989,1,c	;volatile
  3737                           
  3738                           ;LCD_SPI.c: 142: TRISCbits.TRISC0 = 0;
  3739  001718  9094               	bcf	3988,0,c	;volatile
  3740                           
  3741                           ;LCD_SPI.c: 143: LATDbits.LATD3 = 1;
  3742  00171A  868C               	bsf	3980,3,c	;volatile
  3743                           
  3744                           ;LCD_SPI.c: 144: __nop();
  3745  00171C  F000               	nop	
  3746                           
  3747                           ;LCD_SPI.c: 145: _delay((unsigned long)((33)*(8000000/4000.0)));
  3748  00171E  0E56               	movlw	86
  3749  001720  6E13               	movwf	??_initialisation_PORT& (0+255),c
  3750  001722  0EB6               	movlw	182
  3751  001724                     u1767:
  3752  001724  2EE8               	decfsz	wreg,f,c
  3753  001726  D7FE               	bra	u1767
  3754  001728  2E13               	decfsz	??_initialisation_PORT& (0+255),f,c
  3755  00172A  D7FC               	bra	u1767
  3756                           
  3757                           ;LCD_SPI.c: 146: _delay((unsigned long)((33)*(8000000/4000.0)));
  3758  00172C  0E56               	movlw	86
  3759  00172E  6E13               	movwf	??_initialisation_PORT& (0+255),c
  3760  001730  0EB6               	movlw	182
  3761  001732                     u1777:
  3762  001732  2EE8               	decfsz	wreg,f,c
  3763  001734  D7FE               	bra	u1777
  3764  001736  2E13               	decfsz	??_initialisation_PORT& (0+255),f,c
  3765  001738  D7FC               	bra	u1777
  3766                           
  3767                           ;LCD_SPI.c: 147: _delay((unsigned long)((33)*(8000000/4000.0)));
  3768  00173A  0E56               	movlw	86
  3769  00173C  6E13               	movwf	??_initialisation_PORT& (0+255),c
  3770  00173E  0EB6               	movlw	182
  3771  001740                     u1787:
  3772  001740  2EE8               	decfsz	wreg,f,c
  3773  001742  D7FE               	bra	u1787
  3774  001744  2E13               	decfsz	??_initialisation_PORT& (0+255),f,c
  3775  001746  D7FC               	bra	u1787
  3776  001748  0012               	return		;funcret
  3777  00174A                     __end_of_initialisation_PORT:
  3778                           	opt stack 0
  3779                           tblptru	equ	0xFF8
  3780                           tblptrh	equ	0xFF7
  3781                           tblptrl	equ	0xFF6
  3782                           tablat	equ	0xFF5
  3783                           prodh	equ	0xFF4
  3784                           prodl	equ	0xFF3
  3785                           intcon	equ	0xFF2
  3786                           intcon2	equ	0xFF1
  3787                           intcon3	equ	0xFF0
  3788                           indf0	equ	0xFEF
  3789                           postinc0	equ	0xFEE
  3790                           fsr0h	equ	0xFEA
  3791                           fsr0l	equ	0xFE9
  3792                           wreg	equ	0xFE8
  3793                           postdec1	equ	0xFE5
  3794                           fsr1l	equ	0xFE1
  3795                           indf2	equ	0xFDF
  3796                           postinc2	equ	0xFDE
  3797                           postdec2	equ	0xFDD
  3798                           fsr2h	equ	0xFDA
  3799                           fsr2l	equ	0xFD9
  3800                           status	equ	0xFD8
  3801                           
  3802 ;; *************** function _displayCtrl *****************
  3803 ;; Defined at:
  3804 ;;		line 31 in file "LCD_SPI.c"
  3805 ;; Parameters:    Size  Location     Type
  3806 ;;  display         1    wreg     unsigned char 
  3807 ;;  cursor          1   20[COMRAM] unsigned char 
  3808 ;;  blink           1   21[COMRAM] unsigned char 
  3809 ;; Auto vars:     Size  Location     Type
  3810 ;;  display         1   22[COMRAM] unsigned char 
  3811 ;;  BCD             1   23[COMRAM] unsigned char 
  3812 ;; Return value:  Size  Location     Type
  3813 ;;                  1    wreg      void 
  3814 ;; Registers used:
  3815 ;;		wreg, status,2, status,0, cstack
  3816 ;; Tracked objects:
  3817 ;;		On entry : 0/0
  3818 ;;		On exit  : 0/0
  3819 ;;		Unchanged: 0/0
  3820 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3821 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3822 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3823 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3824 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3825 ;;Total ram usage:        4 bytes
  3826 ;; Hardware stack levels used:    1
  3827 ;; Hardware stack levels required when called:    3
  3828 ;; This function calls:
  3829 ;;		_readBusyFlag
  3830 ;;		_spi_Send_Read
  3831 ;; This function is called by:
  3832 ;;		_initialisation_LCD
  3833 ;; This function uses a non-reentrant model
  3834 ;;
  3835                           
  3836                           	psect	text26
  3837  001684                     __ptext26:
  3838                           	opt stack 0
  3839  001684                     _displayCtrl:
  3840                           	opt stack 26
  3841                           
  3842                           ;incstack = 0
  3843                           ;displayCtrl@display stored from wreg
  3844  001684  6E17               	movwf	displayCtrl@display,c
  3845                           
  3846                           ;LCD_SPI.c: 33: char BCD = blink;
  3847  001686  C016  F018         	movff	displayCtrl@blink,displayCtrl@BCD
  3848                           
  3849                           ;LCD_SPI.c: 34: BCD <<= 1;
  3850  00168A  90D8               	bcf	status,0,c
  3851  00168C  3618               	rlcf	displayCtrl@BCD,f,c
  3852                           
  3853                           ;LCD_SPI.c: 35: BCD += cursor;
  3854  00168E  5015               	movf	displayCtrl@cursor,w,c
  3855  001690  2618               	addwf	displayCtrl@BCD,f,c
  3856                           
  3857                           ;LCD_SPI.c: 36: BCD <<= 1;
  3858  001692  90D8               	bcf	status,0,c
  3859  001694  3618               	rlcf	displayCtrl@BCD,f,c
  3860                           
  3861                           ;LCD_SPI.c: 37: BCD += display;
  3862  001696  5017               	movf	displayCtrl@display,w,c
  3863  001698  2618               	addwf	displayCtrl@BCD,f,c
  3864                           
  3865                           ;LCD_SPI.c: 38: BCD <<= 1;
  3866  00169A  90D8               	bcf	status,0,c
  3867  00169C  3618               	rlcf	displayCtrl@BCD,f,c
  3868                           
  3869                           ;LCD_SPI.c: 39: BCD += 1;
  3870  00169E  2A18               	incf	displayCtrl@BCD,f,c
  3871                           
  3872                           ;LCD_SPI.c: 40: BCD <<= 4;
  3873  0016A0  3A18               	swapf	displayCtrl@BCD,f,c
  3874  0016A2  0EF0               	movlw	240
  3875  0016A4  1618               	andwf	displayCtrl@BCD,f,c
  3876  0016A6  ECD2  F00C         	call	_readBusyFlag	;wreg free
  3877  0016AA  0900               	iorlw	0
  3878  0016AC  A4D8               	btfss	status,2,c
  3879  0016AE  D7FB               	goto	l343
  3880                           
  3881                           ;LCD_SPI.c: 43: LATDbits.LATD3 = 0;
  3882  0016B0  968C               	bcf	3980,3,c	;volatile
  3883                           
  3884                           ;LCD_SPI.c: 44: spi_Send_Read(0xF8);
  3885  0016B2  0EF8               	movlw	248
  3886  0016B4  ECE9  F00C         	call	_spi_Send_Read
  3887                           
  3888                           ;LCD_SPI.c: 45: spi_Send_Read(BCD);
  3889  0016B8  5018               	movf	displayCtrl@BCD,w,c
  3890  0016BA  ECE9  F00C         	call	_spi_Send_Read
  3891                           
  3892                           ;LCD_SPI.c: 46: spi_Send_Read(0x00);
  3893  0016BE  0E00               	movlw	0
  3894  0016C0  ECE9  F00C         	call	_spi_Send_Read
  3895                           
  3896                           ;LCD_SPI.c: 47: LATDbits.LATD3 = 1;
  3897  0016C4  868C               	bsf	3980,3,c	;volatile
  3898  0016C6  0012               	return		;funcret
  3899  0016C8                     __end_of_displayCtrl:
  3900                           	opt stack 0
  3901                           tblptru	equ	0xFF8
  3902                           tblptrh	equ	0xFF7
  3903                           tblptrl	equ	0xFF6
  3904                           tablat	equ	0xFF5
  3905                           prodh	equ	0xFF4
  3906                           prodl	equ	0xFF3
  3907                           intcon	equ	0xFF2
  3908                           intcon2	equ	0xFF1
  3909                           intcon3	equ	0xFF0
  3910                           indf0	equ	0xFEF
  3911                           postinc0	equ	0xFEE
  3912                           fsr0h	equ	0xFEA
  3913                           fsr0l	equ	0xFE9
  3914                           wreg	equ	0xFE8
  3915                           postdec1	equ	0xFE5
  3916                           fsr1l	equ	0xFE1
  3917                           indf2	equ	0xFDF
  3918                           postinc2	equ	0xFDE
  3919                           postdec2	equ	0xFDD
  3920                           fsr2h	equ	0xFDA
  3921                           fsr2l	equ	0xFD9
  3922                           status	equ	0xFD8
  3923                           
  3924 ;; *************** function _clearDisplay *****************
  3925 ;; Defined at:
  3926 ;;		line 19 in file "LCD_SPI.c"
  3927 ;; Parameters:    Size  Location     Type
  3928 ;;		None
  3929 ;; Auto vars:     Size  Location     Type
  3930 ;;		None
  3931 ;; Return value:  Size  Location     Type
  3932 ;;                  1    wreg      void 
  3933 ;; Registers used:
  3934 ;;		wreg, status,2, status,0, cstack
  3935 ;; Tracked objects:
  3936 ;;		On entry : 0/0
  3937 ;;		On exit  : 0/0
  3938 ;;		Unchanged: 0/0
  3939 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3940 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3941 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3942 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3943 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3944 ;;Total ram usage:        0 bytes
  3945 ;; Hardware stack levels used:    1
  3946 ;; Hardware stack levels required when called:    3
  3947 ;; This function calls:
  3948 ;;		_readBusyFlag
  3949 ;;		_spi_Send_Read
  3950 ;; This function is called by:
  3951 ;;		_printMBED
  3952 ;;		_printStartGame
  3953 ;;		_printEndGame
  3954 ;;		_initialisation_LCD
  3955 ;; This function uses a non-reentrant model
  3956 ;;
  3957                           
  3958                           	psect	text27
  3959  00190C                     __ptext27:
  3960                           	opt stack 0
  3961  00190C                     _clearDisplay:
  3962                           	opt stack 26
  3963                           
  3964                           ;LCD_SPI.c: 21: while(readBusyFlag());
  3965                           
  3966                           ;incstack = 0
  3967  00190C  ECD2  F00C         	call	_readBusyFlag	;wreg free
  3968  001910  0900               	iorlw	0
  3969  001912  A4D8               	btfss	status,2,c
  3970  001914  D7FB               	goto	_clearDisplay
  3971                           
  3972                           ;LCD_SPI.c: 23: LATDbits.LATD3 = 0;
  3973  001916  968C               	bcf	3980,3,c	;volatile
  3974                           
  3975                           ;LCD_SPI.c: 24: spi_Send_Read(0xF8);
  3976  001918  0EF8               	movlw	248
  3977  00191A  ECE9  F00C         	call	_spi_Send_Read
  3978                           
  3979                           ;LCD_SPI.c: 25: spi_Send_Read(0x80);
  3980  00191E  0E80               	movlw	128
  3981  001920  ECE9  F00C         	call	_spi_Send_Read
  3982                           
  3983                           ;LCD_SPI.c: 26: spi_Send_Read(0x00);
  3984  001924  0E00               	movlw	0
  3985  001926  ECE9  F00C         	call	_spi_Send_Read
  3986                           
  3987                           ;LCD_SPI.c: 27: LATDbits.LATD3 = 1;
  3988  00192A  868C               	bsf	3980,3,c	;volatile
  3989  00192C  0012               	return		;funcret
  3990  00192E                     __end_of_clearDisplay:
  3991                           	opt stack 0
  3992                           tblptru	equ	0xFF8
  3993                           tblptrh	equ	0xFF7
  3994                           tblptrl	equ	0xFF6
  3995                           tablat	equ	0xFF5
  3996                           prodh	equ	0xFF4
  3997                           prodl	equ	0xFF3
  3998                           intcon	equ	0xFF2
  3999                           intcon2	equ	0xFF1
  4000                           intcon3	equ	0xFF0
  4001                           indf0	equ	0xFEF
  4002                           postinc0	equ	0xFEE
  4003                           fsr0h	equ	0xFEA
  4004                           fsr0l	equ	0xFE9
  4005                           wreg	equ	0xFE8
  4006                           postdec1	equ	0xFE5
  4007                           fsr1l	equ	0xFE1
  4008                           indf2	equ	0xFDF
  4009                           postinc2	equ	0xFDE
  4010                           postdec2	equ	0xFDD
  4011                           fsr2h	equ	0xFDA
  4012                           fsr2l	equ	0xFD9
  4013                           status	equ	0xFD8
  4014                           
  4015 ;; *************** function _readBusyFlag *****************
  4016 ;; Defined at:
  4017 ;;		line 94 in file "LCD_SPI.c"
  4018 ;; Parameters:    Size  Location     Type
  4019 ;;		None
  4020 ;; Auto vars:     Size  Location     Type
  4021 ;;  retValue        1   19[COMRAM] unsigned char 
  4022 ;; Return value:  Size  Location     Type
  4023 ;;                  1    wreg      unsigned char 
  4024 ;; Registers used:
  4025 ;;		wreg, status,2, status,0, cstack
  4026 ;; Tracked objects:
  4027 ;;		On entry : 0/0
  4028 ;;		On exit  : 0/0
  4029 ;;		Unchanged: 0/0
  4030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4031 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4032 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4033 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4034 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4035 ;;Total ram usage:        1 bytes
  4036 ;; Hardware stack levels used:    1
  4037 ;; Hardware stack levels required when called:    2
  4038 ;; This function calls:
  4039 ;;		_spi_Send_Read
  4040 ;; This function is called by:
  4041 ;;		_clearDisplay
  4042 ;;		_displayCtrl
  4043 ;;		_putchLCD
  4044 ;;		_moveCursor
  4045 ;; This function uses a non-reentrant model
  4046 ;;
  4047                           
  4048                           	psect	text28
  4049  0019A4                     __ptext28:
  4050                           	opt stack 0
  4051  0019A4                     _readBusyFlag:
  4052                           	opt stack 25
  4053                           
  4054                           ;LCD_SPI.c: 96: unsigned char retValue;
  4055                           ;LCD_SPI.c: 98: LATDbits.LATD3 = 0;
  4056                           
  4057                           ;incstack = 0
  4058  0019A4  968C               	bcf	3980,3,c	;volatile
  4059                           
  4060                           ;LCD_SPI.c: 99: spi_Send_Read(0xFC);
  4061  0019A6  0EFC               	movlw	252
  4062  0019A8  ECE9  F00C         	call	_spi_Send_Read
  4063                           
  4064                           ;LCD_SPI.c: 100: retValue = spi_Send_Read(0x00);
  4065  0019AC  0E00               	movlw	0
  4066  0019AE  ECE9  F00C         	call	_spi_Send_Read
  4067  0019B2  6E14               	movwf	readBusyFlag@retValue,c
  4068                           
  4069                           ;LCD_SPI.c: 101: LATDbits.LATD3 = 1;
  4070  0019B4  868C               	bsf	3980,3,c	;volatile
  4071                           
  4072                           ;LCD_SPI.c: 102: _delay((unsigned long)((1)*(8000000/4000000.0)));
  4073  0019B6  D000               	nop2		;2 cycle nop
  4074                           
  4075                           ;LCD_SPI.c: 103: return (retValue & 1);
  4076  0019B8  5014               	movf	readBusyFlag@retValue,w,c
  4077  0019BA  0B01               	andlw	1
  4078  0019BC  0012               	return	
  4079  0019BE                     __end_of_readBusyFlag:
  4080                           	opt stack 0
  4081                           tblptru	equ	0xFF8
  4082                           tblptrh	equ	0xFF7
  4083                           tblptrl	equ	0xFF6
  4084                           tablat	equ	0xFF5
  4085                           prodh	equ	0xFF4
  4086                           prodl	equ	0xFF3
  4087                           intcon	equ	0xFF2
  4088                           intcon2	equ	0xFF1
  4089                           intcon3	equ	0xFF0
  4090                           indf0	equ	0xFEF
  4091                           postinc0	equ	0xFEE
  4092                           fsr0h	equ	0xFEA
  4093                           fsr0l	equ	0xFE9
  4094                           wreg	equ	0xFE8
  4095                           postdec1	equ	0xFE5
  4096                           fsr1l	equ	0xFE1
  4097                           indf2	equ	0xFDF
  4098                           postinc2	equ	0xFDE
  4099                           postdec2	equ	0xFDD
  4100                           fsr2h	equ	0xFDA
  4101                           fsr2l	equ	0xFD9
  4102                           status	equ	0xFD8
  4103                           
  4104 ;; *************** function _spi_Send_Read *****************
  4105 ;; Defined at:
  4106 ;;		line 12 in file "LCD_SPI.c"
  4107 ;; Parameters:    Size  Location     Type
  4108 ;;  byte            1    wreg     unsigned char 
  4109 ;; Auto vars:     Size  Location     Type
  4110 ;;  byte            1   18[COMRAM] unsigned char 
  4111 ;; Return value:  Size  Location     Type
  4112 ;;                  1    wreg      unsigned char 
  4113 ;; Registers used:
  4114 ;;		wreg, status,2
  4115 ;; Tracked objects:
  4116 ;;		On entry : 0/0
  4117 ;;		On exit  : 0/0
  4118 ;;		Unchanged: 0/0
  4119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4120 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4121 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4122 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4123 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4124 ;;Total ram usage:        1 bytes
  4125 ;; Hardware stack levels used:    1
  4126 ;; Hardware stack levels required when called:    1
  4127 ;; This function calls:
  4128 ;;		Nothing
  4129 ;; This function is called by:
  4130 ;;		_clearDisplay
  4131 ;;		_displayCtrl
  4132 ;;		_putchLCD
  4133 ;;		_moveCursor
  4134 ;;		_readBusyFlag
  4135 ;; This function uses a non-reentrant model
  4136 ;;
  4137                           
  4138                           	psect	text29
  4139  0019D2                     __ptext29:
  4140                           	opt stack 0
  4141  0019D2                     _spi_Send_Read:
  4142                           	opt stack 26
  4143                           
  4144                           ;incstack = 0
  4145                           ;spi_Send_Read@byte stored from wreg
  4146  0019D2  6E13               	movwf	spi_Send_Read@byte,c
  4147                           
  4148                           ;LCD_SPI.c: 14: SSP2BUF = byte;
  4149  0019D4  C013  FF03         	movff	spi_Send_Read@byte,3843	;volatile
  4150  0019D8  010F               	movlb	15	; () banked
  4151  0019DA  A11A               	btfss	26,0,b	;volatile
  4152  0019DC  D7FD               	goto	l331
  4153                           
  4154                           ; BSR set to: 15
  4155                           ;LCD_SPI.c: 16: return SSP2BUF;
  4156  0019DE  010F               	movlb	15	; () banked
  4157  0019E0  5103               	movf	3,w,b	;volatile
  4158                           
  4159                           ; BSR set to: 15
  4160  0019E2  0012               	return		;funcret
  4161  0019E4                     __end_of_spi_Send_Read:
  4162                           	opt stack 0
  4163                           tblptru	equ	0xFF8
  4164                           tblptrh	equ	0xFF7
  4165                           tblptrl	equ	0xFF6
  4166                           tablat	equ	0xFF5
  4167                           prodh	equ	0xFF4
  4168                           prodl	equ	0xFF3
  4169                           intcon	equ	0xFF2
  4170                           intcon2	equ	0xFF1
  4171                           intcon3	equ	0xFF0
  4172                           indf0	equ	0xFEF
  4173                           postinc0	equ	0xFEE
  4174                           fsr0h	equ	0xFEA
  4175                           fsr0l	equ	0xFE9
  4176                           wreg	equ	0xFE8
  4177                           postdec1	equ	0xFE5
  4178                           fsr1l	equ	0xFE1
  4179                           indf2	equ	0xFDF
  4180                           postinc2	equ	0xFDE
  4181                           postdec2	equ	0xFDD
  4182                           fsr2h	equ	0xFDA
  4183                           fsr2l	equ	0xFD9
  4184                           status	equ	0xFD8
  4185                           
  4186 ;; *************** function _getRandomTarget *****************
  4187 ;; Defined at:
  4188 ;;		line 360 in file "main.c"
  4189 ;; Parameters:    Size  Location     Type
  4190 ;;  Target          2   38[COMRAM] PTR short 
  4191 ;;		 -> nextTarget(4), 
  4192 ;; Auto vars:     Size  Location     Type
  4193 ;;		None
  4194 ;; Return value:  Size  Location     Type
  4195 ;;                  1    wreg      void 
  4196 ;; Registers used:
  4197 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4198 ;; Tracked objects:
  4199 ;;		On entry : 0/0
  4200 ;;		On exit  : 0/0
  4201 ;;		Unchanged: 0/0
  4202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4203 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4204 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4205 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4206 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4207 ;;Total ram usage:        2 bytes
  4208 ;; Hardware stack levels used:    1
  4209 ;; Hardware stack levels required when called:    3
  4210 ;; This function calls:
  4211 ;;		___awmod
  4212 ;;		_rand
  4213 ;; This function is called by:
  4214 ;;		_main
  4215 ;; This function uses a non-reentrant model
  4216 ;;
  4217                           
  4218                           	psect	text30
  4219  00163A                     __ptext30:
  4220                           	opt stack 0
  4221  00163A                     _getRandomTarget:
  4222                           	opt stack 27
  4223                           
  4224                           ;main.c: 361: Target[0] = rand() % 6;
  4225                           
  4226                           ; BSR set to: 15
  4227                           ;incstack = 0
  4228  00163A  ECCE  F00A         	call	_rand	;wreg free
  4229  00163E  C01F  F021         	movff	?_rand,___awmod@dividend
  4230  001642  C020  F022         	movff	?_rand+1,___awmod@dividend+1
  4231  001646  0E00               	movlw	0
  4232  001648  6E24               	movwf	___awmod@divisor+1,c
  4233  00164A  0E06               	movlw	6
  4234  00164C  6E23               	movwf	___awmod@divisor,c
  4235  00164E  ECAE  F009         	call	___awmod	;wreg free
  4236  001652  C027  FFD9         	movff	getRandomTarget@Target,fsr2l
  4237  001656  C028  FFDA         	movff	getRandomTarget@Target+1,fsr2h
  4238  00165A  C021  FFDE         	movff	?___awmod,postinc2
  4239  00165E  C022  FFDD         	movff	?___awmod+1,postdec2
  4240                           
  4241                           ;main.c: 362: Target[1] = rand() % 2;
  4242  001662  ECCE  F00A         	call	_rand	;wreg free
  4243  001666  0E01               	movlw	1
  4244  001668  161F               	andwf	?_rand,f,c
  4245  00166A  0E00               	movlw	0
  4246  00166C  1620               	andwf	?_rand+1,f,c
  4247  00166E  EE20 F002          	lfsr	2,2
  4248  001672  5027               	movf	getRandomTarget@Target,w,c
  4249  001674  26D9               	addwf	fsr2l,f,c
  4250  001676  5028               	movf	getRandomTarget@Target+1,w,c
  4251  001678  22DA               	addwfc	fsr2h,f,c
  4252  00167A  C01F  FFDE         	movff	?_rand,postinc2
  4253  00167E  C020  FFDD         	movff	?_rand+1,postdec2
  4254  001682  0012               	return		;funcret
  4255  001684                     __end_of_getRandomTarget:
  4256                           	opt stack 0
  4257                           tblptru	equ	0xFF8
  4258                           tblptrh	equ	0xFF7
  4259                           tblptrl	equ	0xFF6
  4260                           tablat	equ	0xFF5
  4261                           prodh	equ	0xFF4
  4262                           prodl	equ	0xFF3
  4263                           intcon	equ	0xFF2
  4264                           intcon2	equ	0xFF1
  4265                           intcon3	equ	0xFF0
  4266                           indf0	equ	0xFEF
  4267                           postinc0	equ	0xFEE
  4268                           fsr0h	equ	0xFEA
  4269                           fsr0l	equ	0xFE9
  4270                           wreg	equ	0xFE8
  4271                           postdec1	equ	0xFE5
  4272                           fsr1l	equ	0xFE1
  4273                           indf2	equ	0xFDF
  4274                           postinc2	equ	0xFDE
  4275                           postdec2	equ	0xFDD
  4276                           fsr2h	equ	0xFDA
  4277                           fsr2l	equ	0xFD9
  4278                           status	equ	0xFD8
  4279                           
  4280 ;; *************** function _rand *****************
  4281 ;; Defined at:
  4282 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\rand.c"
  4283 ;; Parameters:    Size  Location     Type
  4284 ;;		None
  4285 ;; Auto vars:     Size  Location     Type
  4286 ;;		None
  4287 ;; Return value:  Size  Location     Type
  4288 ;;                  2   30[COMRAM] int 
  4289 ;; Registers used:
  4290 ;;		wreg, status,2, status,0, cstack
  4291 ;; Tracked objects:
  4292 ;;		On entry : 0/0
  4293 ;;		On exit  : 0/0
  4294 ;;		Unchanged: 0/0
  4295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4296 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4297 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4298 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4299 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4300 ;;Total ram usage:        2 bytes
  4301 ;; Hardware stack levels used:    1
  4302 ;; Hardware stack levels required when called:    2
  4303 ;; This function calls:
  4304 ;;		___lmul
  4305 ;; This function is called by:
  4306 ;;		_getRandomTarget
  4307 ;; This function uses a non-reentrant model
  4308 ;;
  4309                           
  4310                           	psect	text31
  4311  00159C                     __ptext31:
  4312                           	opt stack 0
  4313  00159C                     _rand:
  4314                           	opt stack 27
  4315                           
  4316                           ;incstack = 0
  4317  00159C  C042  F013         	movff	_randx,___lmul@multiplier
  4318  0015A0  C043  F014         	movff	_randx+1,___lmul@multiplier+1
  4319  0015A4  C044  F015         	movff	_randx+2,___lmul@multiplier+2
  4320  0015A8  C045  F016         	movff	_randx+3,___lmul@multiplier+3
  4321  0015AC  0E6D               	movlw	109
  4322  0015AE  6E17               	movwf	___lmul@multiplicand,c
  4323  0015B0  0E4E               	movlw	78
  4324  0015B2  6E18               	movwf	___lmul@multiplicand+1,c
  4325  0015B4  0EC6               	movlw	198
  4326  0015B6  6E19               	movwf	___lmul@multiplicand+2,c
  4327  0015B8  0E41               	movlw	65
  4328  0015BA  6E1A               	movwf	___lmul@multiplicand+3,c
  4329  0015BC  EC51  F00A         	call	___lmul	;wreg free
  4330  0015C0  C013  F042         	movff	?___lmul,_randx
  4331  0015C4  C014  F043         	movff	?___lmul+1,_randx+1
  4332  0015C8  C015  F044         	movff	?___lmul+2,_randx+2
  4333  0015CC  C016  F045         	movff	?___lmul+3,_randx+3
  4334  0015D0  0E39               	movlw	57
  4335  0015D2  2642               	addwf	_randx,f,c
  4336  0015D4  0E30               	movlw	48
  4337  0015D6  2243               	addwfc	_randx+1,f,c
  4338  0015D8  0E00               	movlw	0
  4339  0015DA  2244               	addwfc	_randx+2,f,c
  4340  0015DC  0E00               	movlw	0
  4341  0015DE  2245               	addwfc	_randx+3,f,c
  4342  0015E0  0EFF               	movlw	255
  4343  0015E2  1444               	andwf	_randx+2,w,c
  4344  0015E4  6E1F               	movwf	?_rand,c
  4345  0015E6  0E7F               	movlw	127
  4346  0015E8  1445               	andwf	_randx+3,w,c
  4347  0015EA  6E20               	movwf	?_rand+1,c
  4348  0015EC  0012               	return	
  4349  0015EE                     __end_of_rand:
  4350                           	opt stack 0
  4351                           tblptru	equ	0xFF8
  4352                           tblptrh	equ	0xFF7
  4353                           tblptrl	equ	0xFF6
  4354                           tablat	equ	0xFF5
  4355                           prodh	equ	0xFF4
  4356                           prodl	equ	0xFF3
  4357                           intcon	equ	0xFF2
  4358                           intcon2	equ	0xFF1
  4359                           intcon3	equ	0xFF0
  4360                           indf0	equ	0xFEF
  4361                           postinc0	equ	0xFEE
  4362                           fsr0h	equ	0xFEA
  4363                           fsr0l	equ	0xFE9
  4364                           wreg	equ	0xFE8
  4365                           postdec1	equ	0xFE5
  4366                           fsr1l	equ	0xFE1
  4367                           indf2	equ	0xFDF
  4368                           postinc2	equ	0xFDE
  4369                           postdec2	equ	0xFDD
  4370                           fsr2h	equ	0xFDA
  4371                           fsr2l	equ	0xFD9
  4372                           status	equ	0xFD8
  4373                           
  4374 ;; *************** function ___lmul *****************
  4375 ;; Defined at:
  4376 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\Umul32.c"
  4377 ;; Parameters:    Size  Location     Type
  4378 ;;  multiplier      4   18[COMRAM] unsigned long 
  4379 ;;  multiplicand    4   22[COMRAM] unsigned long 
  4380 ;; Auto vars:     Size  Location     Type
  4381 ;;  product         4   26[COMRAM] unsigned long 
  4382 ;; Return value:  Size  Location     Type
  4383 ;;                  4   18[COMRAM] unsigned long 
  4384 ;; Registers used:
  4385 ;;		wreg, status,2, status,0
  4386 ;; Tracked objects:
  4387 ;;		On entry : 0/0
  4388 ;;		On exit  : 0/0
  4389 ;;		Unchanged: 0/0
  4390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4391 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4392 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4393 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4394 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4395 ;;Total ram usage:       12 bytes
  4396 ;; Hardware stack levels used:    1
  4397 ;; Hardware stack levels required when called:    1
  4398 ;; This function calls:
  4399 ;;		Nothing
  4400 ;; This function is called by:
  4401 ;;		_rand
  4402 ;; This function uses a non-reentrant model
  4403 ;;
  4404                           
  4405                           	psect	text32
  4406  0014A2                     __ptext32:
  4407                           	opt stack 0
  4408  0014A2                     ___lmul:
  4409                           	opt stack 27
  4410                           
  4411                           ;incstack = 0
  4412  0014A2  0E00               	movlw	0
  4413  0014A4  6E1B               	movwf	___lmul@product,c
  4414  0014A6  0E00               	movlw	0
  4415  0014A8  6E1C               	movwf	___lmul@product+1,c
  4416  0014AA  0E00               	movlw	0
  4417  0014AC  6E1D               	movwf	___lmul@product+2,c
  4418  0014AE  0E00               	movlw	0
  4419  0014B0  6E1E               	movwf	___lmul@product+3,c
  4420  0014B2  A013               	btfss	___lmul@multiplier,0,c
  4421  0014B4  D008               	goto	l425
  4422  0014B6  5017               	movf	___lmul@multiplicand,w,c
  4423  0014B8  261B               	addwf	___lmul@product,f,c
  4424  0014BA  5018               	movf	___lmul@multiplicand+1,w,c
  4425  0014BC  221C               	addwfc	___lmul@product+1,f,c
  4426  0014BE  5019               	movf	___lmul@multiplicand+2,w,c
  4427  0014C0  221D               	addwfc	___lmul@product+2,f,c
  4428  0014C2  501A               	movf	___lmul@multiplicand+3,w,c
  4429  0014C4  221E               	addwfc	___lmul@product+3,f,c
  4430  0014C6                     l425:
  4431  0014C6  90D8               	bcf	status,0,c
  4432  0014C8  3617               	rlcf	___lmul@multiplicand,f,c
  4433  0014CA  3618               	rlcf	___lmul@multiplicand+1,f,c
  4434  0014CC  3619               	rlcf	___lmul@multiplicand+2,f,c
  4435  0014CE  361A               	rlcf	___lmul@multiplicand+3,f,c
  4436  0014D0  90D8               	bcf	status,0,c
  4437  0014D2  3216               	rrcf	___lmul@multiplier+3,f,c
  4438  0014D4  3215               	rrcf	___lmul@multiplier+2,f,c
  4439  0014D6  3214               	rrcf	___lmul@multiplier+1,f,c
  4440  0014D8  3213               	rrcf	___lmul@multiplier,f,c
  4441  0014DA  5013               	movf	___lmul@multiplier,w,c
  4442  0014DC  1014               	iorwf	___lmul@multiplier+1,w,c
  4443  0014DE  1015               	iorwf	___lmul@multiplier+2,w,c
  4444  0014E0  1016               	iorwf	___lmul@multiplier+3,w,c
  4445  0014E2  A4D8               	btfss	status,2,c
  4446  0014E4  D7E6               	goto	l424
  4447  0014E6  C01B  F013         	movff	___lmul@product,?___lmul
  4448  0014EA  C01C  F014         	movff	___lmul@product+1,?___lmul+1
  4449  0014EE  C01D  F015         	movff	___lmul@product+2,?___lmul+2
  4450  0014F2  C01E  F016         	movff	___lmul@product+3,?___lmul+3
  4451  0014F6  0012               	return		;funcret
  4452  0014F8                     __end_of___lmul:
  4453                           	opt stack 0
  4454                           tblptru	equ	0xFF8
  4455                           tblptrh	equ	0xFF7
  4456                           tblptrl	equ	0xFF6
  4457                           tablat	equ	0xFF5
  4458                           prodh	equ	0xFF4
  4459                           prodl	equ	0xFF3
  4460                           intcon	equ	0xFF2
  4461                           intcon2	equ	0xFF1
  4462                           intcon3	equ	0xFF0
  4463                           indf0	equ	0xFEF
  4464                           postinc0	equ	0xFEE
  4465                           fsr0h	equ	0xFEA
  4466                           fsr0l	equ	0xFE9
  4467                           wreg	equ	0xFE8
  4468                           postdec1	equ	0xFE5
  4469                           fsr1l	equ	0xFE1
  4470                           indf2	equ	0xFDF
  4471                           postinc2	equ	0xFDE
  4472                           postdec2	equ	0xFDD
  4473                           fsr2h	equ	0xFDA
  4474                           fsr2l	equ	0xFD9
  4475                           status	equ	0xFD8
  4476                           
  4477 ;; *************** function ___awmod *****************
  4478 ;; Defined at:
  4479 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\awmod.c"
  4480 ;; Parameters:    Size  Location     Type
  4481 ;;  dividend        2   32[COMRAM] int 
  4482 ;;  divisor         2   34[COMRAM] int 
  4483 ;; Auto vars:     Size  Location     Type
  4484 ;;  sign            1   37[COMRAM] unsigned char 
  4485 ;;  counter         1   36[COMRAM] unsigned char 
  4486 ;; Return value:  Size  Location     Type
  4487 ;;                  2   32[COMRAM] int 
  4488 ;; Registers used:
  4489 ;;		wreg, status,2, status,0
  4490 ;; Tracked objects:
  4491 ;;		On entry : 0/0
  4492 ;;		On exit  : 0/0
  4493 ;;		Unchanged: 0/0
  4494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4495 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4496 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4497 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4498 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4499 ;;Total ram usage:        6 bytes
  4500 ;; Hardware stack levels used:    1
  4501 ;; Hardware stack levels required when called:    1
  4502 ;; This function calls:
  4503 ;;		Nothing
  4504 ;; This function is called by:
  4505 ;;		_getRandomTarget
  4506 ;; This function uses a non-reentrant model
  4507 ;;
  4508                           
  4509                           	psect	text33
  4510  00135C                     __ptext33:
  4511                           	opt stack 0
  4512  00135C                     ___awmod:
  4513                           	opt stack 28
  4514                           
  4515                           ;incstack = 0
  4516  00135C  0E00               	movlw	0
  4517  00135E  6E26               	movwf	___awmod@sign,c
  4518  001360  AE22               	btfss	___awmod@dividend+1,7,c
  4519  001362  D006               	goto	l593
  4520  001364  6C21               	negf	___awmod@dividend,c
  4521  001366  1E22               	comf	___awmod@dividend+1,f,c
  4522  001368  B0D8               	btfsc	status,0,c
  4523  00136A  2A22               	incf	___awmod@dividend+1,f,c
  4524  00136C  0E01               	movlw	1
  4525  00136E  6E26               	movwf	___awmod@sign,c
  4526  001370                     l593:
  4527  001370  AE24               	btfss	___awmod@divisor+1,7,c
  4528  001372  D004               	goto	l594
  4529  001374  6C23               	negf	___awmod@divisor,c
  4530  001376  1E24               	comf	___awmod@divisor+1,f,c
  4531  001378  B0D8               	btfsc	status,0,c
  4532  00137A  2A24               	incf	___awmod@divisor+1,f,c
  4533  00137C                     l594:
  4534  00137C  5023               	movf	___awmod@divisor,w,c
  4535  00137E  1024               	iorwf	___awmod@divisor+1,w,c
  4536  001380  B4D8               	btfsc	status,2,c
  4537  001382  D018               	goto	l601
  4538  001384  0E01               	movlw	1
  4539  001386  6E25               	movwf	___awmod@counter,c
  4540  001388  D004               	goto	l596
  4541  00138A  90D8               	bcf	status,0,c
  4542  00138C  3623               	rlcf	___awmod@divisor,f,c
  4543  00138E  3624               	rlcf	___awmod@divisor+1,f,c
  4544  001390  2A25               	incf	___awmod@counter,f,c
  4545  001392                     l596:
  4546  001392  AE24               	btfss	___awmod@divisor+1,7,c
  4547  001394  D7FA               	goto	l597
  4548  001396                     u1510:
  4549  001396  5023               	movf	___awmod@divisor,w,c
  4550  001398  5C21               	subwf	___awmod@dividend,w,c
  4551  00139A  5024               	movf	___awmod@divisor+1,w,c
  4552  00139C  5822               	subwfb	___awmod@dividend+1,w,c
  4553  00139E  A0D8               	btfss	status,0,c
  4554  0013A0  D004               	goto	l600
  4555  0013A2  5023               	movf	___awmod@divisor,w,c
  4556  0013A4  5E21               	subwf	___awmod@dividend,f,c
  4557  0013A6  5024               	movf	___awmod@divisor+1,w,c
  4558  0013A8  5A22               	subwfb	___awmod@dividend+1,f,c
  4559  0013AA                     l600:
  4560  0013AA  90D8               	bcf	status,0,c
  4561  0013AC  3224               	rrcf	___awmod@divisor+1,f,c
  4562  0013AE  3223               	rrcf	___awmod@divisor,f,c
  4563  0013B0  2E25               	decfsz	___awmod@counter,f,c
  4564  0013B2  D7F1               	goto	u1510
  4565  0013B4                     l601:
  4566  0013B4  5026               	movf	___awmod@sign,w,c
  4567  0013B6  B4D8               	btfsc	status,2,c
  4568  0013B8  D004               	goto	l602
  4569  0013BA  6C21               	negf	___awmod@dividend,c
  4570  0013BC  1E22               	comf	___awmod@dividend+1,f,c
  4571  0013BE  B0D8               	btfsc	status,0,c
  4572  0013C0  2A22               	incf	___awmod@dividend+1,f,c
  4573  0013C2                     l602:
  4574  0013C2  C021  F021         	movff	___awmod@dividend,?___awmod
  4575  0013C6  C022  F022         	movff	___awmod@dividend+1,?___awmod+1
  4576  0013CA  0012               	return	
  4577  0013CC                     __end_of___awmod:
  4578                           	opt stack 0
  4579                           tblptru	equ	0xFF8
  4580                           tblptrh	equ	0xFF7
  4581                           tblptrl	equ	0xFF6
  4582                           tablat	equ	0xFF5
  4583                           prodh	equ	0xFF4
  4584                           prodl	equ	0xFF3
  4585                           intcon	equ	0xFF2
  4586                           intcon2	equ	0xFF1
  4587                           intcon3	equ	0xFF0
  4588                           indf0	equ	0xFEF
  4589                           postinc0	equ	0xFEE
  4590                           fsr0h	equ	0xFEA
  4591                           fsr0l	equ	0xFE9
  4592                           wreg	equ	0xFE8
  4593                           postdec1	equ	0xFE5
  4594                           fsr1l	equ	0xFE1
  4595                           indf2	equ	0xFDF
  4596                           postinc2	equ	0xFDE
  4597                           postdec2	equ	0xFDD
  4598                           fsr2h	equ	0xFDA
  4599                           fsr2l	equ	0xFD9
  4600                           status	equ	0xFD8
  4601                           
  4602 ;; *************** function _fireShot *****************
  4603 ;; Defined at:
  4604 ;;		line 394 in file "main.c"
  4605 ;; Parameters:    Size  Location     Type
  4606 ;;		None
  4607 ;; Auto vars:     Size  Location     Type
  4608 ;;		None
  4609 ;; Return value:  Size  Location     Type
  4610 ;;                  1    wreg      void 
  4611 ;; Registers used:
  4612 ;;		None
  4613 ;; Tracked objects:
  4614 ;;		On entry : 0/0
  4615 ;;		On exit  : 0/0
  4616 ;;		Unchanged: 0/0
  4617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4618 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4619 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4620 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4621 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4622 ;;Total ram usage:        0 bytes
  4623 ;; Hardware stack levels used:    1
  4624 ;; Hardware stack levels required when called:    1
  4625 ;; This function calls:
  4626 ;;		Nothing
  4627 ;; This function is called by:
  4628 ;;		_main
  4629 ;; This function uses a non-reentrant model
  4630 ;;
  4631                           
  4632                           	psect	text34
  4633  001A1E                     __ptext34:
  4634                           	opt stack 0
  4635  001A1E                     _fireShot:
  4636                           	opt stack 29
  4637                           
  4638                           ;main.c: 395: LATBbits.LATB1 = 1;
  4639                           
  4640                           ;incstack = 0
  4641  001A1E  828A               	bsf	3978,1,c	;volatile
  4642  001A20  0012               	return		;funcret
  4643  001A22                     __end_of_fireShot:
  4644                           	opt stack 0
  4645                           tblptru	equ	0xFF8
  4646                           tblptrh	equ	0xFF7
  4647                           tblptrl	equ	0xFF6
  4648                           tablat	equ	0xFF5
  4649                           prodh	equ	0xFF4
  4650                           prodl	equ	0xFF3
  4651                           intcon	equ	0xFF2
  4652                           intcon2	equ	0xFF1
  4653                           intcon3	equ	0xFF0
  4654                           indf0	equ	0xFEF
  4655                           postinc0	equ	0xFEE
  4656                           fsr0h	equ	0xFEA
  4657                           fsr0l	equ	0xFE9
  4658                           wreg	equ	0xFE8
  4659                           postdec1	equ	0xFE5
  4660                           fsr1l	equ	0xFE1
  4661                           indf2	equ	0xFDF
  4662                           postinc2	equ	0xFDE
  4663                           postdec2	equ	0xFDD
  4664                           fsr2h	equ	0xFDA
  4665                           fsr2l	equ	0xFD9
  4666                           status	equ	0xFD8
  4667                           
  4668 ;; *************** function _changeMode *****************
  4669 ;; Defined at:
  4670 ;;		line 365 in file "main.c"
  4671 ;; Parameters:    Size  Location     Type
  4672 ;;		None
  4673 ;; Auto vars:     Size  Location     Type
  4674 ;;		None
  4675 ;; Return value:  Size  Location     Type
  4676 ;;                  1    wreg      void 
  4677 ;; Registers used:
  4678 ;;		wreg, status,2
  4679 ;; Tracked objects:
  4680 ;;		On entry : 0/0
  4681 ;;		On exit  : 0/0
  4682 ;;		Unchanged: 0/0
  4683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4684 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4685 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4686 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4687 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4688 ;;Total ram usage:        0 bytes
  4689 ;; Hardware stack levels used:    1
  4690 ;; Hardware stack levels required when called:    1
  4691 ;; This function calls:
  4692 ;;		Nothing
  4693 ;; This function is called by:
  4694 ;;		_main
  4695 ;; This function uses a non-reentrant model
  4696 ;;
  4697                           
  4698                           	psect	text35
  4699  0019E4                     __ptext35:
  4700                           	opt stack 0
  4701  0019E4                     _changeMode:
  4702                           	opt stack 29
  4703                           
  4704                           ;main.c: 366: if (myModeState == MODE0){
  4705                           
  4706                           ;incstack = 0
  4707  0019E4  503C               	movf	_myModeState,w,c
  4708  0019E6  A4D8               	btfss	status,2,c
  4709  0019E8  D003               	goto	l222
  4710                           
  4711                           ;main.c: 367: myModeState=MODE1;
  4712  0019EA  0E01               	movlw	1
  4713  0019EC  6E3C               	movwf	_myModeState,c
  4714                           
  4715                           ;main.c: 368: }
  4716  0019EE  0012               	return	
  4717  0019F0                     l222:
  4718                           
  4719                           ;main.c: 369: else{
  4720                           ;main.c: 370: myModeState=MODE0;
  4721  0019F0  0E00               	movlw	0
  4722  0019F2  6E3C               	movwf	_myModeState,c
  4723  0019F4  0012               	return	
  4724  0019F6                     __end_of_changeMode:
  4725                           	opt stack 0
  4726                           tblptru	equ	0xFF8
  4727                           tblptrh	equ	0xFF7
  4728                           tblptrl	equ	0xFF6
  4729                           tablat	equ	0xFF5
  4730                           prodh	equ	0xFF4
  4731                           prodl	equ	0xFF3
  4732                           intcon	equ	0xFF2
  4733                           intcon2	equ	0xFF1
  4734                           intcon3	equ	0xFF0
  4735                           indf0	equ	0xFEF
  4736                           postinc0	equ	0xFEE
  4737                           fsr0h	equ	0xFEA
  4738                           fsr0l	equ	0xFE9
  4739                           wreg	equ	0xFE8
  4740                           postdec1	equ	0xFE5
  4741                           fsr1l	equ	0xFE1
  4742                           indf2	equ	0xFDF
  4743                           postinc2	equ	0xFDE
  4744                           postdec2	equ	0xFDD
  4745                           fsr2h	equ	0xFDA
  4746                           fsr2l	equ	0xFD9
  4747                           status	equ	0xFD8
  4748                           
  4749 ;; *************** function _activateTarget *****************
  4750 ;; Defined at:
  4751 ;;		line 374 in file "main.c"
  4752 ;; Parameters:    Size  Location     Type
  4753 ;;  targetNbr       2   18[COMRAM] short 
  4754 ;; Auto vars:     Size  Location     Type
  4755 ;;		None
  4756 ;; Return value:  Size  Location     Type
  4757 ;;                  1    wreg      void 
  4758 ;; Registers used:
  4759 ;;		wreg, status,2, status,0
  4760 ;; Tracked objects:
  4761 ;;		On entry : 0/0
  4762 ;;		On exit  : 0/0
  4763 ;;		Unchanged: 0/0
  4764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4765 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4766 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4767 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4768 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4769 ;;Total ram usage:        2 bytes
  4770 ;; Hardware stack levels used:    1
  4771 ;; Hardware stack levels required when called:    1
  4772 ;; This function calls:
  4773 ;;		Nothing
  4774 ;; This function is called by:
  4775 ;;		_main
  4776 ;; This function uses a non-reentrant model
  4777 ;;
  4778                           
  4779                           	psect	text36
  4780  001A10                     __ptext36:
  4781                           	opt stack 0
  4782  001A10                     _activateTarget:
  4783                           	opt stack 29
  4784                           
  4785                           ;main.c: 376: LATA=targetNbr+2;
  4786                           
  4787                           ;incstack = 0
  4788  001A10  5013               	movf	activateTarget@targetNbr,w,c
  4789  001A12  0F02               	addlw	2
  4790  001A14  6E89               	movwf	3977,c	;volatile
  4791                           
  4792                           ;main.c: 377: INTCON3bits.INT1E = 1;
  4793  001A16  86F0               	bsf	intcon3,3,c	;volatile
  4794  001A18  0012               	return		;funcret
  4795  001A1A                     __end_of_activateTarget:
  4796                           	opt stack 0
  4797                           tblptru	equ	0xFF8
  4798                           tblptrh	equ	0xFF7
  4799                           tblptrl	equ	0xFF6
  4800                           tablat	equ	0xFF5
  4801                           prodh	equ	0xFF4
  4802                           prodl	equ	0xFF3
  4803                           intcon	equ	0xFF2
  4804                           intcon2	equ	0xFF1
  4805                           intcon3	equ	0xFF0
  4806                           indf0	equ	0xFEF
  4807                           postinc0	equ	0xFEE
  4808                           fsr0h	equ	0xFEA
  4809                           fsr0l	equ	0xFE9
  4810                           wreg	equ	0xFE8
  4811                           postdec1	equ	0xFE5
  4812                           fsr1l	equ	0xFE1
  4813                           indf2	equ	0xFDF
  4814                           postinc2	equ	0xFDE
  4815                           postdec2	equ	0xFDD
  4816                           fsr2h	equ	0xFDA
  4817                           fsr2l	equ	0xFD9
  4818                           status	equ	0xFD8
  4819                           
  4820 ;; *************** function _activateLEDTarget *****************
  4821 ;; Defined at:
  4822 ;;		line 380 in file "main.c"
  4823 ;; Parameters:    Size  Location     Type
  4824 ;;  targetLED       2   18[COMRAM] PTR short 
  4825 ;;		 -> nextTarget(4), 
  4826 ;; Auto vars:     Size  Location     Type
  4827 ;;  ledNBR          2   26[COMRAM] short 
  4828 ;; Return value:  Size  Location     Type
  4829 ;;                  1    wreg      void 
  4830 ;; Registers used:
  4831 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4832 ;; Tracked objects:
  4833 ;;		On entry : 0/0
  4834 ;;		On exit  : 0/0
  4835 ;;		Unchanged: 0/0
  4836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4837 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4838 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4839 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4840 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4841 ;;Total ram usage:       10 bytes
  4842 ;; Hardware stack levels used:    1
  4843 ;; Hardware stack levels required when called:    1
  4844 ;; This function calls:
  4845 ;;		Nothing
  4846 ;; This function is called by:
  4847 ;;		_main
  4848 ;; This function uses a non-reentrant model
  4849 ;;
  4850                           
  4851                           	psect	text37
  4852  00120A                     __ptext37:
  4853                           	opt stack 0
  4854  00120A                     _activateLEDTarget:
  4855                           	opt stack 29
  4856                           
  4857                           ;main.c: 381: short ledNBR = 0;
  4858                           
  4859                           ;incstack = 0
  4860  00120A  0E00               	movlw	0
  4861  00120C  6E1C               	movwf	activateLEDTarget@ledNBR+1,c
  4862  00120E  0E00               	movlw	0
  4863  001210  6E1B               	movwf	activateLEDTarget@ledNBR,c
  4864                           
  4865                           ;main.c: 382: if (targetLED[0]<3){
  4866  001212  C013  FFD9         	movff	activateLEDTarget@targetLED,fsr2l
  4867  001216  C014  FFDA         	movff	activateLEDTarget@targetLED+1,fsr2h
  4868  00121A  0E01               	movlw	1
  4869  00121C  BEDB               	btfsc	plusw2,7,c
  4870  00121E  D007               	goto	u1540
  4871  001220  0E01               	movlw	1
  4872  001222  50DB               	movf	plusw2,w,c
  4873  001224  E12E               	bnz	l2516
  4874  001226  0E03               	movlw	3
  4875  001228  5CDE               	subwf	postinc2,w,c
  4876  00122A  B0D8               	btfsc	status,0,c
  4877  00122C  D02A               	goto	l230
  4878  00122E                     u1540:
  4879                           
  4880                           ;main.c: 383: ledNBR += (2*targetLED[0]+targetLED[1]<<2);
  4881  00122E  EE20 F002          	lfsr	2,2
  4882  001232  5013               	movf	activateLEDTarget@targetLED,w,c
  4883  001234  26D9               	addwf	fsr2l,f,c
  4884  001236  5014               	movf	activateLEDTarget@targetLED+1,w,c
  4885  001238  22DA               	addwfc	fsr2h,f,c
  4886  00123A  CFDE F015          	movff	postinc2,??_activateLEDTarget
  4887  00123E  CFDD F016          	movff	postdec2,??_activateLEDTarget+1
  4888  001242  C013  FFD9         	movff	activateLEDTarget@targetLED,fsr2l
  4889  001246  C014  FFDA         	movff	activateLEDTarget@targetLED+1,fsr2h
  4890  00124A  CFDE F017          	movff	postinc2,??_activateLEDTarget+2
  4891  00124E  CFDD F018          	movff	postdec2,??_activateLEDTarget+3
  4892  001252  90D8               	bcf	status,0,c
  4893  001254  3617               	rlcf	??_activateLEDTarget+2,f,c
  4894  001256  3618               	rlcf	??_activateLEDTarget+3,f,c
  4895  001258  5015               	movf	??_activateLEDTarget,w,c
  4896  00125A  2617               	addwf	??_activateLEDTarget+2,f,c
  4897  00125C  5016               	movf	??_activateLEDTarget+1,w,c
  4898  00125E  2218               	addwfc	??_activateLEDTarget+3,f,c
  4899  001260  90D8               	bcf	status,0,c
  4900  001262  3617               	rlcf	??_activateLEDTarget+2,f,c
  4901  001264  3618               	rlcf	??_activateLEDTarget+3,f,c
  4902  001266  90D8               	bcf	status,0,c
  4903  001268  3617               	rlcf	??_activateLEDTarget+2,f,c
  4904  00126A  3618               	rlcf	??_activateLEDTarget+3,f,c
  4905  00126C  5017               	movf	??_activateLEDTarget+2,w,c
  4906  00126E  261B               	addwf	activateLEDTarget@ledNBR,f,c
  4907  001270  5018               	movf	??_activateLEDTarget+3,w,c
  4908  001272  221C               	addwfc	activateLEDTarget@ledNBR+1,f,c
  4909                           
  4910                           ;main.c: 384: ledNBR += 227;
  4911  001274  0EE3               	movlw	227
  4912  001276  261B               	addwf	activateLEDTarget@ledNBR,f,c
  4913  001278  0E00               	movlw	0
  4914  00127A  221C               	addwfc	activateLEDTarget@ledNBR+1,f,c
  4915                           
  4916                           ;main.c: 385: LATC = ledNBR;
  4917  00127C  C01B  FF8B         	movff	activateLEDTarget@ledNBR,3979	;volatile
  4918                           
  4919                           ;main.c: 386: }
  4920  001280  0012               	return	
  4921  001282                     l230:
  4922  001282                     l2516:
  4923                           
  4924                           ;main.c: 387: else{
  4925                           ;main.c: 388: ledNBR += ((2*(targetLED[0]-3)+targetLED[1])<<5);
  4926  001282  0E40               	movlw	64
  4927  001284  6E15               	movwf	??_activateLEDTarget& (0+255),c
  4928  001286  0EFF               	movlw	255
  4929  001288  6E16               	movwf	(??_activateLEDTarget+1)& (0+255),c
  4930  00128A  EE20 F002          	lfsr	2,2
  4931  00128E  5013               	movf	activateLEDTarget@targetLED,w,c
  4932  001290  26D9               	addwf	fsr2l,f,c
  4933  001292  5014               	movf	activateLEDTarget@targetLED+1,w,c
  4934  001294  22DA               	addwfc	fsr2h,f,c
  4935  001296  CFDE F017          	movff	postinc2,??_activateLEDTarget+2
  4936  00129A  CFDD F018          	movff	postdec2,??_activateLEDTarget+3
  4937  00129E  C013  FFD9         	movff	activateLEDTarget@targetLED,fsr2l
  4938  0012A2  C014  FFDA         	movff	activateLEDTarget@targetLED+1,fsr2h
  4939  0012A6  CFDE F019          	movff	postinc2,??_activateLEDTarget+4
  4940  0012AA  CFDD F01A          	movff	postdec2,??_activateLEDTarget+5
  4941  0012AE  90D8               	bcf	status,0,c
  4942  0012B0  3619               	rlcf	??_activateLEDTarget+4,f,c
  4943  0012B2  361A               	rlcf	??_activateLEDTarget+5,f,c
  4944  0012B4  5017               	movf	??_activateLEDTarget+2,w,c
  4945  0012B6  2619               	addwf	??_activateLEDTarget+4,f,c
  4946  0012B8  5018               	movf	??_activateLEDTarget+3,w,c
  4947  0012BA  221A               	addwfc	??_activateLEDTarget+5,f,c
  4948  0012BC  0E05               	movlw	5
  4949  0012BE                     u1555:
  4950  0012BE  90D8               	bcf	status,0,c
  4951  0012C0  3619               	rlcf	??_activateLEDTarget+4,f,c
  4952  0012C2  361A               	rlcf	??_activateLEDTarget+5,f,c
  4953  0012C4  2EE8               	decfsz	wreg,f,c
  4954  0012C6  D7FB               	goto	u1555
  4955  0012C8  5015               	movf	??_activateLEDTarget,w,c
  4956  0012CA  2619               	addwf	??_activateLEDTarget+4,f,c
  4957  0012CC  5016               	movf	??_activateLEDTarget+1,w,c
  4958  0012CE  221A               	addwfc	??_activateLEDTarget+5,f,c
  4959  0012D0  5019               	movf	??_activateLEDTarget+4,w,c
  4960  0012D2  261B               	addwf	activateLEDTarget@ledNBR,f,c
  4961  0012D4  501A               	movf	??_activateLEDTarget+5,w,c
  4962  0012D6  221C               	addwfc	activateLEDTarget@ledNBR+1,f,c
  4963                           
  4964                           ;main.c: 389: ledNBR += 31;
  4965  0012D8  0E1F               	movlw	31
  4966  0012DA  261B               	addwf	activateLEDTarget@ledNBR,f,c
  4967  0012DC  0E00               	movlw	0
  4968  0012DE  221C               	addwfc	activateLEDTarget@ledNBR+1,f,c
  4969                           
  4970                           ;main.c: 390: LATC = ledNBR;
  4971  0012E0  C01B  FF8B         	movff	activateLEDTarget@ledNBR,3979	;volatile
  4972  0012E4  0012               	return	
  4973  0012E6                     __end_of_activateLEDTarget:
  4974                           	opt stack 0
  4975                           tblptru	equ	0xFF8
  4976                           tblptrh	equ	0xFF7
  4977                           tblptrl	equ	0xFF6
  4978                           tablat	equ	0xFF5
  4979                           prodh	equ	0xFF4
  4980                           prodl	equ	0xFF3
  4981                           intcon	equ	0xFF2
  4982                           intcon2	equ	0xFF1
  4983                           intcon3	equ	0xFF0
  4984                           indf0	equ	0xFEF
  4985                           postinc0	equ	0xFEE
  4986                           fsr0h	equ	0xFEA
  4987                           fsr0l	equ	0xFE9
  4988                           wreg	equ	0xFE8
  4989                           postdec1	equ	0xFE5
  4990                           fsr1l	equ	0xFE1
  4991                           indf2	equ	0xFDF
  4992                           postinc2	equ	0xFDE
  4993                           postdec2	equ	0xFDD
  4994                           plusw2	equ	0xFDB
  4995                           fsr2h	equ	0xFDA
  4996                           fsr2l	equ	0xFD9
  4997                           status	equ	0xFD8
  4998                           
  4999 ;; *************** function _rxIsr *****************
  5000 ;; Defined at:
  5001 ;;		line 242 in file "main.c"
  5002 ;; Parameters:    Size  Location     Type
  5003 ;;		None
  5004 ;; Auto vars:     Size  Location     Type
  5005 ;;		None
  5006 ;; Return value:  Size  Location     Type
  5007 ;;                  1    wreg      void 
  5008 ;; Registers used:
  5009 ;;		wreg, status,2, status,0
  5010 ;; Tracked objects:
  5011 ;;		On entry : 0/0
  5012 ;;		On exit  : 0/0
  5013 ;;		Unchanged: 0/0
  5014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5015 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5016 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5017 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5018 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5019 ;;Total ram usage:       18 bytes
  5020 ;; Hardware stack levels used:    1
  5021 ;; This function calls:
  5022 ;;		Nothing
  5023 ;; This function is called by:
  5024 ;;		Interrupt level 2
  5025 ;; This function uses a non-reentrant model
  5026 ;;
  5027                           
  5028                           	psect	intcode
  5029  000008                     __pintcode:
  5030                           	opt stack 0
  5031  000008                     _rxIsr:
  5032                           	opt stack 24
  5033                           
  5034                           ;incstack = 0
  5035  000008  824C               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  5036  00000A  CFFA F001          	movff	pclath,??_rxIsr
  5037  00000E  CFFB F002          	movff	pclatu,??_rxIsr+1
  5038  000012  CFE9 F003          	movff	fsr0l,??_rxIsr+2
  5039  000016  CFEA F004          	movff	fsr0h,??_rxIsr+3
  5040  00001A  CFE1 F005          	movff	fsr1l,??_rxIsr+4
  5041  00001E  CFE2 F006          	movff	fsr1h,??_rxIsr+5
  5042  000022  CFD9 F007          	movff	fsr2l,??_rxIsr+6
  5043  000026  CFDA F008          	movff	fsr2h,??_rxIsr+7
  5044  00002A  CFF3 F009          	movff	prodl,??_rxIsr+8
  5045  00002E  CFF4 F00A          	movff	prodh,??_rxIsr+9
  5046  000032  CFF6 F00B          	movff	tblptrl,??_rxIsr+10
  5047  000036  CFF7 F00C          	movff	tblptrh,??_rxIsr+11
  5048  00003A  CFF8 F00D          	movff	tblptru,??_rxIsr+12
  5049  00003E  CFF5 F00E          	movff	tablat,??_rxIsr+13
  5050  000042  C04C  F00F         	movff	btemp,??_rxIsr+14
  5051  000046  C04D  F010         	movff	btemp+1,??_rxIsr+15
  5052  00004A  C04E  F011         	movff	btemp+2,??_rxIsr+16
  5053  00004E  C04F  F012         	movff	btemp+3,??_rxIsr+17
  5054                           
  5055                           ;main.c: 245: if(PIR1bits.RC1IF && PIE1bits.RC1IE) {
  5056  000052  BA9E               	btfsc	3998,5,c	;volatile
  5057  000054  AA9D               	btfss	3997,5,c	;volatile
  5058  000056  D052               	goto	i2l189
  5059                           
  5060                           ;main.c: 246: if(RCSTAbits.FERR || RCSTAbits.OERR) {
  5061  000058  B4AB               	btfsc	4011,2,c	;volatile
  5062  00005A  D002               	goto	i2u61_40
  5063  00005C  A2AB               	btfss	4011,1,c	;volatile
  5064  00005E  D003               	goto	i2l186
  5065  000060                     i2u61_40:
  5066                           
  5067                           ;main.c: 247: ErrorUART= 1;
  5068  000060  0E01               	movlw	1
  5069  000062  6E39               	movwf	_ErrorUART,c
  5070                           
  5071                           ;main.c: 248: }
  5072  000064  D04B               	goto	i2l189
  5073  000066                     i2l186:
  5074                           
  5075                           ;main.c: 249: else {
  5076                           ;main.c: 250: rxChar = RCREG1;
  5077  000066  CFAE F03B          	movff	4014,_rxChar	;volatile
  5078                           
  5079                           ;main.c: 251: rxFlag=1;
  5080  00006A  0E01               	movlw	1
  5081  00006C  6E38               	movwf	_rxFlag,c
  5082                           
  5083                           ;main.c: 252: switch(rxChar){
  5084  00006E  D026               	goto	i2l190
  5085  000070                     
  5086                           ;main.c: 254: reloadFlag=1;
  5087  000070  0E01               	movlw	1
  5088  000072  6E37               	movwf	_reloadFlag,c
  5089                           
  5090                           ;main.c: 255: break;
  5091  000074  D042               	goto	i2l192
  5092  000076                     
  5093                           ;main.c: 257: modeFlag=1;
  5094  000076  0E01               	movlw	1
  5095  000078  6E36               	movwf	_modeFlag,c
  5096                           
  5097                           ;main.c: 258: break;
  5098  00007A  D03F               	goto	i2l192
  5099  00007C                     
  5100                           ;main.c: 260: pewFlag=1;
  5101  00007C  0E01               	movlw	1
  5102  00007E  6E35               	movwf	_pewFlag,c
  5103                           
  5104                           ;main.c: 261: break;
  5105  000080  D03C               	goto	i2l192
  5106  000082                     
  5107                           ;main.c: 263: maxAmmo = 6;
  5108  000082  0E00               	movlw	0
  5109  000084  6E47               	movwf	_maxAmmo+1,c
  5110  000086  0E06               	movlw	6
  5111  000088  D007               	goto	L7
  5112  00008A                     
  5113                           ;main.c: 266: maxAmmo = 12;
  5114  00008A  0E00               	movlw	0
  5115  00008C  6E47               	movwf	_maxAmmo+1,c
  5116  00008E  0E0C               	movlw	12
  5117  000090  D003               	goto	L7
  5118  000092                     
  5119                           ;main.c: 269: maxAmmo = 24;
  5120  000092  0E00               	movlw	0
  5121  000094  6E47               	movwf	_maxAmmo+1,c
  5122  000096  0E18               	movlw	24
  5123  000098                     L7:
  5124  000098  6E46               	movwf	_maxAmmo,c
  5125                           
  5126                           ;main.c: 270: break;
  5127  00009A  D02F               	goto	i2l192
  5128  00009C                     
  5129                           ;main.c: 272: singleGameTime = 31;
  5130  00009C  0E00               	movlw	0
  5131  00009E  6E49               	movwf	_singleGameTime+1,c
  5132  0000A0  0E1F               	movlw	31
  5133  0000A2  D007               	goto	L9
  5134  0000A4                     
  5135                           ;main.c: 275: singleGameTime = 61;
  5136  0000A4  0E00               	movlw	0
  5137  0000A6  6E49               	movwf	_singleGameTime+1,c
  5138  0000A8  0E3D               	movlw	61
  5139  0000AA  D003               	goto	L9
  5140  0000AC                     
  5141                           ;main.c: 278: singleGameTime = 121;
  5142  0000AC  0E00               	movlw	0
  5143  0000AE  6E49               	movwf	_singleGameTime+1,c
  5144  0000B0  0E79               	movlw	121
  5145  0000B2                     L9:
  5146  0000B2  6E48               	movwf	_singleGameTime,c
  5147                           
  5148                           ;main.c: 279: break;
  5149  0000B4  D022               	goto	i2l192
  5150  0000B6                     
  5151                           ;main.c: 281: startGame = 1;
  5152  0000B6  0E01               	movlw	1
  5153  0000B8  6E31               	movwf	_startGame,c
  5154                           
  5155                           ;main.c: 283: }
  5156                           
  5157                           ;main.c: 282: break;
  5158  0000BA  D01F               	goto	i2l192
  5159  0000BC                     i2l190:
  5160  0000BC  503B               	movf	_rxChar,w,c
  5161                           
  5162                           ; Switch size 1, requested type "space"
  5163                           ; Number of cases is 10, Range of values is 10 to 221
  5164                           ; switch strategies available:
  5165                           ; Name         Instructions Cycles
  5166                           ; simple_byte           31    16 (average)
  5167                           ;	Chosen strategy is simple_byte
  5168  0000BE  0A0A               	xorlw	10	; case 10
  5169  0000C0  B4D8               	btfsc	status,2,c
  5170  0000C2  D7DF               	goto	i2l195
  5171  0000C4  0A01               	xorlw	1	; case 11
  5172  0000C6  B4D8               	btfsc	status,2,c
  5173  0000C8  D7E0               	goto	i2l196
  5174  0000CA  0A07               	xorlw	7	; case 12
  5175  0000CC  B4D8               	btfsc	status,2,c
  5176  0000CE  D7E1               	goto	i2l197
  5177  0000D0  0AAC               	xorlw	172	; case 160
  5178  0000D2  B4D8               	btfsc	status,2,c
  5179  0000D4  D7E3               	goto	i2l198
  5180  0000D6  0A0A               	xorlw	10	; case 170
  5181  0000D8  B4D8               	btfsc	status,2,c
  5182  0000DA  D7CA               	goto	i2l191
  5183  0000DC  0A1A               	xorlw	26	; case 176
  5184  0000DE  B4D8               	btfsc	status,2,c
  5185  0000E0  D7E1               	goto	i2l199
  5186  0000E2  0A0B               	xorlw	11	; case 187
  5187  0000E4  B4D8               	btfsc	status,2,c
  5188  0000E6  D7C7               	goto	i2l193
  5189  0000E8  0A7B               	xorlw	123	; case 192
  5190  0000EA  B4D8               	btfsc	status,2,c
  5191  0000EC  D7DF               	goto	i2l200
  5192  0000EE  0A0C               	xorlw	12	; case 204
  5193  0000F0  B4D8               	btfsc	status,2,c
  5194  0000F2  D7C4               	goto	i2l194
  5195  0000F4  0A11               	xorlw	17	; case 221
  5196  0000F6  B4D8               	btfsc	status,2,c
  5197  0000F8  D7DE               	goto	i2l201
  5198  0000FA                     i2l192:
  5199                           
  5200                           ;main.c: 284: PIE1bits.RC1IE = 0;
  5201  0000FA  9A9D               	bcf	3997,5,c	;volatile
  5202  0000FC                     i2l189:
  5203                           
  5204                           ;main.c: 285: }
  5205                           ;main.c: 286: }
  5206                           ;main.c: 289: if(INTCON3bits.INT1IF && INTCON3bits.INT1E){
  5207  0000FC  B0F0               	btfsc	intcon3,0,c	;volatile
  5208  0000FE  A6F0               	btfss	intcon3,3,c	;volatile
  5209  000100  D004               	goto	i2l202
  5210                           
  5211                           ;main.c: 290: capteurFlag= 1;
  5212  000102  0E01               	movlw	1
  5213  000104  6E34               	movwf	_capteurFlag,c
  5214                           
  5215                           ;main.c: 291: INTCON3bits.INT1E = 0;
  5216  000106  96F0               	bcf	intcon3,3,c	;volatile
  5217                           
  5218                           ;main.c: 292: INTCON3bits.INT1F = 0;
  5219  000108  90F0               	bcf	intcon3,0,c	;volatile
  5220  00010A                     i2l202:
  5221                           
  5222                           ;main.c: 293: }
  5223                           ;main.c: 296: if (INTCONbits.TMR0IF && INTCONbits.TMR0IE ){
  5224  00010A  B4F2               	btfsc	intcon,2,c	;volatile
  5225  00010C  AAF2               	btfss	intcon,5,c	;volatile
  5226  00010E  D004               	goto	i2l203
  5227                           
  5228                           ;main.c: 297: timerFlag = 1;
  5229  000110  0E01               	movlw	1
  5230  000112  6E33               	movwf	_timerFlag,c
  5231                           
  5232                           ;main.c: 298: INTCONbits.TMR0IF = 0;
  5233  000114  94F2               	bcf	intcon,2,c	;volatile
  5234                           
  5235                           ;main.c: 299: INTCONbits.TMR0IE = 0;
  5236  000116  9AF2               	bcf	intcon,5,c	;volatile
  5237  000118                     i2l203:
  5238  000118  C012  F04F         	movff	??_rxIsr+17,btemp+3
  5239  00011C  C011  F04E         	movff	??_rxIsr+16,btemp+2
  5240  000120  C010  F04D         	movff	??_rxIsr+15,btemp+1
  5241  000124  C00F  F04C         	movff	??_rxIsr+14,btemp
  5242  000128  C00E  FFF5         	movff	??_rxIsr+13,tablat
  5243  00012C  C00D  FFF8         	movff	??_rxIsr+12,tblptru
  5244  000130  C00C  FFF7         	movff	??_rxIsr+11,tblptrh
  5245  000134  C00B  FFF6         	movff	??_rxIsr+10,tblptrl
  5246  000138  C00A  FFF4         	movff	??_rxIsr+9,prodh
  5247  00013C  C009  FFF3         	movff	??_rxIsr+8,prodl
  5248  000140  C008  FFDA         	movff	??_rxIsr+7,fsr2h
  5249  000144  C007  FFD9         	movff	??_rxIsr+6,fsr2l
  5250  000148  C006  FFE2         	movff	??_rxIsr+5,fsr1h
  5251  00014C  C005  FFE1         	movff	??_rxIsr+4,fsr1l
  5252  000150  C004  FFEA         	movff	??_rxIsr+3,fsr0h
  5253  000154  C003  FFE9         	movff	??_rxIsr+2,fsr0l
  5254  000158  C002  FFFB         	movff	??_rxIsr+1,pclatu
  5255  00015C  C001  FFFA         	movff	??_rxIsr,pclath
  5256  000160  924C               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  5257  000162  0011               	retfie		f
  5258  000164                     __end_of_rxIsr:
  5259                           	opt stack 0
  5260                           pclatu	equ	0xFFB
  5261                           pclath	equ	0xFFA
  5262                           tblptru	equ	0xFF8
  5263                           tblptrh	equ	0xFF7
  5264                           tblptrl	equ	0xFF6
  5265                           tablat	equ	0xFF5
  5266                           prodh	equ	0xFF4
  5267                           prodl	equ	0xFF3
  5268                           intcon	equ	0xFF2
  5269                           intcon2	equ	0xFF1
  5270                           intcon3	equ	0xFF0
  5271                           indf0	equ	0xFEF
  5272                           postinc0	equ	0xFEE
  5273                           fsr0h	equ	0xFEA
  5274                           fsr0l	equ	0xFE9
  5275                           wreg	equ	0xFE8
  5276                           postdec1	equ	0xFE5
  5277                           fsr1h	equ	0xFE2
  5278                           fsr1l	equ	0xFE1
  5279                           indf2	equ	0xFDF
  5280                           postinc2	equ	0xFDE
  5281                           postdec2	equ	0xFDD
  5282                           plusw2	equ	0xFDB
  5283                           fsr2h	equ	0xFDA
  5284                           fsr2l	equ	0xFD9
  5285                           status	equ	0xFD8
  5286                           pclatu	equ	0xFFB
  5287                           pclath	equ	0xFFA
  5288                           tblptru	equ	0xFF8
  5289                           tblptrh	equ	0xFF7
  5290                           tblptrl	equ	0xFF6
  5291                           tablat	equ	0xFF5
  5292                           prodh	equ	0xFF4
  5293                           prodl	equ	0xFF3
  5294                           intcon	equ	0xFF2
  5295                           intcon2	equ	0xFF1
  5296                           intcon3	equ	0xFF0
  5297                           indf0	equ	0xFEF
  5298                           postinc0	equ	0xFEE
  5299                           fsr0h	equ	0xFEA
  5300                           fsr0l	equ	0xFE9
  5301                           wreg	equ	0xFE8
  5302                           postdec1	equ	0xFE5
  5303                           fsr1h	equ	0xFE2
  5304                           fsr1l	equ	0xFE1
  5305                           indf2	equ	0xFDF
  5306                           postinc2	equ	0xFDE
  5307                           postdec2	equ	0xFDD
  5308                           plusw2	equ	0xFDB
  5309                           fsr2h	equ	0xFDA
  5310                           fsr2l	equ	0xFD9
  5311                           status	equ	0xFD8
  5312                           
  5313                           	psect	rparam
  5314  0000                     pclatu	equ	0xFFB
  5315                           pclath	equ	0xFFA
  5316                           tblptru	equ	0xFF8
  5317                           tblptrh	equ	0xFF7
  5318                           tblptrl	equ	0xFF6
  5319                           tablat	equ	0xFF5
  5320                           prodh	equ	0xFF4
  5321                           prodl	equ	0xFF3
  5322                           intcon	equ	0xFF2
  5323                           intcon2	equ	0xFF1
  5324                           intcon3	equ	0xFF0
  5325                           indf0	equ	0xFEF
  5326                           postinc0	equ	0xFEE
  5327                           fsr0h	equ	0xFEA
  5328                           fsr0l	equ	0xFE9
  5329                           wreg	equ	0xFE8
  5330                           postdec1	equ	0xFE5
  5331                           fsr1h	equ	0xFE2
  5332                           fsr1l	equ	0xFE1
  5333                           indf2	equ	0xFDF
  5334                           postinc2	equ	0xFDE
  5335                           postdec2	equ	0xFDD
  5336                           plusw2	equ	0xFDB
  5337                           fsr2h	equ	0xFDA
  5338                           fsr2l	equ	0xFD9
  5339                           status	equ	0xFD8
  5340                           
  5341                           	psect	temp
  5342  00004C                     btemp:
  5343                           	opt stack 0
  5344  00004C                     	ds	1
  5345  0000                     int$flags	set	btemp
  5346  0000                     wtemp6	set	btemp+1
  5347                           pclatu	equ	0xFFB
  5348                           pclath	equ	0xFFA
  5349                           tblptru	equ	0xFF8
  5350                           tblptrh	equ	0xFF7
  5351                           tblptrl	equ	0xFF6
  5352                           tablat	equ	0xFF5
  5353                           prodh	equ	0xFF4
  5354                           prodl	equ	0xFF3
  5355                           intcon	equ	0xFF2
  5356                           intcon2	equ	0xFF1
  5357                           intcon3	equ	0xFF0
  5358                           indf0	equ	0xFEF
  5359                           postinc0	equ	0xFEE
  5360                           fsr0h	equ	0xFEA
  5361                           fsr0l	equ	0xFE9
  5362                           wreg	equ	0xFE8
  5363                           postdec1	equ	0xFE5
  5364                           fsr1h	equ	0xFE2
  5365                           fsr1l	equ	0xFE1
  5366                           indf2	equ	0xFDF
  5367                           postinc2	equ	0xFDE
  5368                           postdec2	equ	0xFDD
  5369                           plusw2	equ	0xFDB
  5370                           fsr2h	equ	0xFDA
  5371                           fsr2l	equ	0xFD9
  5372                           status	equ	0xFD8


Data Sizes:
    Strings     91
    Constant    10
    Data        10
    BSS         23
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     42      75
    BANK0           160     13      13
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          250      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_7(CODE[3]), STR_4(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 3
		 -> printEndGame@statArray(COMRAM[3]), printStat@statArray(COMRAM[3]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    putStringLCD@input	PTR const unsigned char  size(2) Largest target is 22
		 -> STR_9(CODE[10]), STR_8(CODE[22]), printEndGame@statArray(COMRAM[3]), STR_6(CODE[3]), 
		 -> STR_5(CODE[2]), printStat@statArray(COMRAM[3]), STR_3(CODE[20]), STR_2(CODE[16]), 
		 -> STR_1(CODE[20]), 

    activateLEDTarget@targetLED	PTR short  size(2) Largest target is 4
		 -> nextTarget(COMRAM[4]), 

    getRandomTarget@Target	PTR short  size(2) Largest target is 4
		 -> nextTarget(COMRAM[4]), 


Critical Paths under _main in COMRAM

    _main->_printEndGame
    _printStartGame->_putStringLCD
    _printRemTime->_printStat
    _printRemBullets->_printStat
    _printPoints->_printStat
    _printStat->_sprintf
    _printMBED->_putStringLCD
    _printEndGame->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _putStringLCD->_putchLCD
    _putchLCD->_fliplr
    _moveCursor->_fliplr
    _initialisation_LCD->_displayCtrl
    _displayCtrl->_readBusyFlag
    _clearDisplay->_readBusyFlag
    _readBusyFlag->_spi_Send_Read
    _getRandomTarget->___awmod
    _rand->___lmul
    ___awmod->_rand

Critical Paths under _rxIsr in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_printPoints
    _main->_printRemBullets
    _main->_printRemTime
    _printStat->_sprintf
    _printEndGame->_sprintf

Critical Paths under _rxIsr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _rxIsr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _rxIsr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _rxIsr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _rxIsr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _rxIsr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _rxIsr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _rxIsr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _rxIsr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _rxIsr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _rxIsr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _rxIsr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _rxIsr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _rxIsr in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0   29695
                                              9 BANK0      4     4      0
                  _activateLEDTarget
                     _activateTarget
                         _changeMode
                           _fireShot
                    _getRandomTarget
                 _initialisation_LCD
                       _printEndGame
                          _printMBED
                        _printPoints
                    _printRemBullets
                       _printRemTime
                     _printStartGame
                 _setInterruptConfig
                         _setModeLED
                       _setPinConfig
                     _setTimerConfig
                      _setUARTconfig
                           _stopShot
                       _toggleGunLED
                           _waitASec
 ---------------------------------------------------------------------------------
 (1) _toggleGunLED                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _stopShot                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setUARTconfig                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setTimerConfig                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setPinConfig                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setModeLED                                           1     1      0      22
                                             18 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _setInterruptConfig                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _printStartGame                                       0     0      0    3023
                       _clearDisplay
                         _moveCursor
                       _putStringLCD
                           _waitASec
 ---------------------------------------------------------------------------------
 (1) _printRemTime                                         2     0      2    5406
                                              7 BANK0      2     0      2
                         _moveCursor
                          _printStat
 ---------------------------------------------------------------------------------
 (1) _printRemBullets                                      2     0      2    5406
                                              7 BANK0      2     0      2
                         _moveCursor
                          _printStat
 ---------------------------------------------------------------------------------
 (1) _printPoints                                          2     0      2    5406
                                              7 BANK0      2     0      2
                         _moveCursor
                          _printStat
 ---------------------------------------------------------------------------------
 (2) _printStat                                            5     3      2    3606
                                             37 COMRAM     5     3      2
                       _putStringLCD
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _printMBED                                            0     0      0    3023
                       _clearDisplay
                         _moveCursor
                       _putStringLCD
                           _waitASec
 ---------------------------------------------------------------------------------
 (1) _waitASec                                             3     3      0      46
                                             18 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _printEndGame                                         5     3      2    5169
                                             37 COMRAM     5     3      2
                       _clearDisplay
                         _moveCursor
                       _putStringLCD
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             23    17      6    1889
                                             30 COMRAM     7     1      6
                                              0 BANK0      7     7      0
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     412
                                             25 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     421
                                             18 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _putStringLCD                                         6     4      2    1231
                                             22 COMRAM     6     4      2
                           _putchLCD
 ---------------------------------------------------------------------------------
 (3) _putchLCD                                             1     1      0     291
                                             21 COMRAM     1     1      0
                             _fliplr
                       _readBusyFlag
                      _spi_Send_Read
 ---------------------------------------------------------------------------------
 (2) _moveCursor                                           5     1      4    1679
                                             21 COMRAM     5     1      4
                             _fliplr
                       _readBusyFlag
                      _spi_Send_Read
 ---------------------------------------------------------------------------------
 (4) _fliplr                                               3     3      0     157
                                             18 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _initialisation_LCD                                   0     0      0     462
                       _clearDisplay
                        _displayCtrl
                _initialisation_PORT
                 _initialisation_SPI
 ---------------------------------------------------------------------------------
 (2) _initialisation_SPI                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _initialisation_PORT                                  1     1      0       0
                                             18 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _displayCtrl                                          4     2      2     395
                                             20 COMRAM     4     2      2
                       _readBusyFlag
                      _spi_Send_Read
 ---------------------------------------------------------------------------------
 (2) _clearDisplay                                         0     0      0      67
                       _readBusyFlag
                      _spi_Send_Read
 ---------------------------------------------------------------------------------
 (4) _readBusyFlag                                         1     1      0      45
                                             19 COMRAM     1     1      0
                      _spi_Send_Read
 ---------------------------------------------------------------------------------
 (4) _spi_Send_Read                                        1     1      0      22
                                             18 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _getRandomTarget                                      2     0      2    1221
                                             38 COMRAM     2     0      2
                            ___awmod
                               _rand
 ---------------------------------------------------------------------------------
 (2) _rand                                                 2     0      2     456
                                             30 COMRAM     2     0      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     456
                                             18 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     613
                                             32 COMRAM     6     2      4
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (1) _fireShot                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _changeMode                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _activateTarget                                       2     0      2     121
                                             18 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _activateLEDTarget                                   10     8      2     322
                                             18 COMRAM    10     8      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _rxIsr                                               18    18      0       0
                                              0 COMRAM    18    18      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _activateLEDTarget
   _activateTarget
   _changeMode
   _fireShot
   _getRandomTarget
     ___awmod
       _rand (ARG)
         ___lmul
     _rand
       ___lmul
   _initialisation_LCD
     _clearDisplay
       _readBusyFlag
         _spi_Send_Read
       _spi_Send_Read
     _displayCtrl
       _readBusyFlag
         _spi_Send_Read
       _spi_Send_Read
     _initialisation_PORT
     _initialisation_SPI
   _printEndGame
     _clearDisplay
       _readBusyFlag
         _spi_Send_Read
       _spi_Send_Read
     _moveCursor
       _fliplr
       _readBusyFlag
         _spi_Send_Read
       _spi_Send_Read
     _putStringLCD
       _putchLCD
         _fliplr
         _readBusyFlag
           _spi_Send_Read
         _spi_Send_Read
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
   _printMBED
     _clearDisplay
       _readBusyFlag
         _spi_Send_Read
       _spi_Send_Read
     _moveCursor
       _fliplr
       _readBusyFlag
         _spi_Send_Read
       _spi_Send_Read
     _putStringLCD
       _putchLCD
         _fliplr
         _readBusyFlag
           _spi_Send_Read
         _spi_Send_Read
     _waitASec
   _printPoints
     _moveCursor
       _fliplr
       _readBusyFlag
         _spi_Send_Read
       _spi_Send_Read
     _printStat
       _putStringLCD
         _putchLCD
           _fliplr
           _readBusyFlag
             _spi_Send_Read
           _spi_Send_Read
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
   _printRemBullets
     _moveCursor
       _fliplr
       _readBusyFlag
         _spi_Send_Read
       _spi_Send_Read
     _printStat
       _putStringLCD
         _putchLCD
           _fliplr
           _readBusyFlag
             _spi_Send_Read
           _spi_Send_Read
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
   _printRemTime
     _moveCursor
       _fliplr
       _readBusyFlag
         _spi_Send_Read
       _spi_Send_Read
     _printStat
       _putStringLCD
         _putchLCD
           _fliplr
           _readBusyFlag
             _spi_Send_Read
           _spi_Send_Read
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
   _printStartGame
     _clearDisplay
       _readBusyFlag
         _spi_Send_Read
       _spi_Send_Read
     _moveCursor
       _fliplr
       _readBusyFlag
         _spi_Send_Read
       _spi_Send_Read
     _putStringLCD
       _putchLCD
         _fliplr
         _readBusyFlag
           _spi_Send_Read
         _spi_Send_Read
     _waitASec
   _setInterruptConfig
   _setModeLED
   _setPinConfig
   _setTimerConfig
   _setUARTconfig
   _stopShot
   _toggleGunLED
   _waitASec

 _rxIsr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DF9      0       0      33        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK13           FA      0       0      31        0.0%
BANK13              FA      0       0      32        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      D       D       5        8.1%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     2A      4B       1       79.8%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      58       8        0.0%
DATA                 0      0      58       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.43 build -156212558 
Symbol Table                                                                                   Tue Dec 05 01:07:47 2017

                ?_displayCtrl 0015                  _putStringLCD 12E6                           l230 1282  
                         l222 19F0                           l150 0EBE                           l151 1048  
                         l152 0F02                           l144 0E82                           l401 10E2  
                         l241 193E                           l153 106E                           l161 0FBA  
                         l145 0E8E                           l242 1932                           l162 0FA2  
                         l154 0F1C                           l331 19D8                           l403 1112  
                         l171 1014                           l155 0F44                           l244 1938  
                         l156 0F4A                           l148 0E9C                           l173 1020  
                         l165 0FC6                           l157 0F5A                           l149 0EAC  
                         l174 103C                           l343 16A6                           l407 1170  
                         l159 0F70                           l600 13AA                           l424 14B2  
                         l408 11D2                           l248 1A00                           l168 0FD6  
                         l601 13B4                           l425 14C6                           l409 1176  
                         l169 0FF0                           l602 13C2                           l282 147C  
                         l363 160C                           l355 1802                           l291 186E  
                         l283 1494                           l348 1326                           l284 1494  
                         l365 1614                           l349 12F0                           l293 1882  
                         l394 1094                           l395 10B0                           l820 1536  
                         l821 1540                           l830 16F6                           l831 1700  
                         l816 1516                           l593 1370                           l817 150E  
                         l594 137C                           l826 16DE                           l827 16D6  
                         l596 1392                           l597 138A                  ___awmod@sign 0026  
                 _totalPoints 002B                           wreg 000FE8                          l2232 1118  
                        l2326 147C                          l2516 1282                          l2604 0F18  
                        l2278 185E                          l2644 0F8C                          l2590 0EBE  
                        l2688 1010                          STR_1 0E35                          STR_2 0E49  
                        STR_3 0E21                          STR_4 0E63                          STR_5 0E61  
                        STR_6 0E60                          STR_7 0E63                          STR_8 0E0B  
                        STR_9 0E59                          u1210 151A                          u1240 16E2  
                        u1410 1608                          u1330 1154                          u1260 131E  
                        _LATA 000F89                          u1510 1396                          u1270 1354  
                        u1350 11DE                          _LATC 000F8B                          u1360 11FC  
                        u1450 146E                          u1267 1314                          u1540 122E  
                        u1277 134A                          u1555 12BE                          u1740 1074  
                        u1670 0FAA                          u1757 1874                          u1767 1724  
                        u1777 1732                          u1787 1740                          _main 0E68  
                        _rand 159C                          fsr0h 000FEA                          fsr1h 000FE2  
                        indf0 000FEF                          fsr2h 000FDA                          fsr0l 000FE9  
                        indf2 000FDF                          fsr1l 000FE1                          fsr2l 000FD9  
                        btemp 004C                          prodh 000FF4                          prodl 000FF3  
                        start 0164                  ___param_bank 000000          __end_of_clearDisplay 192E  
     __size_of_setTimerConfig 0014                   fliplr@input 0015             putStringLCD@input 0017  
                       ?_main 0001                         ?_rand 001F               __end_of___awmod 13CC  
             __end_of___lwdiv 154A                         i2l200 00AC                         i2l201 00B6  
             __end_of___lwmod 170A                         i2l202 010A                         i2l203 0118  
                       i2l190 00BC                         i2l191 0070                         i2l192 00FA  
                       i2l193 0076                         i2l194 007C                         i2l186 0066  
                       i2l195 0082                         i2l196 008A                         i2l189 00FC  
                       i2l197 0092                         i2l198 009C                         i2l199 00A4  
               printStat@stat 0026                         _TRISA 000F92                         _TRISC 000F94  
                       _TRISD 000F95           ___lmul@multiplicand 0017   __size_of_initialisation_LCD 001C  
             __end_of_dpowers 0E0B   __size_of_initialisation_SPI 003E                         _randx 0042  
                       _rxIsr 0008               _getRandomTarget 163A                         main@i 006B  
  __size_of_activateLEDTarget 00DC                         pclath 000FFA                         tablat 000FF5  
                       plusw2 000FDB                         status 000FD8                         wtemp6 004D  
             __end_of_sprintf 120A               __initialization 17C2                _activateTarget 1A10  
                __end_of_main 1086                  __end_of_rand 15EE         getRandomTarget@Target 0027  
              _transferedData 003A                        ??_main 0069                        ??_rand 0021  
               __activetblptr 000003                 ?_readBusyFlag 0001                        _ANCON1 000E47  
                      ?_rxIsr 0001      __size_of_printRemBullets 0022             spi_Send_Read@byte 0013  
                      _RCREG1 000FAE                        _RCSTA1 000FAB                        _OSCCON 000FD3  
                      _SPBRG1 000FAF                        _TXREG1 000FAD                        _TXSTA1 000FAC  
      __end_of_activateTarget 1A1A                __CFG_XINST$OFF 000000                 putchLCD@input 0016  
            __end_of_fireShot 1A22                        ___lmul 14A2              ??_printStartGame 001D  
                   ??___awmod 0025                     ??___lwdiv 0017                     ??___lwmod 001E  
__size_of_initialisation_PORT 0040                        _fliplr 154A                        clear_0 17E8  
                      _rxChar 003B                        _rxFlag 0038               ___awmod@divisor 0023  
        __size_of_displayCtrl 0044               ___awmod@counter 0025                ??_readBusyFlag 0014  
            __end_of_waitASec 1884                  __pdataCOMRAM 0042       __end_of_getRandomTarget 1684  
                __mediumconst 0000                        tblptrh 000FF7                        tblptrl 000FF6  
                      tblptru 000FF8              __end_of_putchLCD 1828                     ??_sprintf 0025  
            __end_of_stopShot 1A1E                  ?_printPoints 0067         printRemTime@nbSeconds 0067  
                  __accesstop 0060       __end_of__initialization 17EE       activateLEDTarget@ledNBR 001B  
       __size_of_clearDisplay 0022                 ___rparam_used 000001               ?_activateTarget 0013  
              _setTimerConfig 19BE                __pcstackCOMRAM 0001             moveCursor@address 001A  
 __size_of_setInterruptConfig 001E                 __end_of_rxIsr 0164        __size_of_setUARTconfig 0022  
                _clearDisplay 190C                       ??_rxIsr 0001                    _changeMode 19E4  
               putStringLCD@i 001B                 ?_setPinConfig 0001             ??_printRemBullets 002B  
      __end_of_setTimerConfig 19D2         __end_of_spi_Send_Read 19E4                       ?___lmul 0013  
                     ?_fliplr 0001                ___lmul@product 001B             displayCtrl@cursor 0015  
          __size_of_printMBED 002E              ?_getRandomTarget 0027            __size_of_printStat 0068  
                     i2u61_40 0060                       _SSP2BUF 000F03                     ?_fireShot 0001  
       printEndGame@statArray 0028                ??_setPinConfig 0013          __end_of_readBusyFlag 19BE  
             ?_setTimerConfig 0001                       __Hparam 0000                     ?_waitASec 0001  
                     __Lparam 0000           printPoints@nbPoints 0067                 _setUARTconfig 1884  
             __size_of___lmul 0056                     ?_putchLCD 0001                       ___awmod 135C  
                     ___lwdiv 14F8                       ___lwmod 16C8                  __psmallconst 0E00  
             __size_of_fliplr 0052                displayCtrl@BCD 0018                     ?_stopShot 0001  
                     __pcinit 17C2                       _endFlag 0032                       __ramtop 0E00  
                     __ptext0 0E68                       __ptext1 19F6                       __ptext2 1A1A  
                     __ptext3 1884                       __ptext4 19BE                       __ptext5 196C  
                     __ptext6 192E                       __ptext7 194E                       __ptext8 1788  
                     __ptext9 18A6                     _T0CONbits 000FD5                       _maxAmmo 0046  
                     _dpowers 0E01                       _pewFlag 0035    __end_of_initialisation_LCD 19A4  
            ___awmod@dividend 0021    __end_of_initialisation_SPI 1788                       _myState 003D  
                     _sprintf 1086                    ??_fireShot 0013                    _nextTarget 003E  
        end_of_initialization 17EE           _initialisation_PORT 170A                    _setModeLED 192E  
                 ?_changeMode 0001                    _reloadFlag 0037          __size_of_printPoints 0022  
                  _moveCursor 15EE             __end_of_printMBED 1856                    ??_waitASec 0013  
              ?_setUARTconfig 0001             __end_of_printStat 14A2                 ?_printEndGame 0026  
                   _RCSTAbits 000FAB                       postdec1 000FE5                       postdec2 000FDD  
                     postinc0 000FEE                       postinc2 000FDE                    ??_putchLCD 0016  
        ?_initialisation_PORT 0001                     _RPOR22_23 000E1D                     _RPOR24_25 000E1E  
                   _RPOR26_27 000E1F                 ?_printRemTime 0067                    ??_stopShot 0013  
        readBusyFlag@retValue 0014                     _TRISAbits 000F92      printRemBullets@nbBullets 0067  
                   _TRISBbits 000F93                     _TRISCbits 000F94                     _TRISDbits 000F95  
               ?_toggleGunLED 0001              ??_activateTarget 0015                 moveCursor@col 0018  
               moveCursor@row 0016                ??_printEndGame 0028                 ??_displayCtrl 0017  
       ??_initialisation_PORT 0013                ??_printRemTime 002B                 ?_putStringLCD 0017  
              __end_of___lmul 14F8                 __pidataCOMRAM 1A06           __size_of_changeMode 0012  
              __end_of_fliplr 159C          __end_of_setPinConfig 1988           start_initialization 17C2  
                   _ErrorUART 0039                ??_toggleGunLED 0013               _printRemBullets 18C8  
       __size_of_readBusyFlag 001A                   ?_setModeLED 0001                _singleGameTime 0048  
                 ?_moveCursor 0016               ??_setUARTconfig 0013    __end_of_setInterruptConfig 196C  
     activateTarget@targetNbr 0013                      ??___lmul 001B                ??_putStringLCD 0019  
                    ??_fliplr 0013           __end_of_displayCtrl 16C8                  _readBusyFlag 19A4  
                 __pbssCOMRAM 002B       __size_of_printStartGame 003A                 __pcstackBANK0 0060  
            ??_setTimerConfig 0013             __size_of_fireShot 0004                   sprintf@flag 0062  
        printEndGame@nbPoints 0026                   sprintf@prec 0063                   _capteurFlag 0034  
            ___lwdiv@dividend 0013                     __pintcode 0008             __size_of_waitASec 002E  
            displayCtrl@blink 0016                      ?___awmod 0021                      ?___lwdiv 0013  
                    ?___lwmod 001A           __size_of_setModeLED 0020             __size_of_putchLCD 0030  
     __end_of_printRemBullets 18EA           __size_of_moveCursor 004C             __size_of_stopShot 0004  
                 __smallconst 0E00                      _BAUDCON1 000F67            displayCtrl@display 0017  
        __end_of_printEndGame 143A              ___lwdiv@quotient 0018                      ?_sprintf 001F  
      __size_of_spi_Send_Read 0012                __size_of_rxIsr 015C                  ??_changeMode 0013  
        __end_of_printRemTime 18C8      __size_of_getRandomTarget 004A                      _LATBbits 000F8A  
                    _LATDbits 000F8C            _initialisation_LCD 1988            _initialisation_SPI 174A  
                    _IPR1bits 000F9F                      _PIE1bits 000F9D                      _PIR1bits 000F9E  
                    _RCONbits 000FD0           ?_initialisation_LCD 0001         __size_of_setPinConfig 001C  
         ?_initialisation_SPI 0001                     _printMBED 1828                     _timerFlag 0033  
                    _RPINR0_1 000E2A          __end_of_toggleGunLED 1A06                      _SSP2CON1 000F19  
                    _SSP2CON3 000F39                   _displayCtrl 1684                      _SSP2STAT 000F1A  
                   _printStat 143A                setModeLED@Mode 0013                     _startGame 0031  
          __end_of_changeMode 19F6                   _globalTimer 002D          ??_initialisation_LCD 0019  
        ??_initialisation_SPI 0013                 ??_printPoints 002B             ___lmul@multiplier 0013  
                 _INTCON2bits 000FF1                   _INTCON3bits 000FF0                     copy_data0 17D6  
        __end_of_putStringLCD 135C                  _setPinConfig 196C                      __Hrparam 0000  
                    __Lrparam 0000                    ?_printMBED 0001                 _spi_Send_Read 19D2  
                  ?_printStat 0026              __size_of___awmod 0070              __size_of___lwdiv 0052  
            __size_of___lwmod 0042              ?_printRemBullets 0067                    sprintf@val 0064  
              _printStartGame 1788                      _ammoLeft 004A               ___lwdiv@divisor 0015  
             ___lwdiv@counter 0017                 ?_clearDisplay 0001                      __ptext10 18C8  
                    __ptext11 18EA                      __ptext20 17F8                      __ptext12 143A  
                    __ptext21 15EE                      __ptext13 1828                      __ptext30 163A  
                    __ptext22 154A                      __ptext14 1856                      __ptext31 159C  
                    __ptext23 1988                      __ptext15 13CC                      __ptext32 14A2  
                    __ptext24 174A                      __ptext16 1086                      __ptext33 135C  
                    __ptext25 170A                      __ptext17 16C8                      __ptext34 1A1E  
                    __ptext26 1684                      __ptext18 14F8                      __ptext35 19E4  
                    __ptext27 190C                      __ptext19 12E6                      __ptext36 1A10  
                    __ptext28 19A4                      __ptext37 120A                      __ptext29 19D2  
                    _fireShot 1A1E                  ??_setModeLED 0013                     waitASec@i 0014  
            __size_of_sprintf 0184                  ??_moveCursor 001A                      _modeFlag 0036  
               __size_of_main 021E                 __size_of_rand 0052                   _myModeState 003C  
 __end_of_initialisation_PORT 174A           __end_of_printPoints 190C    activateLEDTarget@targetLED 0013  
                    _waitASec 1856             ??_getRandomTarget 0029                ?_spi_Send_Read 0001  
                    int$flags 004C                      _putchLCD 17F8                      _stopShot 1A1A  
                _SSP2STATbits 000F1A         __size_of_printEndGame 006E            __end_of_setModeLED 194E  
      __end_of_printStartGame 17C2            _setInterruptConfig 194E            __end_of_moveCursor 163A  
                  _INTCONbits 000FF2         __size_of_printRemTime 0022                ??_clearDisplay 0015  
         ?_setInterruptConfig 0001                      intlevel2 0000                     sprintf@ap 0060  
                   sprintf@sp 001F              ___lwmod@dividend 001A             _activateLEDTarget 120A  
       __size_of_toggleGunLED 0010            ?_activateLEDTarget 0013         __end_of_setUARTconfig 18A6  
                _printEndGame 13CC       __size_of_activateTarget 000A            printStat@statArray 0028  
                 ??_printMBED 001D          ??_setInterruptConfig 0013           ??_activateLEDTarget 0015  
                 ??_printStat 0028                  _printRemTime 18A6                    _RPINR12_13 000E30  
                  _RPINR26_27 000E37                 _toggleCounter 002F               ?_printStartGame 0001  
                    sprintf@c 0066                      sprintf@f 0021               ___lwmod@divisor 001C  
       __size_of_putStringLCD 0076               ___lwmod@counter 001E                  _toggleGunLED 19F6  
                 _printPoints 18EA     __end_of_activateLEDTarget 12E6               ??_spi_Send_Read 0013  
